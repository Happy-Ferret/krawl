Crawl by example
================

Crawl is a new vision of the C programming language. The idea is to fix all
small and sometimes annoying C problems without adding any new features.
Although replacing one feature with another is allowed, like it is planned for
the C preprocessor (it is being replaced by a module system and simple
templates system, which isn't done yet). I'm trying hard to keep the spirit of
C in Crawl alive and I really hope Crawl will give a rebirth to C. I do believe
C is eternal, but it doesn't mean it has to keep its form unchanged.

Summary of differences with C
-----------------------------

- Context-independent grammar, mostly taken from the Go programming language.
- No type qualifiers (no `const`).
- Corrected operator precedence.
- Real module system (support for direct C headers import is included).
- Type inference.
- All variables are zero-initialized by default.
- Multiple return values.
- Tuple assignments (swap without temporaries, yay!).
- Various changes to `switch` statement.
- Stronger and explicit type system.
- Arrays behave like values.
- Uninterpreted multiline string literals.
- Many C expressions are statements.
- Constant groups system with powerful `iota` instead of enums.
- Boolean type, `true` and `false` constants, `nil` constant.
- Arbitrary precision constants.
- Unified `for` loop statement.
- Removed "`->`" accessor.

Differences with C in details
-----------------------------

Context-independent grammar
~~~~~~~~~~~~~~~~~~~~~~~~~~~
The new grammar for Crawl was taken from the Go programming language. It was
tweaked a bit in order to suit semantics of the Crawl better. It's important to
have a context-independent grammar, because it adheres the KISS principle and
you can easily write a parser for a grammar like that. Crawl's grammar is also
LALR(1) friendly and can be implemented without any parser hacks (it's worth
mentioning that it requires one simple lexer hack, but it's really nothing).
Let's see how it looks like:

[source,crawl]
-------------
import (
	"stdio.h";
	"stdlib.h";
)

func sort_ints(a, b *void) int
{
	if *a.(*int) > *b.(*int) {
		return 1;
	}
	return 0;
}

func main(argc int, argv **byte) int
{
	var a []int = {5, 3, 1, 4, 2};
	stdlib.qsort(&a, 5, 4, sort_ints);

	for i := 0; i < 5; i++ {
		stdio.printf("%d\n", a[i]);
	}
	return 0;
}
-------------

Declarations
^^^^^^^^^^^^
Declarations in Crawl look reversed to a C programmer, but actually they are
more readable and one can easily read every declaration from left to right.
Some examples:

[source,crawl]
-------------
// 'x' and 'y' are arrays containing 10 pointers to int
var x, y [10]*int;

// 'z' is a byte
var z byte;

// 'cache' is an anonymous struct which has the following fields: 
// - 'entries' which is a pointer to type 'CacheEntry'
// - 'num' which is an unsigned integer (32 bit)
var cache struct { entries *CacheEntry; num uint; };

// 'cmp' is a function pointer which points to a function, which has two
// arguments of type int and returns bool
var cmp func(int, int) bool;

// the defintion of the well known 'printf' function:
func printf(fmt *byte, ...) int;
-------------

No type qualifiers
~~~~~~~~~~~~~~~~~~
Crawl has no type qualifiers, in C the most widely used one is a +const+ type
qualifier. When two other type qualifiers in C are optimizier hints (+restrict+
and +volatile+) +const+ is a semantic modifying qualifier and what's more
scary, it is viral. By that I mean that once you've used it in one place, you
have to use it in all other places, especially if your type system is strict
about that. The end result here, it causes many maintenance problems and solves
zero real problems. Keyword +const+ should prevent accidental writes to a
memory location, but the most horrible bugs, which are buffer overflow writes,
don't care about +const+. As simple as that, no +const+ type qualifier in
Crawl. Constants in Crawl have completely different meaning.

NOTE: Most likely +volatile+ and +restrict+ will be added in future in some
form.

Corrected operator precedence
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C has quite a long history and there are some side effects of that. One of them
is broken operator precedence. Long time ago C's predecessor, B, had only "|"
and "&" binary operators and no "&&" and "||" (one operator was used for logic
and bitwise operations depending on the context). And as a result of that,
precedence of "|" and "&" operators was kept. The problem is that it is lower
than precedence of "==" and "!=". For example:

[source,c]
------------------
if (a & mask != 0)
	foo();
------------------

This statement will be parsed into an AST as:

[source,c]
------------------
if (a & (mask != 0))
	foo();
------------------

Which most likely isn't what was a programmer's intention. In C it doesn't
matter, because in C boolean expression is defined as integer being != 0 or ==
0. In a language with a real boolean type it matters. Crawl has corrected
operator precedence.

Real module system
~~~~~~~~~~~~~~~~~~
Preprocessor based module system is a huge pain, everyone knows it. Many
languages since then started to implement various module systems. Crawl of
course follows this tendency. C\++ decided to keep C's module system for the
sake of compatibility, but it was a horrible decision. We all realize that now,
when C++ code takes ages to compile. Of course Crawl has a proper module
system, but since one of the priorities for the language was to keep it C
friendly, this module system also can import C header files directly. And as
many of you may think it slows down compilation, it's not true. Crawl uses
smart caching scheme for C header modules. Hopefully, Crawl's module system
will allow us to make Crawl compilers very fast.

Type inference
~~~~~~~~~~~~~~
Crawl supports full type inference in hot spots, where it matters a lot.
Compiler should help programmer in cases where it can do so. Removing tedious
repitition is one of them. In C code you often see declarations like that:

[source,c]
------------------
MyMegaType *concrete = (MyMegaType*)abstract;
------------------

Obviously typing full type name twice is a pointless activity. Compiler knows
the type of `(MyMegaType*)abstract` expression. Why can't we use that fact?
We can. Crawl has "declare and initialize" operator which declares a variable
and infers its type using initializer type information:

[source,crawl]
------------------
concrete := abstract.(*MyMegaType);
------------------

Few other example type inference examples:

[source,crawl]
------------------
// 'i' is int
i := 0;

// 'pi' is float, 'name' is *byte
pi, name := 3.1415, "nsf";

// function with multiple return values
var w, h = GetSize();
------------------

All variables are zero-initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Most compilers/runtimes provide that kind of behaviour by default anyway.
Currently we have enough horsepower in CPUs to forget about this tiny thing.
But Crawl is a low level language and I understand that maybe, there will be a
place, where having uninitialized variables matters. There is a way to remove
zero-initializing behaviour. Just like in the D programming language:

[source,crawl]
------------------
var x int;        // zero
var y int = void; // undefined (stack garbage)
------------------

It's somewhat an area of premature optimization. Having everything
zero-initialized provides you with nice assumptions as well.

WARNING: Prohibiting zero-initialization is not implemented yet.

Multiple return values
~~~~~~~~~~~~~~~~~~~~~~
This feature is simply useful. Sometimes you have more than one value to return
from a function and defining a structure for only that purpose is kind of
expensive. Crawl allows you to return multiple values from a function:

[source,crawl]
------------------
func GetSize() (int, int)
{
	w := CalculateWidth();
	h := CalculateHeight();
	return w, h;
}

func UseSize()
{
	w, h := GetSize();
	stdio.printf("Size: %dx%d\n", w, h);
}
------------------

Another small feature in this area which is worth mentioning is named return
values. Crawl provides a way to name return values of a function. In this case
they are zero-initialized:

[source,crawl]
------------------
// Get a number of 'A' characters in 'chars'.
func CountA(chars *byte, num int) (count int)
{
	for i := 0; i < num; i++ {
		if chars[i] == 'A' {
			count++;
		}
	}
}
------------------

Tuple assignments
~~~~~~~~~~~~~~~~~
As you have probably seen already, Crawl allows you to declare multiple
variables at the same time and Crawl has multiple return values. The same is
true for plain assignments:

[source,crawl]
------------------
func PointerArithmetic(LHS, RHS *Expr)
{
	// swap LHS and RHS if RHS is a pointer
	if sema.IsPointer(RHS) {
		LHS, RHS = RHS, LHS;		
	}
	DoPointerArithmetic(LHS.(*Pointer), RHS.(*Integer));
}
------------------

Switch statement changes
~~~~~~~~~~~~~~~~~~~~~~~~
Many languages these days preserve C switch statement semantics, which is not a
smart idea at all. I've seen better ways of doing switch statements in
different programming languages. In Crawl switch statement is quite different
in behaviour from C's. Here is the list of changes:

- Case clause "breaks" by default. It's actually quite easy to observe that
  most switch statements written have case clauses with ++break++ at the end.
  Apparently using ++break++ as a default behaviour for a switch case clause is
  a good idea:
+
[source,crawl]
-----------------------
x := 1;
switch x {
case 0:
	printf("0\n");
case 1:
	printf("1\n");
case 2:
	printf("2\n");
default:
	printf("something else\n");
}
// this code will print "1\n"
-----------------------

- One place where "fallthrough" behaviour was used a lot is a case clause,
  which is triggered by multiple different values. Crawl allows you to specify
  multiple values for each case clause directly avoiding another portion of
  repitition:
+
[source,crawl]
-----------------------
var x uint = GetX();
switch x {
case 0, 1, 2, 3, 4:
	printf("less than 5\n");
case 5:
	printf("5!\n");
default:
	printf("greater than 5\n");
}
-----------------------

- Of course sometimes you just need to have a "fallthrough" behavior, a new
  keyword - ++fallthrough++ was added for that purpose:
+
[source,crawl]
-----------------------
x := 1;
switch x {
case 0:
	printf("0 and");
	fallthrough;
case 1:
	printf("1 and");
	fallthrough;
case 2:
	printf("2 and");
	fallthrough;
case 3:
	printf("3\n");
}
// this code will print "1 and 2 and 3\n"
-----------------------

- Some people complain that their language's switch statement doesn't work for
  strings. But frankly, how often do you need to use string comparison as a
  base for variant selection mechanism? It's simply inefficient. The only code
  I can imagine where it works is a primitive command line or config parsing.
  On the other hand a case where you have an if else "train" in your code is
  quite common. In Crawl switch statements have a second form, which allows
  you to write if else "trains" easier:
+
[source,crawl]
-----------------------
// this code:
flags := GetFlags();
if flags & FEATURE_X != 0 {
	UseFeatureX();
} else if flags & FEATURE_Y != 0 {
	UseFeatureY();
} else if flags & FEATURE_Z != 0 {
	UseFeatureZ();
} else if flags & (FEATURE_A | FEATURE_B | FEATURE_C) != 0 {
	UseFeatureABC();
}
// can be written as:
flags := GetFlags();
switch {
case flags & FEATURE_X != 0:
	UseFeatureX();
case flags & FEATURE_Y != 0:
	UseFeatureY();
case flags & FEATURE_Z != 0:
	UseFeatureZ();
case flags & (FEATURE_A | FEATURE_B | FEATURE_C) != 0:
	UseFeatureABC();
}
-----------------------
+
And of course you can even use that for string comparison if you really want
to:
+
[source,crawl]
-----------------------
s := GetNextOption();
switch {
case str.Equals(s, "option-x"):
	// ...
case str.Equals(s, "option-y"):
	// ...
case str.Equals(s, "option-z"):
	// ...
default:
	// unknown option 's'
}
-----------------------

Stronger and explicit type system
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Crawl's type system is much more explicit than C's, there are no implicit type
casts. Floating point type cannot be used as an integer, integer cannot be used
as a boolean, unsigned integer cannot be used as a signed integer, etc. There
are some implicit conversions happening during assignments though, for example
a pointer to an array can be converted to a pointer to an array's element type,
but it doesn't break things. Many of you may think (as was I), that such a
strict type system gives headaches to the programmer and I must say it's not
true. Explicit type system acutally forces you to think about types and why are
you using them. In C most libraries define a zillion of types for no reason,
they say its for portability, but defining zillion types doesn't make you
portable. Let's take a look at example, where type system deals with
portability:

[source,crawl]
-----------------------
// Let's take famous C function:

type size_t uint32; // on x86 or uint64 on x86_64
func memcpy(dest, src *void, n size_t) *void;

// Obviously you don't need to copy more bytes than your system supports,
// that's why C uses size_t here. But how do you use that function (let's
// imagine our type system is the same as in C):

var size uint64 = GetSize();
memcpy(d, s, size);

// Ok, works for both x86 and x86_64, but on x86 it is possible to lose some
// information, because size_t is smaller than uint64. This on the other hand:

var size uint32 = GetSize();
memcpy(d, s, size);

// Works safely for both platforms. You see, when you use variable sized types
// you may want to have an explicit cast to notice your code reader that there
// is a type change and possible information loss. You don't want to have these
// things implicit. In Crawl it doesn't matter whether uint32 or uint64 have
// the same size as size_t or not, they are different types. Therefore you have
// to introduce a cast and this cast will work as your agreement for possible
// information loss:

var size uint64 = GetSize();
memcpy(d, s, size.(size_t));
-----------------------

I wasn't sure for a long time that this is a right approach and probably I'm
still not 100% sure. But it's definitely something interesting to think about.

Arrays behave like values
~~~~~~~~~~~~~~~~~~~~~~~~~
In C arrays have weird behaviour, in some places they are values in other
places they are pointer types. If you use an array type as a function argument
it becomes a pointer suddenly. And of course you can't assign one array to
another in C even if they have the same size, but actually it is achievable
through wrapping them into structs.  Crawl simply uses arrays as if they were
++struct { T _[N]; }++ in C. You can copy arrays, you can pass arrays as
arguments to functions (and it will make a copy), etc. It's a tiny thing, but
it's good to have a clear conceptual vision of array types in a language.

There is also one thing I haven't thought about a lot. Array operations or
vector operations. We all know that CPUs are stream oriented these days and
most of them have SSE instructions which support vector operations. Maybe it
makes sense to allow things like that in Crawl:

[source,crawl]
-----------------------
var a []int = {1, 2, 3};
var b []int = {4, 5, 6};

c := a + b;

c[0] == 5;
c[1] == 7;
c[2] == 9;
-----------------------

We'll see.

Uninterpreted multiline string literals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Not a big addition, but having it is useful sometimes. Uninterpreted strings
works just fine for regular expressions. Multiline strings are good for things
like templates or something. Examples:

[source,crawl]
-----------------------
var uninterpreted = `\n is \n here and it's not a 0x0A`;
var multiline = 
`Multiline strings v1.0

${HEADER}

${BODY}

${FOOTER}
`;
-----------------------

Many C expressions are statements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Probably, it can be interpreted as a bad idea. For example you can't do that in
Crawl:

[source,crawl]
-----------------------
var p *int;
a := p++;
b := p++;
c := p++;
-----------------------

But at the end, one of the most important things about the code is readability.
And restricting programmer's ingenuity in that area matters. We've seen all
those code obfuscation contests, and quite ambigous expressions like:
`a**++*i++`. In Crawl C's increment/decrement expression is a statement and
therefore has only postfix form. There is no such thing as assignment
expression in Crawl. The only expression type that has side effects is a
function call expression. And Crawl guarantees that all expressions with side
effects are evaluated from left to right (but of course function call argument
expressions should be evaluated before calling the function, so.. the order is
depth-first in that sense):

[source,crawl]
-----------------------
x[a()], y[b()] = foo(c(), d()), bar(e(), f());
-----------------------

And that's how it will be interpreted (using improvised SSA form):

[source,c]
-----------------------
%1  = a();
%2  = nth_element_address_in(x, %1);
%3  = b();
%4  = nth_element_address_in(y, %3);
%5  = c();
%6  = d();
%7  = foo(%5, %6);
%8  = e();
%9  = f();
%10 = bar(%8, %9);
*%2 = %7;
*%4 = %10;
-----------------------

Constant groups and powerful iota
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In Crawl there are no enums, but you can emulate them using constant groups and
magic ++iota++. Iota is somewhat like C's `__LINE__`, depending on a position
relative to a ++const++ keyword it changes the value of itself starting from 0
after each ++const++ keyword. It increments every constant specification
clause. Take a look:

[source,crawl]
-----------------------
const (
	ZERO = iota;
	ONE = iota;
	TWO = iota;
	THREE = iota;
	FOUR = iota;
	FIVE = iota;
)
// ZERO == 0, ONE == 1, etc.
-----------------------

But of course typing `iota` each time is painful, constant groups have another
feature that helps you avoid code duplication. If a constant specification
clause contains no initializer, it takes an initializer of a previous clause.
Of course first constant specification clause must have a non-empty
initializer. The example above can be written as:

[source,crawl]
-----------------------
const (
	ZERO = iota;
	ONE;
	TWO;
	THREE;
	FOUR;
	FIVE;
)
-----------------------

But as you can see, `iota` is more powerful than plain enums. You can create
various interesting thing with it:

[source,crawl]
-----------------------
// reversing
const (
	A = LAST - (iota + 1); // 4
	B;                     // 3
	C;                     // 2
	D;                     // 1
	E;                     // 0

	LAST = iota;           // 5
)

// bit flags
const (
	BIT1 = 1 << iota; // 1  (0b00000001)
	BIT2;             // 2  (0b00000010)
	BIT3;             // 4  (0b00000100)
	BIT4;             // 8  (0b00001000)
	BIT5;             // 16 (0b00010000)
)

// bit masks (Crawl uses ^ as unary NOT, in C it's ~)
const (
	ALL_BUT_BIT1 = ^(1 << iota).(uint8); // 254 (0b11111110)
	ALL_BUT_BIT2;                        // 253 (0b11111101)
	ALL_BUT_BIT3;                        // 251 (0b11111011)
	ALL_BUT_BIT4;                        // 247 (0b11110111)
	ALL_BUT_BIT5;                        // 239 (0b11101111)
)
-----------------------

Boolean type, and predefined constants
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
There is a real boolean type in Crawl, just like in C++. And many statements
have a requirement for their parts to have an expression of boolean type. For
example:

[source,crawl]
-----------------------
x := 84;

// this is a compilation error, 'if' conditional expression must be of boolean type
if x { do_something(); }

// and that's how you should write it
if x != 0 { do_something(); }
-----------------------

In Crawl, there are three more predefined constants other than `iota`. They
don't have any special meaning however.

- `true` is a predefined constant of an abstract boolean type, compatible with
  any boolean type.
- `false` is a predefined constant of an abstract boolean type, compatible with
  any boolean type.
- `nil` is a predefined constant of a special `*void` (pointer to void) type. It
  is compatible with any pointer type.

Since boolean binary expressions result in an abstract boolean type as well,
you can make all these constants by yourself (that's why I'm not calling them
special, they are just predefined):

[source,crawl]
-----------------------
const (
	true = 1 != 0;
	false = 1 != 1;
	nil = 0.(*void);
)
-----------------------

Arbitrary precision constants
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In Crawl constants are of an abstract type by default. There are four abstract
types: boolean, integer, float and string.

- Abstract boolean is a result of all binary boolean operations, like `a > b`,
  etc. Crawl has two predefined constants of this type: `true` and `false`.
  Abstract boolean type is simply compatible with any other non-abstract type.

- Abstract integer is a type of an integer literal, like `31337`. It can be
  converted to a real type depending on the context. However until that happens
  and during constant expression evaluation it has arbitrary precision (in
  practice it simply means precision is big enough).

- Abstract float is a type of a floating point literal, like `3.1415`. It has
  arbitrary precision as well.

- Abstract string is a type of a string literal, like `"nsf"`. You can
  concatenate abstract strings with `+` operator. Abstract string literal can
  be converted to `*byte` typed constant.

Here is the simple example that shows how arbitrary precision constants work:

[source,crawl]
-----------------------
const Huge = 1 << 100
const Four int8 = Huge >> 98
-----------------------

Unified for statement
~~~~~~~~~~~~~~~~~~~~~
In C there were few loop statements: `while()`, `for(;;)` and `do; while()`. In
Crawl it's all now a single `for` statment with different forms. Examples:

[source,crawl]
-----------------------
// while-like
i := 0;
for i < 5 {
	i++;
}

// for-like
for i := 0; i < 5; i++ {
}

// infinite loop
for {
}

// there is no do while form, but you can emulate it easily
for {
	if !cond { break }
}
-----------------------

Removed "`->`" accessor
~~~~~~~~~~~~~~~~~~~~~
The famous C/C++ dereferencing struct field accessor was removed. Now "`.`"
accessor does both types of field access. Rules are simple: if the operand is a
struct, then it's a direct access operation, if the operand is a pointer to
struct, then it's an indirect access operation.

[source,crawl]
-----------------------
type Element struct {
	a, b, c int;
};

type List struct {
	elem Element;
	next *List;
};

var x *List;
y := x.next.next.elem.a;
-----------------------
