==============================================================================
= Basic type information
==============================================================================

Type classes
 - VOID
 - BOOL
 - INT
 - FLOAT
 - STRING (abstract type only)
 - POINTER
 - STRUCT
 - UNION
 - ARRAY
 - FUNC (special pointer type)

Built-in named types:
 - void
 - bool
 - int8, int16, int32, int64
 - uint8, uint16, uint32, uint64
 - float32
 - float64

Aliases:
 - int    (alias to int32)
 - uint   (alias to uint32)
 - byte   (alias to uint8)
 - float  (alias to float32)
 - double (alias to float64)

Possible composite types:
 - [5]T              (composite array)
 - *T                (composite pointer)
 - struct { fields } (composite struct)
 - union { fields }  (composite union)
 - func(args)ret     (composite func)




==============================================================================
= Sets of rules for binary expressions ("<->" means "and vice versa")
==============================================================================
	non_pointer_binop_compat = 
		if !one_of(is_pointer, A, B) {
			are_the_same(A, B)
			is_int(A)          && is_abstract_number(B) <->
			is_float(A)        && is_abstract_number(B) <->
			is_bool(A)         && is_abstract_bool(B)   <->
			is_abstract_int(A) && is_abstract_float(B)  <->
		}

	pointer_int =
		is_pointer(A) && is_int(B) <->

	pointer_pointer =
		are_the_same(A, B)

	shift_op =
		is_int(A) && is_unsigned_int(B)




==============================================================================
= Binary operators, valid operands and additional rules
==============================================================================

  Operator	| Valid operand classes		| Additional validation rules
		|				| 
  == !=		| INT FLOAT POINTER STRING BOOL	| non_pointer_binop_compat || pointer_pointer
  +		| INT FLOAT POINTER STRING	| non_pointer_binop_compat || pointer_int
  -		| INT FLOAT POINTER             | non_pointer_binop_compat || pointer_pointer || pointer_int
  < <= > >=	| INT FLOAT POINTER		| non_pointer_binop_compat || pointer_pointer
  * /		| INT FLOAT			| non_pointer_binop_compat
  & | ^ %	| INT				| non_pointer_binop_compat
  << >>		| INT				| shift_op
  && ||		| BOOL				| non_pointer_binop_compat

The resulting type of a binary expression:

1. If both types are the same, the resulting type is the type of both operands.
2. If one of the operands has a concrete type and the other has an abstract
   type, the resulting type is a concrete type.
3. If both operands are abstract number types, the resulting type is the
   abstract float type.
4. Exceptions:
   - If one of the operands is a pointer and the other is int, the resulting
     type is a pointer type.
   - If both operands are pointers, the resulting type is an abstract int.
   - Abstract bool type is the resulting type of all comparison operators
     (== != < <= > >=).
   - The resulting type of a binary shift expression is the type of the left
     side operand.




==============================================================================
= Unary operators
==============================================================================
  + -				INT FLOAT
  ^ (bitwise NOT)		INT
  !				BOOL
  &				ADDRESSABLE
  *				POINTER




==============================================================================
= Explicit type casts
==============================================================================
  INT <-> FLOAT
  POINTER <-> INT
  POINTER <-> FUNC

  INT -> INT
  FLOAT -> FLOAT
  POINTER -> POINTER
