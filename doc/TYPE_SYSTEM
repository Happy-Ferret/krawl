glossary for rules:
  #     - means any without restrictions
          (can't use *, because it is a pointer symbol)
  [A-Z] - means any, but with restrictions
          (specified in parens)


==========================================================================
= Assignable (implicitly convertable)
==========================================================================
Cases:
	var X = Y;
	X := Y;
	foo(X, Y);
	return X, Y;

0. aint, afloat to int#, uint#, float#
1. abool, bool  to bool
2. intX         to intY (Y >= X)
3. uintX        to intY (Y > X), uintZ (Z >= X)
4. float32      to float64
5. astring      to *byte
6. *#, func(#)# to *void
7. *void        to *#, func(#)#
8. *[#]T        to *T
9. X            to Y (if X and Y have the same underlying types)

==========================================================================
= Convertable (explicitly)
==========================================================================
Cases:
	X.(T);

1. int#, uint#, float# to int#, uint#, float#
2. int#, uint#, *# to int#, uint#, *#
3. assignable(X, Y)

==========================================================================
= Arithmetic implicit conversion
==========================================================================
Valid only for int#, uint#, float# operands

(rules should be applied in the given order, each rule in case of success,
 terminates conversion)

1. If one operand is float64, the other operand is converted to float64.
2. If one operand is float32, the other operand is converted to float32.
3. If both operands are uint# or int#, smaller is converted to the bigger.
4. If the bigger operand is int#, smaller is converted to the bigger.
5. (The case where one operand is uintX and the other operand is intY, and 
    X >= Y is not binary op compatible)

==========================================================================
= Binary op compatible
==========================================================================
Cases:
	X op Y

op(==), op(!=),
defined for: int#, uint#, float#, *#, string, bool
	1. int#, uint#         OP int#, uint#
	2. float#              OP float#
	3. *#                  OP *#
	4. stirng              OP string
	5. bool                OP bool

op(+),
defined for: int#, uint#, float#, *#, string
	1. int#, uint#         OP int#, uint#
	2. float#              OP float#
	3. int#, uint#, *#     OP int#, uint#, *#
	4. string              OP string

op(-),
defined for: int#, uint#, float#, *#
	1. int#, uint#         OP int#, uint#
	2. float#              OP float#
	3. *#                  OP int#, uint#, *#

op(<), op(<=), op(>), op(>=),
defined for: int#, uint#, float#, *#
	1. int#, uint#         OP int#, uint#
	2. float#              OP float#
	3. *#                  OP *#

op(*), op(/),
defined for: int#, uint#, float#
	1. int#, uint#         OP int#, uint#
	2. float#              OP float#

op(&), op(|), op(^), op(%),
defined for: int#, uint#
	1. int#, uint# OP int#, uint#

op(<<), op(>>),
defined for: int#, uint#
	1. int#, uint# OP uint#

op(&&), op(||),
defined for: bool
	1. bool OP bool
