// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brawl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Brawl {

namespace {

const ::google::protobuf::Descriptor* TypeHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TypeHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* NamedType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NamedType_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointerType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointerType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayType_reflection_ = NULL;
const ::google::protobuf::Descriptor* StructType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StructType_reflection_ = NULL;
const ::google::protobuf::Descriptor* StructType_Field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StructType_Field_reflection_ = NULL;
const ::google::protobuf::Descriptor* FuncType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FuncType_reflection_ = NULL;
const ::google::protobuf::Descriptor* Decl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Decl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Module_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Module_reflection_ = NULL;
const ::google::protobuf::Descriptor* CModuleCache_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CModuleCache_reflection_ = NULL;
const ::google::protobuf::Descriptor* CModuleCache_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CModuleCache_Entry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_brawl_2eproto() {
  protobuf_AddDesc_brawl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brawl.proto");
  GOOGLE_CHECK(file != NULL);
  TypeHeader_descriptor_ = file->message_type(0);
  static const int TypeHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeHeader, type_),
  };
  TypeHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TypeHeader_descriptor_,
      TypeHeader::default_instance_,
      TypeHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TypeHeader));
  NamedType_descriptor_ = file->message_type(1);
  static const int NamedType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedType, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedType, real_),
  };
  NamedType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NamedType_descriptor_,
      NamedType::default_instance_,
      NamedType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NamedType));
  PointerType_descriptor_ = file->message_type(2);
  static const int PointerType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointerType, points_to_),
  };
  PointerType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointerType_descriptor_,
      PointerType::default_instance_,
      PointerType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointerType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointerType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointerType));
  ArrayType_descriptor_ = file->message_type(3);
  static const int ArrayType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayType, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayType, elem_),
  };
  ArrayType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArrayType_descriptor_,
      ArrayType::default_instance_,
      ArrayType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArrayType));
  StructType_descriptor_ = file->message_type(4);
  static const int StructType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructType, alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructType, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructType, field_),
  };
  StructType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StructType_descriptor_,
      StructType::default_instance_,
      StructType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StructType));
  StructType_Field_descriptor_ = StructType_descriptor_->nested_type(0);
  static const int StructType_Field_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructType_Field, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructType_Field, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructType_Field, padding_),
  };
  StructType_Field_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StructType_Field_descriptor_,
      StructType_Field::default_instance_,
      StructType_Field_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructType_Field, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructType_Field, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StructType_Field));
  FuncType_descriptor_ = file->message_type(5);
  static const int FuncType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncType, arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncType, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncType, varargs_),
  };
  FuncType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FuncType_descriptor_,
      FuncType::default_instance_,
      FuncType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FuncType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FuncType));
  Decl_descriptor_ = file->message_type(6);
  static const int Decl_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decl, decltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decl, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decl, valuetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decl, value_),
  };
  Decl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Decl_descriptor_,
      Decl::default_instance_,
      Decl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Decl));
  Module_descriptor_ = file->message_type(7);
  static const int Module_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, package_),
  };
  Module_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Module_descriptor_,
      Module::default_instance_,
      Module_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Module));
  CModuleCache_descriptor_ = file->message_type(8);
  static const int CModuleCache_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CModuleCache, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CModuleCache, entry_),
  };
  CModuleCache_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CModuleCache_descriptor_,
      CModuleCache::default_instance_,
      CModuleCache_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CModuleCache, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CModuleCache, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CModuleCache));
  CModuleCache_Entry_descriptor_ = CModuleCache_descriptor_->nested_type(0);
  static const int CModuleCache_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CModuleCache_Entry, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CModuleCache_Entry, mtime_),
  };
  CModuleCache_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CModuleCache_Entry_descriptor_,
      CModuleCache_Entry::default_instance_,
      CModuleCache_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CModuleCache_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CModuleCache_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CModuleCache_Entry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brawl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TypeHeader_descriptor_, &TypeHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NamedType_descriptor_, &NamedType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointerType_descriptor_, &PointerType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArrayType_descriptor_, &ArrayType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StructType_descriptor_, &StructType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StructType_Field_descriptor_, &StructType_Field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FuncType_descriptor_, &FuncType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Decl_descriptor_, &Decl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Module_descriptor_, &Module::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CModuleCache_descriptor_, &CModuleCache::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CModuleCache_Entry_descriptor_, &CModuleCache_Entry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_brawl_2eproto() {
  delete TypeHeader::default_instance_;
  delete TypeHeader_reflection_;
  delete NamedType::default_instance_;
  delete NamedType_reflection_;
  delete PointerType::default_instance_;
  delete PointerType_reflection_;
  delete ArrayType::default_instance_;
  delete ArrayType_reflection_;
  delete StructType::default_instance_;
  delete StructType_reflection_;
  delete StructType_Field::default_instance_;
  delete StructType_Field_reflection_;
  delete FuncType::default_instance_;
  delete FuncType_reflection_;
  delete Decl::default_instance_;
  delete Decl_reflection_;
  delete Module::default_instance_;
  delete Module_reflection_;
  delete CModuleCache::default_instance_;
  delete CModuleCache_reflection_;
  delete CModuleCache_Entry::default_instance_;
  delete CModuleCache_Entry_reflection_;
}

void protobuf_AddDesc_brawl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013brawl.proto\022\005Brawl\"\032\n\nTypeHeader\022\014\n\004ty"
    "pe\030\001 \002(\r\"\'\n\tNamedType\022\014\n\004name\030\001 \002(\t\022\014\n\004r"
    "eal\030\003 \002(\005\" \n\013PointerType\022\021\n\tpoints_to\030\001 "
    "\002(\005\"\'\n\tArrayType\022\014\n\004size\030\001 \002(\004\022\014\n\004elem\030\002"
    " \002(\005\"\213\001\n\nStructType\022\021\n\talignment\030\001 \002(\r\022\014"
    "\n\004size\030\002 \002(\r\022&\n\005field\030\003 \003(\0132\027.Brawl.Stru"
    "ctType.Field\0324\n\005Field\022\014\n\004name\030\001 \002(\t\022\014\n\004t"
    "ype\030\002 \002(\005\022\017\n\007padding\030\003 \002(\r\"8\n\010FuncType\022\013"
    "\n\003arg\030\001 \003(\005\022\016\n\006result\030\002 \003(\005\022\017\n\007varargs\030\003"
    " \002(\010\"V\n\004Decl\022\020\n\010decltype\030\001 \002(\r\022\014\n\004name\030\002"
    " \002(\t\022\014\n\004type\030\003 \002(\005\022\021\n\tvaluetype\030\004 \001(\r\022\r\n"
    "\005value\030\005 \001(\t\")\n\006Module\022\016\n\006prefix\030\001 \002(\t\022\017"
    "\n\007package\030\002 \002(\t\"r\n\014CModuleCache\022\016\n\006heade"
    "r\030\001 \002(\t\022(\n\005entry\030\002 \003(\0132\031.Brawl.CModuleCa"
    "che.Entry\032(\n\005Entry\022\020\n\010filename\030\001 \002(\t\022\r\n\005"
    "mtime\030\002 \002(\004", 611);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brawl.proto", &protobuf_RegisterTypes);
  TypeHeader::default_instance_ = new TypeHeader();
  NamedType::default_instance_ = new NamedType();
  PointerType::default_instance_ = new PointerType();
  ArrayType::default_instance_ = new ArrayType();
  StructType::default_instance_ = new StructType();
  StructType_Field::default_instance_ = new StructType_Field();
  FuncType::default_instance_ = new FuncType();
  Decl::default_instance_ = new Decl();
  Module::default_instance_ = new Module();
  CModuleCache::default_instance_ = new CModuleCache();
  CModuleCache_Entry::default_instance_ = new CModuleCache_Entry();
  TypeHeader::default_instance_->InitAsDefaultInstance();
  NamedType::default_instance_->InitAsDefaultInstance();
  PointerType::default_instance_->InitAsDefaultInstance();
  ArrayType::default_instance_->InitAsDefaultInstance();
  StructType::default_instance_->InitAsDefaultInstance();
  StructType_Field::default_instance_->InitAsDefaultInstance();
  FuncType::default_instance_->InitAsDefaultInstance();
  Decl::default_instance_->InitAsDefaultInstance();
  Module::default_instance_->InitAsDefaultInstance();
  CModuleCache::default_instance_->InitAsDefaultInstance();
  CModuleCache_Entry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brawl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brawl_2eproto {
  StaticDescriptorInitializer_brawl_2eproto() {
    protobuf_AddDesc_brawl_2eproto();
  }
} static_descriptor_initializer_brawl_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TypeHeader::kTypeFieldNumber;
#endif  // !_MSC_VER

TypeHeader::TypeHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TypeHeader::InitAsDefaultInstance() {
}

TypeHeader::TypeHeader(const TypeHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TypeHeader::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TypeHeader::~TypeHeader() {
  SharedDtor();
}

void TypeHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TypeHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TypeHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TypeHeader_descriptor_;
}

const TypeHeader& TypeHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brawl_2eproto();  return *default_instance_;
}

TypeHeader* TypeHeader::default_instance_ = NULL;

TypeHeader* TypeHeader::New() const {
  return new TypeHeader;
}

void TypeHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TypeHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TypeHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TypeHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TypeHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TypeHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TypeHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TypeHeader::MergeFrom(const TypeHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TypeHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeHeader::CopyFrom(const TypeHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TypeHeader::Swap(TypeHeader* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TypeHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TypeHeader_descriptor_;
  metadata.reflection = TypeHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NamedType::kNameFieldNumber;
const int NamedType::kRealFieldNumber;
#endif  // !_MSC_VER

NamedType::NamedType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NamedType::InitAsDefaultInstance() {
}

NamedType::NamedType(const NamedType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NamedType::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  real_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NamedType::~NamedType() {
  SharedDtor();
}

void NamedType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NamedType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NamedType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NamedType_descriptor_;
}

const NamedType& NamedType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brawl_2eproto();  return *default_instance_;
}

NamedType* NamedType::default_instance_ = NULL;

NamedType* NamedType::New() const {
  return new NamedType;
}

void NamedType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    real_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NamedType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_real;
        break;
      }
      
      // required int32 real = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_real:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &real_)));
          set_has_real();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NamedType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 real = 3;
  if (has_real()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->real(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NamedType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 real = 3;
  if (has_real()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->real(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NamedType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 real = 3;
    if (has_real()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NamedType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NamedType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NamedType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NamedType::MergeFrom(const NamedType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_real()) {
      set_real(from.real());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NamedType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedType::CopyFrom(const NamedType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void NamedType::Swap(NamedType* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(real_, other->real_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NamedType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NamedType_descriptor_;
  metadata.reflection = NamedType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointerType::kPointsToFieldNumber;
#endif  // !_MSC_VER

PointerType::PointerType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointerType::InitAsDefaultInstance() {
}

PointerType::PointerType(const PointerType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointerType::SharedCtor() {
  _cached_size_ = 0;
  points_to_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointerType::~PointerType() {
  SharedDtor();
}

void PointerType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointerType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointerType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointerType_descriptor_;
}

const PointerType& PointerType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brawl_2eproto();  return *default_instance_;
}

PointerType* PointerType::default_instance_ = NULL;

PointerType* PointerType::New() const {
  return new PointerType;
}

void PointerType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    points_to_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointerType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 points_to = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_to_)));
          set_has_points_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointerType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 points_to = 1;
  if (has_points_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->points_to(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointerType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 points_to = 1;
  if (has_points_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->points_to(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointerType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 points_to = 1;
    if (has_points_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points_to());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointerType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointerType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointerType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointerType::MergeFrom(const PointerType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_points_to()) {
      set_points_to(from.points_to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointerType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointerType::CopyFrom(const PointerType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointerType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PointerType::Swap(PointerType* other) {
  if (other != this) {
    std::swap(points_to_, other->points_to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointerType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointerType_descriptor_;
  metadata.reflection = PointerType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArrayType::kSizeFieldNumber;
const int ArrayType::kElemFieldNumber;
#endif  // !_MSC_VER

ArrayType::ArrayType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArrayType::InitAsDefaultInstance() {
}

ArrayType::ArrayType(const ArrayType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArrayType::SharedCtor() {
  _cached_size_ = 0;
  size_ = GOOGLE_ULONGLONG(0);
  elem_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArrayType::~ArrayType() {
  SharedDtor();
}

void ArrayType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArrayType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayType_descriptor_;
}

const ArrayType& ArrayType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brawl_2eproto();  return *default_instance_;
}

ArrayType* ArrayType::default_instance_ = NULL;

ArrayType* ArrayType::New() const {
  return new ArrayType;
}

void ArrayType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = GOOGLE_ULONGLONG(0);
    elem_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArrayType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_elem;
        break;
      }
      
      // required int32 elem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elem_)));
          set_has_elem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArrayType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }
  
  // required int32 elem = 2;
  if (has_elem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->elem(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArrayType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->size(), target);
  }
  
  // required int32 elem = 2;
  if (has_elem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->elem(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArrayType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }
    
    // required int32 elem = 2;
    if (has_elem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elem());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArrayType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArrayType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArrayType::MergeFrom(const ArrayType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_elem()) {
      set_elem(from.elem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArrayType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayType::CopyFrom(const ArrayType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ArrayType::Swap(ArrayType* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(elem_, other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArrayType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayType_descriptor_;
  metadata.reflection = ArrayType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StructType_Field::kNameFieldNumber;
const int StructType_Field::kTypeFieldNumber;
const int StructType_Field::kPaddingFieldNumber;
#endif  // !_MSC_VER

StructType_Field::StructType_Field()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StructType_Field::InitAsDefaultInstance() {
}

StructType_Field::StructType_Field(const StructType_Field& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StructType_Field::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  padding_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StructType_Field::~StructType_Field() {
  SharedDtor();
}

void StructType_Field::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StructType_Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StructType_Field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StructType_Field_descriptor_;
}

const StructType_Field& StructType_Field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brawl_2eproto();  return *default_instance_;
}

StructType_Field* StructType_Field::default_instance_ = NULL;

StructType_Field* StructType_Field::New() const {
  return new StructType_Field;
}

void StructType_Field::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    padding_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StructType_Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_padding;
        break;
      }
      
      // required uint32 padding = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_padding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &padding_)));
          set_has_padding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StructType_Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // required uint32 padding = 3;
  if (has_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->padding(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StructType_Field::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // required uint32 padding = 3;
  if (has_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->padding(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StructType_Field::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required uint32 padding = 3;
    if (has_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->padding());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StructType_Field::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StructType_Field* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StructType_Field*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StructType_Field::MergeFrom(const StructType_Field& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_padding()) {
      set_padding(from.padding());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StructType_Field::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StructType_Field::CopyFrom(const StructType_Field& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructType_Field::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void StructType_Field::Swap(StructType_Field* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(padding_, other->padding_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StructType_Field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StructType_Field_descriptor_;
  metadata.reflection = StructType_Field_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StructType::kAlignmentFieldNumber;
const int StructType::kSizeFieldNumber;
const int StructType::kFieldFieldNumber;
#endif  // !_MSC_VER

StructType::StructType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StructType::InitAsDefaultInstance() {
}

StructType::StructType(const StructType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StructType::SharedCtor() {
  _cached_size_ = 0;
  alignment_ = 0u;
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StructType::~StructType() {
  SharedDtor();
}

void StructType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StructType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StructType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StructType_descriptor_;
}

const StructType& StructType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brawl_2eproto();  return *default_instance_;
}

StructType* StructType::default_instance_ = NULL;

StructType* StructType::New() const {
  return new StructType;
}

void StructType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    alignment_ = 0u;
    size_ = 0u;
  }
  field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StructType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 alignment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alignment_)));
          set_has_alignment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }
      
      // required uint32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_field;
        break;
      }
      
      // repeated .Brawl.StructType.Field field = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_field;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StructType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 alignment = 1;
  if (has_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->alignment(), output);
  }
  
  // required uint32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }
  
  // repeated .Brawl.StructType.Field field = 3;
  for (int i = 0; i < this->field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->field(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StructType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 alignment = 1;
  if (has_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->alignment(), target);
  }
  
  // required uint32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }
  
  // repeated .Brawl.StructType.Field field = 3;
  for (int i = 0; i < this->field_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->field(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StructType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 alignment = 1;
    if (has_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alignment());
    }
    
    // required uint32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }
    
  }
  // repeated .Brawl.StructType.Field field = 3;
  total_size += 1 * this->field_size();
  for (int i = 0; i < this->field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StructType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StructType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StructType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StructType::MergeFrom(const StructType& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_.MergeFrom(from.field_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alignment()) {
      set_alignment(from.alignment());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StructType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StructType::CopyFrom(const StructType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < field_size(); i++) {
    if (!this->field(i).IsInitialized()) return false;
  }
  return true;
}

void StructType::Swap(StructType* other) {
  if (other != this) {
    std::swap(alignment_, other->alignment_);
    std::swap(size_, other->size_);
    field_.Swap(&other->field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StructType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StructType_descriptor_;
  metadata.reflection = StructType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FuncType::kArgFieldNumber;
const int FuncType::kResultFieldNumber;
const int FuncType::kVarargsFieldNumber;
#endif  // !_MSC_VER

FuncType::FuncType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FuncType::InitAsDefaultInstance() {
}

FuncType::FuncType(const FuncType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FuncType::SharedCtor() {
  _cached_size_ = 0;
  varargs_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FuncType::~FuncType() {
  SharedDtor();
}

void FuncType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FuncType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FuncType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FuncType_descriptor_;
}

const FuncType& FuncType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brawl_2eproto();  return *default_instance_;
}

FuncType* FuncType::default_instance_ = NULL;

FuncType* FuncType::New() const {
  return new FuncType;
}

void FuncType::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    varargs_ = false;
  }
  arg_.Clear();
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FuncType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 arg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_arg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_arg;
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // repeated int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_result())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_result())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        if (input->ExpectTag(24)) goto parse_varargs;
        break;
      }
      
      // required bool varargs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_varargs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &varargs_)));
          set_has_varargs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FuncType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 arg = 1;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->arg(i), output);
  }
  
  // repeated int32 result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->result(i), output);
  }
  
  // required bool varargs = 3;
  if (has_varargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->varargs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FuncType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 arg = 1;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->arg(i), target);
  }
  
  // repeated int32 result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->result(i), target);
  }
  
  // required bool varargs = 3;
  if (has_varargs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->varargs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FuncType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required bool varargs = 3;
    if (has_varargs()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int32 arg = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->arg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->arg(i));
    }
    total_size += 1 * this->arg_size() + data_size;
  }
  
  // repeated int32 result = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->result(i));
    }
    total_size += 1 * this->result_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FuncType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FuncType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FuncType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FuncType::MergeFrom(const FuncType& from) {
  GOOGLE_CHECK_NE(&from, this);
  arg_.MergeFrom(from.arg_);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_varargs()) {
      set_varargs(from.varargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FuncType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuncType::CopyFrom(const FuncType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuncType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void FuncType::Swap(FuncType* other) {
  if (other != this) {
    arg_.Swap(&other->arg_);
    result_.Swap(&other->result_);
    std::swap(varargs_, other->varargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FuncType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FuncType_descriptor_;
  metadata.reflection = FuncType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Decl::kDecltypeFieldNumber;
const int Decl::kNameFieldNumber;
const int Decl::kTypeFieldNumber;
const int Decl::kValuetypeFieldNumber;
const int Decl::kValueFieldNumber;
#endif  // !_MSC_VER

Decl::Decl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Decl::InitAsDefaultInstance() {
}

Decl::Decl(const Decl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Decl::SharedCtor() {
  _cached_size_ = 0;
  decltype_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  valuetype_ = 0u;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Decl::~Decl() {
  SharedDtor();
}

void Decl::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Decl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Decl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Decl_descriptor_;
}

const Decl& Decl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brawl_2eproto();  return *default_instance_;
}

Decl* Decl::default_instance_ = NULL;

Decl* Decl::New() const {
  return new Decl;
}

void Decl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    decltype_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    valuetype_ = 0u;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Decl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 decltype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decltype_)));
          set_has_decltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_valuetype;
        break;
      }
      
      // optional uint32 valuetype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valuetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valuetype_)));
          set_has_valuetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }
      
      // optional string value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Decl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 decltype = 1;
  if (has_decltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->decltype(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  // optional uint32 valuetype = 4;
  if (has_valuetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->valuetype(), output);
  }
  
  // optional string value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Decl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 decltype = 1;
  if (has_decltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->decltype(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  // optional uint32 valuetype = 4;
  if (has_valuetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->valuetype(), target);
  }
  
  // optional string value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Decl::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 decltype = 1;
    if (has_decltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decltype());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional uint32 valuetype = 4;
    if (has_valuetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valuetype());
    }
    
    // optional string value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Decl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Decl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Decl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Decl::MergeFrom(const Decl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_decltype()) {
      set_decltype(from.decltype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_valuetype()) {
      set_valuetype(from.valuetype());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Decl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decl::CopyFrom(const Decl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Decl::Swap(Decl* other) {
  if (other != this) {
    std::swap(decltype_, other->decltype_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(valuetype_, other->valuetype_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Decl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Decl_descriptor_;
  metadata.reflection = Decl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Module::kPrefixFieldNumber;
const int Module::kPackageFieldNumber;
#endif  // !_MSC_VER

Module::Module()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Module::InitAsDefaultInstance() {
}

Module::Module(const Module& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Module::SharedCtor() {
  _cached_size_ = 0;
  prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  package_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Module::~Module() {
  SharedDtor();
}

void Module::SharedDtor() {
  if (prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete prefix_;
  }
  if (package_ != &::google::protobuf::internal::kEmptyString) {
    delete package_;
  }
  if (this != default_instance_) {
  }
}

void Module::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Module::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Module_descriptor_;
}

const Module& Module::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brawl_2eproto();  return *default_instance_;
}

Module* Module::default_instance_ = NULL;

Module* Module::New() const {
  return new Module;
}

void Module::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_prefix()) {
      if (prefix_ != &::google::protobuf::internal::kEmptyString) {
        prefix_->clear();
      }
    }
    if (has_package()) {
      if (package_ != &::google::protobuf::internal::kEmptyString) {
        package_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Module::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string prefix = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_package;
        break;
      }
      
      // required string package = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->package().data(), this->package().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Module::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string prefix = 1;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->prefix(), output);
  }
  
  // required string package = 2;
  if (has_package()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->package(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Module::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string prefix = 1;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }
  
  // required string package = 2;
  if (has_package()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->package().data(), this->package().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->package(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Module::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string prefix = 1;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }
    
    // required string package = 2;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->package());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Module::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Module* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Module*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Module::MergeFrom(const Module& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prefix()) {
      set_prefix(from.prefix());
    }
    if (from.has_package()) {
      set_package(from.package());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Module::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Module::CopyFrom(const Module& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Module::Swap(Module* other) {
  if (other != this) {
    std::swap(prefix_, other->prefix_);
    std::swap(package_, other->package_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Module::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Module_descriptor_;
  metadata.reflection = Module_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CModuleCache_Entry::kFilenameFieldNumber;
const int CModuleCache_Entry::kMtimeFieldNumber;
#endif  // !_MSC_VER

CModuleCache_Entry::CModuleCache_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CModuleCache_Entry::InitAsDefaultInstance() {
}

CModuleCache_Entry::CModuleCache_Entry(const CModuleCache_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CModuleCache_Entry::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CModuleCache_Entry::~CModuleCache_Entry() {
  SharedDtor();
}

void CModuleCache_Entry::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void CModuleCache_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CModuleCache_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CModuleCache_Entry_descriptor_;
}

const CModuleCache_Entry& CModuleCache_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brawl_2eproto();  return *default_instance_;
}

CModuleCache_Entry* CModuleCache_Entry::default_instance_ = NULL;

CModuleCache_Entry* CModuleCache_Entry::New() const {
  return new CModuleCache_Entry;
}

void CModuleCache_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    mtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CModuleCache_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mtime;
        break;
      }
      
      // required uint64 mtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CModuleCache_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }
  
  // required uint64 mtime = 2;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CModuleCache_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }
  
  // required uint64 mtime = 2;
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CModuleCache_Entry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
    // required uint64 mtime = 2;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CModuleCache_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CModuleCache_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CModuleCache_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CModuleCache_Entry::MergeFrom(const CModuleCache_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CModuleCache_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CModuleCache_Entry::CopyFrom(const CModuleCache_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CModuleCache_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CModuleCache_Entry::Swap(CModuleCache_Entry* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(mtime_, other->mtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CModuleCache_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CModuleCache_Entry_descriptor_;
  metadata.reflection = CModuleCache_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CModuleCache::kHeaderFieldNumber;
const int CModuleCache::kEntryFieldNumber;
#endif  // !_MSC_VER

CModuleCache::CModuleCache()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CModuleCache::InitAsDefaultInstance() {
}

CModuleCache::CModuleCache(const CModuleCache& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CModuleCache::SharedCtor() {
  _cached_size_ = 0;
  header_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CModuleCache::~CModuleCache() {
  SharedDtor();
}

void CModuleCache::SharedDtor() {
  if (header_ != &::google::protobuf::internal::kEmptyString) {
    delete header_;
  }
  if (this != default_instance_) {
  }
}

void CModuleCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CModuleCache::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CModuleCache_descriptor_;
}

const CModuleCache& CModuleCache::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brawl_2eproto();  return *default_instance_;
}

CModuleCache* CModuleCache::default_instance_ = NULL;

CModuleCache* CModuleCache::New() const {
  return new CModuleCache;
}

void CModuleCache::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != &::google::protobuf::internal::kEmptyString) {
        header_->clear();
      }
    }
  }
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CModuleCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->header().data(), this->header().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entry;
        break;
      }
      
      // repeated .Brawl.CModuleCache.Entry entry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CModuleCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->header(), output);
  }
  
  // repeated .Brawl.CModuleCache.Entry entry = 2;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entry(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CModuleCache::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->header(), target);
  }
  
  // repeated .Brawl.CModuleCache.Entry entry = 2;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entry(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CModuleCache::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->header());
    }
    
  }
  // repeated .Brawl.CModuleCache.Entry entry = 2;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CModuleCache::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CModuleCache* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CModuleCache*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CModuleCache::MergeFrom(const CModuleCache& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      set_header(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CModuleCache::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CModuleCache::CopyFrom(const CModuleCache& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CModuleCache::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < entry_size(); i++) {
    if (!this->entry(i).IsInitialized()) return false;
  }
  return true;
}

void CModuleCache::Swap(CModuleCache* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CModuleCache::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CModuleCache_descriptor_;
  metadata.reflection = CModuleCache_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Brawl

// @@protoc_insertion_point(global_scope)
