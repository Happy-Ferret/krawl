/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 10 "parser.y"

	#include "krawl.hpp"
	#include <stdlib.h>
	#include <stdio.h>
	#include <assert.h>
#line 14 "parser.c"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 115
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE  token_t* 
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  node_vector_t* yy6;
  basic_lit_expr_t* yy18;
  import_spec_vector_t* yy69;
  ident_expr_t* yy76;
  field_vector_t* yy84;
  nametype_t yy115;
  value_spec_vector_t* yy123;
  type_spec_t* yy126;
  nametype_vector_t* yy135;
  ident_expr_vector_t* yy154;
  block_stmt_t* yy156;
  field_t* yy158;
  value_spec_t* yy177;
  node_t* yy184;
  bool yy185;
  type_spec_vector_t* yy192;
  switch_stmt_case_t* yy194;
  import_spec_t* yy203;
  program_t* yy218;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL  parser_t *ctx ;
#define ParseARG_PDECL , parser_t *ctx 
#define ParseARG_FETCH  parser_t *ctx  = yypParser->ctx 
#define ParseARG_STORE yypParser->ctx  = ctx 
#define YYNSTATE 369
#define YYNRULE 191
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */    86,   87,  276,   91,  216,   90,  285,  280,  149,   89,
 /*    10 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*    20 */    18,   19,   20,  301,  214,  267,   98,  352,  353,  354,
 /*    30 */    21,   83,  276,   26,   84,    1,  366,  300,  205,  310,
 /*    40 */   127,   41,  111,  130,  106,  107,  142,  276,  298,  216,
 /*    50 */   356,  322,  280,   82,  268,  132,  296,  297,  299,   88,
 /*    60 */    60,   59,   53,   54,   55,   56,   57,   58,   49,   50,
 /*    70 */    51,   52,   40,   42,   44,   45,   46,   47,   48,  372,
 /*    80 */   257,   86,   87,  359,   91,  216,   90,  262,  340,  109,
 /*    90 */    89,  238,  283,  347,  348,   40,   42,   44,   45,   46,
 /*   100 */    47,   48,  282,  372,  372,  372,  263,  372,  352,  353,
 /*   110 */   354,   21,   83,  361,   26,   84,    1,   99,  265,  301,
 /*   120 */   126,  127,   41,  276,  130,  106,  107,  142,  276,  298,
 /*   130 */   128,  364,  269,  300,  205,  304,  212,  296,  297,  299,
 /*   140 */    88,   60,   59,   53,   54,   55,   56,   57,   58,   49,
 /*   150 */    50,   51,   52,   40,   42,   44,   45,   46,   47,   48,
 /*   160 */   372,   49,   50,   51,   52,   40,   42,   44,   45,   46,
 /*   170 */    47,   48,  336,  133,  347,  348,  127,  129,  213,  130,
 /*   180 */   106,  107,  142,  112,    1,  134,   60,   59,   53,   54,
 /*   190 */    55,   56,   57,   58,   49,   50,   51,   52,   40,   42,
 /*   200 */    44,   45,   46,   47,   48,   60,   59,   53,   54,   55,
 /*   210 */    56,   57,   58,   49,   50,   51,   52,   40,   42,   44,
 /*   220 */    45,   46,   47,   48,  221,  276,   30,   38,  260,    1,
 /*   230 */   217,  219,  288,  109,  222,  204,  283,  337,  294,  341,
 /*   240 */   110,  136,  289,  122,  103,  215,  284,  291,  121,  111,
 /*   250 */    60,   59,   53,   54,   55,   56,   57,   58,   49,   50,
 /*   260 */    51,   52,   40,   42,   44,   45,   46,   47,   48,   60,
 /*   270 */    59,   53,   54,   55,   56,   57,   58,   49,   50,   51,
 /*   280 */    52,   40,   42,   44,   45,   46,   47,   48,   60,   59,
 /*   290 */    53,   54,   55,   56,   57,   58,   49,   50,   51,   52,
 /*   300 */    40,   42,   44,   45,   46,   47,   48,  109,  113,  216,
 /*   310 */   283,  223,  279,  271,  216,  224,  143,  280,  275,  302,
 /*   320 */   284,   60,   59,   53,   54,   55,   56,   57,   58,   49,
 /*   330 */    50,   51,   52,   40,   42,   44,   45,   46,   47,   48,
 /*   340 */   342,  140,  341,  101,  286,   97,  303,  103,   60,   59,
 /*   350 */    53,   54,   55,   56,   57,   58,   49,   50,   51,   52,
 /*   360 */    40,   42,   44,   45,   46,   47,   48,  360,   30,  216,
 /*   370 */   260,  182,  292,   60,   59,   53,   54,   55,   56,   57,
 /*   380 */    58,   49,   50,   51,   52,   40,   42,   44,   45,   46,
 /*   390 */    47,   48,  109,  232,  293,  283,  342,  141,  341,  216,
 /*   400 */   136,  289,  272,  103,  216,  284,  183,  273,   81,   80,
 /*   410 */    74,   75,   76,   77,   78,   79,   70,   71,   72,   73,
 /*   420 */    63,   64,   65,   66,   67,   68,   69,  216,  295,  216,
 /*   430 */   274,  116,  225,  489,  489,  489,  489,  489,  489,  489,
 /*   440 */   489,   49,   50,   51,   52,   40,   42,   44,   45,   46,
 /*   450 */    47,   48,  490,  490,  490,  490,  490,  490,  490,  490,
 /*   460 */    49,   50,   51,   52,   40,   42,   44,   45,   46,   47,
 /*   470 */    48,  491,  491,  491,  491,  491,  491,  491,  491,   49,
 /*   480 */    50,   51,   52,   40,   42,   44,   45,   46,   47,   48,
 /*   490 */   492,  492,  492,  492,  492,  492,  492,  492,   49,   50,
 /*   500 */    51,   52,   40,   42,   44,   45,   46,   47,   48,  493,
 /*   510 */   493,  493,  493,  493,  493,  493,  493,   49,   50,   51,
 /*   520 */    52,   40,   42,   44,   45,   46,   47,   48,  494,  494,
 /*   530 */   494,  494,  494,  494,  494,  494,   49,   50,   51,   52,
 /*   540 */    40,   42,   44,   45,   46,   47,   48,  495,  495,   53,
 /*   550 */    54,   55,   56,   57,   58,   49,   50,   51,   52,   40,
 /*   560 */    42,   44,   45,   46,   47,   48,  496,   59,   53,   54,
 /*   570 */    55,   56,   57,   58,   49,   50,   51,   52,   40,   42,
 /*   580 */    44,   45,   46,   47,   48,   60,   59,   53,   54,   55,
 /*   590 */    56,   57,   58,   49,   50,   51,   52,   40,   42,   44,
 /*   600 */    45,   46,   47,   48,   92,   93,  233,   96,  216,   28,
 /*   610 */   108,  226,  154,   95,   25,  144,  345,  349,  148,  173,
 /*   620 */   181,  350,  351,   92,   93,  114,   96,  301,   28,  237,
 /*   630 */   240,  316,   95,  301,  180,  206,  308,  323,  324,    6,
 /*   640 */   241,  300,  205,  310,    1,   61,  331,  300,  205,  310,
 /*   650 */   231,  276,  298,   39,  187,   22,  227,  229,    6,  367,
 /*   660 */   296,  297,  299,   94,   61,  186,  343,   24,  341,  231,
 /*   670 */   276,  298,   39,  103,  216,  227,  229,  318,  261,  296,
 /*   680 */   297,  299,   94,   59,   53,   54,   55,   56,   57,   58,
 /*   690 */    49,   50,   51,   52,   40,   42,   44,   45,   46,   47,
 /*   700 */    48,   92,   93,    4,   96,  339,   28,  341,  357,  362,
 /*   710 */    95,   43,  103,  207,   53,   54,   55,   56,   57,   58,
 /*   720 */    49,   50,   51,   52,   40,   42,   44,   45,   46,   47,
 /*   730 */    48,  216,   92,   93,  319,   96,    6,   28,  363,  120,
 /*   740 */   369,   95,   61,  561,  131,  214,  267,  231,  276,  298,
 /*   750 */    39,  525,  368,  227,  229,  115,  266,  296,  297,  299,
 /*   760 */    94,  184,  135,  332,   40,   42,   44,   45,   46,   47,
 /*   770 */    48,  525,  264,   61,  109,  242,   24,  283,  231,  276,
 /*   780 */   298,   39,  136,  289,  227,  229,  270,  284,  296,  297,
 /*   790 */   299,   94,  526,   34,   35,  525,  525,  525,  216,  525,
 /*   800 */   277,  236,  525,  527,  278,   40,   42,   44,   45,   46,
 /*   810 */    47,   48,  526,  528,   31,  525,   40,   42,   44,   45,
 /*   820 */    46,   47,   48,  527,  100,   36,   40,   42,   44,   45,
 /*   830 */    46,   47,   48,  528,  281,  105,  526,  526,  526,  317,
 /*   840 */   526,   86,   87,  526,   91,    2,   90,  527,  527,  527,
 /*   850 */    89,  527,  216,  185,  527,  335,  526,  528,  528,  528,
 /*   860 */   320,  528,   82,   37,  528,  301,  321,  527,   32,   86,
 /*   870 */    87,  301,   91,  102,   90,  234,    1,  528,   89,  300,
 /*   880 */   205,  305,   41,  235,  118,  300,  205,  306,  276,  298,
 /*   890 */   346,  349,  148,  173,  326,  350,  351,  296,  297,  299,
 /*   900 */    88,  204,  338,    7,  294,   24,  110,  301,  218,  344,
 /*   910 */    41,   33,  137,  290,  104,   23,  276,  298,   29,  119,
 /*   920 */    27,  300,  205,  310,  155,  296,  297,  299,   88,   86,
 /*   930 */    87,    3,   91,  365,   90,  562,    5,  562,   89,  181,
 /*   940 */   562,  562,   86,   87,   62,   91,  208,   90,  562,  562,
 /*   950 */   562,   89,  562,  180,  206,  310,  323,  325,  327,  328,
 /*   960 */   562,  329,  146,  345,  349,  148,  173,  562,  350,  351,
 /*   970 */    41,  562,  441,  562,  562,  562,  276,  298,  562,  117,
 /*   980 */   301,  562,  562,   41,  562,  296,  297,  299,   88,  276,
 /*   990 */   298,  562,  562,  562,  300,  205,  310,  441,  296,  297,
 /*  1000 */   299,   88,  147,  345,  349,  148,  173,  562,  350,  351,
 /*  1010 */   562,  155,  135,  210,  562,  562,  562,  301,  204,  112,
 /*  1020 */   301,  294,  155,  110,  209,  220,  181,  562,  562,  137,
 /*  1030 */   290,  300,  205,  307,  300,  205,  310,  181,  562,  562,
 /*  1040 */   180,  206,  310,  323,  325,  327,  328,  155,  330,  139,
 /*  1050 */   562,  180,  206,  310,  323,  325,  327,  328,  562,  330,
 /*  1060 */   221,  276,  181,   38,  562,  562,  217,  219,  287,  562,
 /*  1070 */   562,  155,  562,  239,  562,  562,  180,  206,  310,  323,
 /*  1080 */   325,  327,  328,  155,  330,  243,  181,  562,  562,  562,
 /*  1090 */   562,  112,  562,  562,  562,  334,  562,  562,  181,  562,
 /*  1100 */   180,  206,  310,  323,  325,  327,  328,  562,  330,  562,
 /*  1110 */   301,  562,  180,  206,  310,  323,  325,  327,  328,  155,
 /*  1120 */   330,  244,  499,  562,  300,  205,  310,   85,  155,  562,
 /*  1130 */   245,  562,  221,  276,  181,   38,  562,  562,  217,  219,
 /*  1140 */   562,  562,  499,  181,  562,  562,  562,  112,  180,  206,
 /*  1150 */   310,  323,  325,  327,  328,  562,  330,  180,  206,  310,
 /*  1160 */   323,  325,  327,  328,  562,  330,  499,  499,  499,  204,
 /*  1170 */   499,  562,  294,  499,  110,  155,  228,  246,  562,  562,
 /*  1180 */   137,  290,  562,  562,  562,  155,  499,  247,  221,  276,
 /*  1190 */   181,   38,  562,  562,  217,  219,  155,  138,  248,  562,
 /*  1200 */   181,  562,  562,  562,  180,  206,  310,  323,  325,  327,
 /*  1210 */   328,  181,  330,  562,  180,  206,  310,  323,  325,  327,
 /*  1220 */   328,  562,  330,  562,  562,  180,  206,  310,  323,  325,
 /*  1230 */   327,  328,  562,  330,  155,  500,  249,  562,  562,  562,
 /*  1240 */   562,  562,  301,  562,  562,  301,  145,  148,  173,  181,
 /*  1250 */   562,  562,  562,  562,  562,  500,  300,  205,  308,  300,
 /*  1260 */   205,  309,  301,  180,  206,  310,  323,  325,  327,  328,
 /*  1270 */   562,  330,  562,  155,  562,  250,  300,  205,  310,  500,
 /*  1280 */   500,  500,  155,  500,  251,  562,  500,  562,  181,  562,
 /*  1290 */   562,  112,  562,  562,  155,  562,  252,  181,  562,  500,
 /*  1300 */   501,  562,  180,  206,  310,  323,  325,  327,  328,  181,
 /*  1310 */   330,  180,  206,  310,  323,  325,  327,  328,  562,  330,
 /*  1320 */   501,  562,  562,  180,  206,  310,  323,  325,  327,  328,
 /*  1330 */   562,  330,  221,  276,  562,   38,  562,  135,  217,  219,
 /*  1340 */   155,  562,  253,  562,  501,  501,  501,  562,  501,  562,
 /*  1350 */   155,  501,  254,  562,  562,  181,  562,  562,  562,  562,
 /*  1360 */   562,  155,  562,  255,  501,  181,  112,  562,  562,  180,
 /*  1370 */   206,  310,  323,  325,  327,  328,  181,  330,  562,  180,
 /*  1380 */   206,  310,  323,  325,  327,  328,  155,  330,  256,  301,
 /*  1390 */   180,  206,  310,  323,  325,  327,  328,  562,  330,  562,
 /*  1400 */   562,  181,  502,  300,  205,  188,  562,  221,  276,  562,
 /*  1410 */    38,  562,  562,  217,  219,  180,  206,  310,  323,  325,
 /*  1420 */   327,  328,  502,  330,  562,  355,  349,  148,  173,  503,
 /*  1430 */   350,  351,  562,  562,  562,  562,  562,  562,  562,  258,
 /*  1440 */   123,  173,  301,  504,  358,  562,  502,  502,  502,  503,
 /*  1450 */   502,  562,  562,  502,  562,  301,  300,  205,  310,  562,
 /*  1460 */   562,  562,  562,  504,  505,  562,  502,  166,  211,  300,
 /*  1470 */   205,  310,  506,  503,  503,  503,  562,  503,  562,  562,
 /*  1480 */   503,  511,  301,  562,  505,  562,  562,  504,  504,  504,
 /*  1490 */   301,  504,  506,  503,  504,  562,  300,  205,  310,  562,
 /*  1500 */   562,  511,  512,  562,  300,  205,  189,  504,  505,  505,
 /*  1510 */   505,  513,  505,  562,  562,  505,  506,  506,  506,  514,
 /*  1520 */   506,  562,  512,  506,  562,  511,  511,  511,  505,  511,
 /*  1530 */   562,  513,  511,  562,  562,  562,  506,  562,  562,  514,
 /*  1540 */   516,  562,  562,  150,  562,  511,  512,  512,  512,  518,
 /*  1550 */   512,  562,  562,  512,  562,  513,  513,  513,  301,  513,
 /*  1560 */   516,  519,  513,  514,  514,  514,  512,  514,  562,  518,
 /*  1570 */   514,  562,  300,  205,  310,  513,  520,  562,  562,  562,
 /*  1580 */   562,  519,  562,  514,  516,  516,  516,  562,  516,  562,
 /*  1590 */   562,  516,  562,  518,  518,  518,  520,  518,  521,  562,
 /*  1600 */   518,  562,  333,  562,  516,  519,  519,  519,  522,  519,
 /*  1610 */   562,  562,  519,  518,  562,  562,  562,  301,  521,  523,
 /*  1620 */   520,  520,  520,  562,  520,  519,  562,  520,  522,  562,
 /*  1630 */   562,  300,  205,  310,  562,  562,  562,  562,  562,  523,
 /*  1640 */   520,  524,  521,  521,  521,  562,  521,  562,  562,  521,
 /*  1650 */   562,  151,  522,  522,  522,  562,  522,  562,  562,  522,
 /*  1660 */   562,  524,  521,  523,  523,  523,  301,  523,  562,  562,
 /*  1670 */   523,  562,  522,  165,  562,  562,  562,  562,  259,  311,
 /*  1680 */   300,  205,  310,  523,  562,  524,  524,  524,  301,  524,
 /*  1690 */   562,  562,  524,  562,  301,  562,  562,  312,  562,  562,
 /*  1700 */   562,  562,  300,  205,  310,  524,  562,  562,  300,  205,
 /*  1710 */   310,  204,  301,  562,  294,  562,  110,  301,  230,  313,
 /*  1720 */   562,  562,  137,  290,  562,  562,  300,  205,  310,  314,
 /*  1730 */   562,  300,  205,  190,  301,  562,  315,  562,  562,  200,
 /*  1740 */   562,  562,  201,  562,  301,  562,  562,  202,  300,  205,
 /*  1750 */   310,  301,  562,  562,  301,  562,  562,  301,  300,  205,
 /*  1760 */   310,  562,  301,  562,  203,  300,  205,  310,  300,  205,
 /*  1770 */   310,  300,  205,  310,  174,  562,  300,  205,  310,  301,
 /*  1780 */   562,  175,  562,  562,  562,  176,  562,  562,  562,  301,
 /*  1790 */   562,  177,  562,  300,  205,  310,  301,  562,  562,  562,
 /*  1800 */   301,  562,  562,  300,  205,  310,  301,  562,  562,  562,
 /*  1810 */   300,  205,  310,  178,  300,  205,  310,  562,  562,  179,
 /*  1820 */   300,  205,  310,  562,  168,  562,  562,  562,  301,  562,
 /*  1830 */   562,  167,  562,  562,  301,  562,  152,  562,  562,  301,
 /*  1840 */   562,  153,  300,  205,  310,  562,  301,  562,  300,  205,
 /*  1850 */   310,  301,  562,  300,  205,  310,  301,  562,  193,  562,
 /*  1860 */   300,  205,  310,  562,  562,  300,  205,  310,  194,  562,
 /*  1870 */   300,  205,  310,  301,  562,  562,  562,  195,  562,  562,
 /*  1880 */   196,  562,  562,  301,  562,  562,  562,  300,  205,  310,
 /*  1890 */   197,  562,  301,  562,  562,  301,  562,  300,  205,  310,
 /*  1900 */   562,  198,  562,  562,  562,  301,  300,  205,  310,  300,
 /*  1910 */   205,  310,  562,  199,  562,  562,  301,  562,  169,  300,
 /*  1920 */   205,  310,  562,  170,  562,  562,  171,  562,  301,  562,
 /*  1930 */   300,  205,  310,  301,  562,  172,  562,  562,  301,  562,
 /*  1940 */   562,  301,  300,  205,  310,  156,  562,  300,  205,  310,
 /*  1950 */   301,  562,  300,  205,  310,  300,  205,  310,  562,  562,
 /*  1960 */   301,  562,  562,  562,  300,  205,  310,  157,  562,  562,
 /*  1970 */   562,  562,  158,  562,  300,  205,  310,  562,  159,  562,
 /*  1980 */   562,  562,  301,  562,  160,  562,  562,  301,  562,  562,
 /*  1990 */   161,  562,  562,  301,  562,  162,  300,  205,  310,  301,
 /*  2000 */   562,  300,  205,  310,  562,  301,  562,  300,  205,  310,
 /*  2010 */   301,  562,  163,  300,  205,  310,  562,  562,  164,  300,
 /*  2020 */   205,  310,  124,  562,  300,  205,  310,  301,  562,  125,
 /*  2030 */   562,  562,  562,  301,  562,  562,  562,  301,  562,  562,
 /*  2040 */   301,  300,  205,  310,  301,  562,  562,  300,  205,  310,
 /*  2050 */   562,  300,  205,  310,  300,  205,  191,  301,  300,  205,
 /*  2060 */   310,  562,  562,  562,  562,  562,  562,  562,  562,  562,
 /*  2070 */   562,  300,  205,  192,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     9,   10,   56,   12,   91,   14,   93,   94,   76,   18,
 /*    10 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
 /*    20 */    31,   32,   33,   91,   56,   57,   50,   36,   37,   38,
 /*    30 */    39,   40,   56,   42,   43,   44,   45,  105,  106,  107,
 /*    40 */    49,   50,   56,   52,   53,   54,   55,   56,   57,   91,
 /*    50 */    80,   93,   94,   64,   85,   86,   65,   66,   67,   68,
 /*    60 */     1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
 /*    70 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*    80 */    80,    9,   10,   82,   12,   91,   14,   79,   94,   91,
 /*    90 */    18,   97,   94,   34,   35,   13,   14,   15,   16,   17,
 /*   100 */    18,   19,  104,   44,   45,   46,   85,   48,   36,   37,
 /*   110 */    38,   39,   40,   84,   42,   43,   44,   50,   85,   91,
 /*   120 */    20,   49,   50,   56,   52,   53,   54,   55,   56,   57,
 /*   130 */    83,   84,   87,  105,  106,  107,   72,   65,   66,   67,
 /*   140 */    68,    1,    2,    3,    4,    5,    6,    7,    8,    9,
 /*   150 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   160 */    20,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   170 */    18,   19,   87,   88,   34,   35,   49,   20,   72,   52,
 /*   180 */    53,   54,   55,   14,   44,   20,    1,    2,    3,    4,
 /*   190 */     5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   200 */    15,   16,   17,   18,   19,    1,    2,    3,    4,    5,
 /*   210 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   220 */    16,   17,   18,   19,   55,   56,   46,   58,   48,   44,
 /*   230 */    61,   62,   63,   91,   92,   91,   94,   89,   94,   91,
 /*   240 */    96,   99,  100,   50,   96,   72,  104,  103,   44,   56,
 /*   250 */     1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
 /*   260 */    11,   12,   13,   14,   15,   16,   17,   18,   19,    1,
 /*   270 */     2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
 /*   280 */    12,   13,   14,   15,   16,   17,   18,   19,    1,    2,
 /*   290 */     3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
 /*   300 */    13,   14,   15,   16,   17,   18,   19,   91,   59,   91,
 /*   310 */    94,   95,   94,   87,   91,   99,   93,   94,   91,   51,
 /*   320 */   104,    1,    2,    3,    4,    5,    6,    7,    8,    9,
 /*   330 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   340 */    89,   90,   91,   64,  101,   20,   59,   96,    1,    2,
 /*   350 */     3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
 /*   360 */    13,   14,   15,   16,   17,   18,   19,   45,   46,   91,
 /*   370 */    48,   51,   94,    1,    2,    3,    4,    5,    6,    7,
 /*   380 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   390 */    18,   19,   91,   92,   91,   94,   89,   90,   91,   91,
 /*   400 */    99,  100,   94,   96,   91,  104,   59,   94,    1,    2,
 /*   410 */     3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
 /*   420 */    13,   14,   15,   16,   17,   18,   19,   91,   72,   91,
 /*   430 */    94,   59,   94,    1,    2,    3,    4,    5,    6,    7,
 /*   440 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   450 */    18,   19,    1,    2,    3,    4,    5,    6,    7,    8,
 /*   460 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   470 */    19,    1,    2,    3,    4,    5,    6,    7,    8,    9,
 /*   480 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   490 */     1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
 /*   500 */    11,   12,   13,   14,   15,   16,   17,   18,   19,    1,
 /*   510 */     2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
 /*   520 */    12,   13,   14,   15,   16,   17,   18,   19,    1,    2,
 /*   530 */     3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
 /*   540 */    13,   14,   15,   16,   17,   18,   19,    1,    2,    3,
 /*   550 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   560 */    14,   15,   16,   17,   18,   19,    1,    2,    3,    4,
 /*   570 */     5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   580 */    15,   16,   17,   18,   19,    1,    2,    3,    4,    5,
 /*   590 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   600 */    16,   17,   18,   19,    9,   10,  112,   12,   91,   14,
 /*   610 */    20,   94,   76,   18,   64,   73,   74,   75,   76,   77,
 /*   620 */    91,   79,   80,    9,   10,   50,   12,   91,   14,   72,
 /*   630 */    72,   56,   18,   91,  105,  106,  107,  108,  109,   44,
 /*   640 */    91,  105,  106,  107,   44,   50,   51,  105,  106,  107,
 /*   650 */    55,   56,   57,   58,   51,   20,   61,   62,   44,   80,
 /*   660 */    65,   66,   67,   68,   50,   51,   89,   64,   91,   55,
 /*   670 */    56,   57,   58,   96,   91,   61,   62,   94,   72,   65,
 /*   680 */    66,   67,   68,    2,    3,    4,    5,    6,    7,    8,
 /*   690 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   700 */    19,    9,   10,   50,   12,   89,   14,   91,   80,   72,
 /*   710 */    18,   58,   96,   60,    3,    4,    5,    6,    7,    8,
 /*   720 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   730 */    19,   91,    9,   10,   94,   12,   44,   14,   72,   50,
 /*   740 */     0,   18,   50,   70,   71,   56,   57,   55,   56,   57,
 /*   750 */    58,    0,   79,   61,   62,   50,   57,   65,   66,   67,
 /*   760 */    68,   56,   60,   51,   13,   14,   15,   16,   17,   18,
 /*   770 */    19,   20,   51,   50,   91,   92,   64,   94,   55,   56,
 /*   780 */    57,   58,   99,  100,   61,   62,   51,  104,   65,   66,
 /*   790 */    67,   68,    0,   44,   44,   44,   45,   46,   91,   48,
 /*   800 */    45,   94,   51,    0,   45,   13,   14,   15,   16,   17,
 /*   810 */    18,   19,   20,    0,   50,   64,   13,   14,   15,   16,
 /*   820 */    17,   18,   19,   20,   51,   44,   13,   14,   15,   16,
 /*   830 */    17,   18,   19,   20,   51,   64,   44,   45,   46,   51,
 /*   840 */    48,    9,   10,   51,   12,   47,   14,   44,   45,   46,
 /*   850 */    18,   48,   91,   51,   51,   94,   64,   44,   45,   46,
 /*   860 */    45,   48,   64,   44,   51,   91,   45,   64,   50,    9,
 /*   870 */    10,   91,   12,   51,   14,   45,   44,   64,   18,  105,
 /*   880 */   106,  107,   50,   60,   50,  105,  106,  107,   56,   57,
 /*   890 */    74,   75,   76,   77,   51,   79,   80,   65,   66,   67,
 /*   900 */    68,   91,   51,   21,   94,   64,   96,   91,   98,   51,
 /*   910 */    50,   50,  102,  103,   51,   41,   56,   57,   20,   59,
 /*   920 */    20,  105,  106,  107,   76,   65,   66,   67,   68,    9,
 /*   930 */    10,   47,   12,   45,   14,  114,   50,  114,   18,   91,
 /*   940 */   114,  114,    9,   10,   58,   12,   60,   14,  114,  114,
 /*   950 */   114,   18,  114,  105,  106,  107,  108,  109,  110,  111,
 /*   960 */   114,  113,   73,   74,   75,   76,   77,  114,   79,   80,
 /*   970 */    50,  114,   20,  114,  114,  114,   56,   57,  114,   59,
 /*   980 */    91,  114,  114,   50,  114,   65,   66,   67,   68,   56,
 /*   990 */    57,  114,  114,  114,  105,  106,  107,   45,   65,   66,
 /*  1000 */    67,   68,   73,   74,   75,   76,   77,  114,   79,   80,
 /*  1010 */   114,   76,   60,   78,  114,  114,  114,   91,   91,   14,
 /*  1020 */    91,   94,   76,   96,   78,   98,   91,  114,  114,  102,
 /*  1030 */   103,  105,  106,  107,  105,  106,  107,   91,  114,  114,
 /*  1040 */   105,  106,  107,  108,  109,  110,  111,   76,  113,   78,
 /*  1050 */   114,  105,  106,  107,  108,  109,  110,  111,  114,  113,
 /*  1060 */    55,   56,   91,   58,  114,  114,   61,   62,   63,  114,
 /*  1070 */   114,   76,  114,   78,  114,  114,  105,  106,  107,  108,
 /*  1080 */   109,  110,  111,   76,  113,   78,   91,  114,  114,  114,
 /*  1090 */   114,   14,  114,  114,  114,   76,  114,  114,   91,  114,
 /*  1100 */   105,  106,  107,  108,  109,  110,  111,  114,  113,  114,
 /*  1110 */    91,  114,  105,  106,  107,  108,  109,  110,  111,   76,
 /*  1120 */   113,   78,    0,  114,  105,  106,  107,   50,   76,  114,
 /*  1130 */    78,  114,   55,   56,   91,   58,  114,  114,   61,   62,
 /*  1140 */   114,  114,   20,   91,  114,  114,  114,   14,  105,  106,
 /*  1150 */   107,  108,  109,  110,  111,  114,  113,  105,  106,  107,
 /*  1160 */   108,  109,  110,  111,  114,  113,   44,   45,   46,   91,
 /*  1170 */    48,  114,   94,   51,   96,   76,   98,   78,  114,  114,
 /*  1180 */   102,  103,  114,  114,  114,   76,   64,   78,   55,   56,
 /*  1190 */    91,   58,  114,  114,   61,   62,   76,   64,   78,  114,
 /*  1200 */    91,  114,  114,  114,  105,  106,  107,  108,  109,  110,
 /*  1210 */   111,   91,  113,  114,  105,  106,  107,  108,  109,  110,
 /*  1220 */   111,  114,  113,  114,  114,  105,  106,  107,  108,  109,
 /*  1230 */   110,  111,  114,  113,   76,    0,   78,  114,  114,  114,
 /*  1240 */   114,  114,   91,  114,  114,   91,   75,   76,   77,   91,
 /*  1250 */   114,  114,  114,  114,  114,   20,  105,  106,  107,  105,
 /*  1260 */   106,  107,   91,  105,  106,  107,  108,  109,  110,  111,
 /*  1270 */   114,  113,  114,   76,  114,   78,  105,  106,  107,   44,
 /*  1280 */    45,   46,   76,   48,   78,  114,   51,  114,   91,  114,
 /*  1290 */   114,   14,  114,  114,   76,  114,   78,   91,  114,   64,
 /*  1300 */     0,  114,  105,  106,  107,  108,  109,  110,  111,   91,
 /*  1310 */   113,  105,  106,  107,  108,  109,  110,  111,  114,  113,
 /*  1320 */    20,  114,  114,  105,  106,  107,  108,  109,  110,  111,
 /*  1330 */   114,  113,   55,   56,  114,   58,  114,   60,   61,   62,
 /*  1340 */    76,  114,   78,  114,   44,   45,   46,  114,   48,  114,
 /*  1350 */    76,   51,   78,  114,  114,   91,  114,  114,  114,  114,
 /*  1360 */   114,   76,  114,   78,   64,   91,   14,  114,  114,  105,
 /*  1370 */   106,  107,  108,  109,  110,  111,   91,  113,  114,  105,
 /*  1380 */   106,  107,  108,  109,  110,  111,   76,  113,   78,   91,
 /*  1390 */   105,  106,  107,  108,  109,  110,  111,  114,  113,  114,
 /*  1400 */   114,   91,    0,  105,  106,  107,  114,   55,   56,  114,
 /*  1410 */    58,  114,  114,   61,   62,  105,  106,  107,  108,  109,
 /*  1420 */   110,  111,   20,  113,  114,   74,   75,   76,   77,    0,
 /*  1430 */    79,   80,  114,  114,  114,  114,  114,  114,  114,   75,
 /*  1440 */    76,   77,   91,    0,   80,  114,   44,   45,   46,   20,
 /*  1450 */    48,  114,  114,   51,  114,   91,  105,  106,  107,  114,
 /*  1460 */   114,  114,  114,   20,    0,  114,   64,   76,   77,  105,
 /*  1470 */   106,  107,    0,   44,   45,   46,  114,   48,  114,  114,
 /*  1480 */    51,    0,   91,  114,   20,  114,  114,   44,   45,   46,
 /*  1490 */    91,   48,   20,   64,   51,  114,  105,  106,  107,  114,
 /*  1500 */   114,   20,    0,  114,  105,  106,  107,   64,   44,   45,
 /*  1510 */    46,    0,   48,  114,  114,   51,   44,   45,   46,    0,
 /*  1520 */    48,  114,   20,   51,  114,   44,   45,   46,   64,   48,
 /*  1530 */   114,   20,   51,  114,  114,  114,   64,  114,  114,   20,
 /*  1540 */     0,  114,  114,   76,  114,   64,   44,   45,   46,    0,
 /*  1550 */    48,  114,  114,   51,  114,   44,   45,   46,   91,   48,
 /*  1560 */    20,    0,   51,   44,   45,   46,   64,   48,  114,   20,
 /*  1570 */    51,  114,  105,  106,  107,   64,    0,  114,  114,  114,
 /*  1580 */   114,   20,  114,   64,   44,   45,   46,  114,   48,  114,
 /*  1590 */   114,   51,  114,   44,   45,   46,   20,   48,    0,  114,
 /*  1600 */    51,  114,   76,  114,   64,   44,   45,   46,    0,   48,
 /*  1610 */   114,  114,   51,   64,  114,  114,  114,   91,   20,    0,
 /*  1620 */    44,   45,   46,  114,   48,   64,  114,   51,   20,  114,
 /*  1630 */   114,  105,  106,  107,  114,  114,  114,  114,  114,   20,
 /*  1640 */    64,    0,   44,   45,   46,  114,   48,  114,  114,   51,
 /*  1650 */   114,   76,   44,   45,   46,  114,   48,  114,  114,   51,
 /*  1660 */   114,   20,   64,   44,   45,   46,   91,   48,  114,  114,
 /*  1670 */    51,  114,   64,   76,  114,  114,  114,  114,   81,   76,
 /*  1680 */   105,  106,  107,   64,  114,   44,   45,   46,   91,   48,
 /*  1690 */   114,  114,   51,  114,   91,  114,  114,   76,  114,  114,
 /*  1700 */   114,  114,  105,  106,  107,   64,  114,  114,  105,  106,
 /*  1710 */   107,   91,   91,  114,   94,  114,   96,   91,   98,   76,
 /*  1720 */   114,  114,  102,  103,  114,  114,  105,  106,  107,   76,
 /*  1730 */   114,  105,  106,  107,   91,  114,   76,  114,  114,   76,
 /*  1740 */   114,  114,   76,  114,   91,  114,  114,   76,  105,  106,
 /*  1750 */   107,   91,  114,  114,   91,  114,  114,   91,  105,  106,
 /*  1760 */   107,  114,   91,  114,   76,  105,  106,  107,  105,  106,
 /*  1770 */   107,  105,  106,  107,   76,  114,  105,  106,  107,   91,
 /*  1780 */   114,   76,  114,  114,  114,   76,  114,  114,  114,   91,
 /*  1790 */   114,   76,  114,  105,  106,  107,   91,  114,  114,  114,
 /*  1800 */    91,  114,  114,  105,  106,  107,   91,  114,  114,  114,
 /*  1810 */   105,  106,  107,   76,  105,  106,  107,  114,  114,   76,
 /*  1820 */   105,  106,  107,  114,   76,  114,  114,  114,   91,  114,
 /*  1830 */   114,   76,  114,  114,   91,  114,   76,  114,  114,   91,
 /*  1840 */   114,   76,  105,  106,  107,  114,   91,  114,  105,  106,
 /*  1850 */   107,   91,  114,  105,  106,  107,   91,  114,   76,  114,
 /*  1860 */   105,  106,  107,  114,  114,  105,  106,  107,   76,  114,
 /*  1870 */   105,  106,  107,   91,  114,  114,  114,   76,  114,  114,
 /*  1880 */    76,  114,  114,   91,  114,  114,  114,  105,  106,  107,
 /*  1890 */    76,  114,   91,  114,  114,   91,  114,  105,  106,  107,
 /*  1900 */   114,   76,  114,  114,  114,   91,  105,  106,  107,  105,
 /*  1910 */   106,  107,  114,   76,  114,  114,   91,  114,   76,  105,
 /*  1920 */   106,  107,  114,   76,  114,  114,   76,  114,   91,  114,
 /*  1930 */   105,  106,  107,   91,  114,   76,  114,  114,   91,  114,
 /*  1940 */   114,   91,  105,  106,  107,   76,  114,  105,  106,  107,
 /*  1950 */    91,  114,  105,  106,  107,  105,  106,  107,  114,  114,
 /*  1960 */    91,  114,  114,  114,  105,  106,  107,   76,  114,  114,
 /*  1970 */   114,  114,   76,  114,  105,  106,  107,  114,   76,  114,
 /*  1980 */   114,  114,   91,  114,   76,  114,  114,   91,  114,  114,
 /*  1990 */    76,  114,  114,   91,  114,   76,  105,  106,  107,   91,
 /*  2000 */   114,  105,  106,  107,  114,   91,  114,  105,  106,  107,
 /*  2010 */    91,  114,   76,  105,  106,  107,  114,  114,   76,  105,
 /*  2020 */   106,  107,   76,  114,  105,  106,  107,   91,  114,   76,
 /*  2030 */   114,  114,  114,   91,  114,  114,  114,   91,  114,  114,
 /*  2040 */    91,  105,  106,  107,   91,  114,  114,  105,  106,  107,
 /*  2050 */   114,  105,  106,  107,  105,  106,  107,   91,  105,  106,
 /*  2060 */   107,  114,  114,  114,  114,  114,  114,  114,  114,  114,
 /*  2070 */   114,  105,  106,  107,
};
#define YY_SHIFT_USE_DFLT (-55)
#define YY_SHIFT_MAX 261
static const short yy_shift_ofst[] = {
 /*     0 */   127,   -9,   72,   72,  595,  614,  692,  692,  692,  692,
 /*    10 */   692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
 /*    20 */   692,  692,   72,   72,  692,  692,  832,  933,  723,  933,
 /*    30 */   933,  169,  169,  169, 1352, 1352, 1352, 1352,  860,  920,
 /*    40 */   933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
 /*    50 */   933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
 /*    60 */   933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
 /*    70 */   933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
 /*    80 */   933,  933,  933,  933,  933, 1352,  933,  933,  933,  933,
 /*    90 */   933,  933,  933,  933,  933,  933,  933, 1352,  -54,  -54,
 /*   100 */  1077, 1005, 1077, 1133, 1077, 1352,  -24,   67,  -54, 1277,
 /*   110 */  1133, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
 /*   120 */   -32,  180,  -14,  140,  185,  204,  127,  689,  322,  -32,
 /*   130 */   193,  100,  157,  165,  -14,  -54,  279,  325,  -54,  550,
 /*   140 */   590,  590,  -54,  600,  635,  600,  635,  635,   59,  249,
 /*   150 */   268,  287,  320,  347,  372,  407,  432,  451,  470,  489,
 /*   160 */   508,  527,  546,  565,  584,  584,  584,  681,  711,  751,
 /*   170 */   792,  803,  813,  -11,  152,  152,  152,  152,  152,  152,
 /*   180 */  1122, 1235, 1300, 1402, 1429, 1443, 1464, 1472, 1481, 1502,
 /*   190 */  1511, 1519, 1540, 1549, 1561, 1576, 1598, 1608, 1619, 1641,
 /*   200 */    82,   82,   82,   82,  952,  653,  886,  575,  705,  603,
 /*   210 */   712,  798,  740,  721,  699,  735,  702,  749,  755,  750,
 /*   220 */   759,  764,  773,  783,  771,  788,  802,  781,  815,  819,
 /*   230 */   821,  818,  822,  830,  823,  834,  843,  851,  882,  841,
 /*   240 */   858,  861,  863,  841,  841,  841,  841,  841,  841,  841,
 /*   250 */   841,  841,  841,  841,  841,  841,  841,  874,  898,  900,
 /*   260 */   884,  888,
};
#define YY_REDUCE_USE_DFLT (-88)
#define YY_REDUCE_MAX 147
static const short yy_reduce_ofst[] = {
 /*     0 */   673,  542,  889,  929,  935,  946,  971,  995, 1007, 1043,
 /*    10 */  1052, 1099, 1109, 1120, 1158, 1197, 1206, 1218, 1264, 1274,
 /*    20 */  1285, 1310,  816, 1351,  848,  848, 1364, 1171,  529, 1597,
 /*    30 */  1391,  142,  301,  683,  810,  927, 1078, 1620,  -68,  536,
 /*    40 */  1019, 1467, 1526, 1575, 1603, 1621, 1643, 1653, 1660, 1663,
 /*    50 */  1666, 1671, 1688, 1698, 1705, 1709, 1715, 1737, 1743, 1748,
 /*    60 */  1755, 1760, 1765, 1782, 1792, 1801, 1804, 1814, 1825, 1837,
 /*    70 */  1842, 1847, 1850, 1859, 1869, 1891, 1896, 1902, 1908, 1914,
 /*    80 */  1919, 1936, 1942, 1946, 1953,  216,   28,  774,  780,  926,
 /*    90 */  1151, 1154, 1298, 1399, 1626, 1949, 1966,  144,  251,  307,
 /*   100 */   -87,   -2,  -42,   -6,  223,   -2,  148,  577,  616,  218,
 /*   110 */   278,  308,  313,  336,  338,  517,  583,  640,  707,  761,
 /*   120 */   -31,   47,   85,  -30,    0,    1,    8,   21,   29,   33,
 /*   130 */    45,   64,  106,  173,  226,  227,  243,  356,  303,  494,
 /*   140 */   557,  558,  549,  579,  606,  628,  637,  666,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   560,  560,  406,  408,  560,  560,  560,  560,  560,  560,
 /*    10 */   560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
 /*    20 */   560,  395,  546,  560,  560,  548,  560,  560,  560,  549,
 /*    30 */   560,  556,  556,  556,  558,  558,  558,  558,  560,  560,
 /*    40 */   560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
 /*    50 */   560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
 /*    60 */   560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
 /*    70 */   560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
 /*    80 */   560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
 /*    90 */   560,  560,  560,  560,  560,  560,  560,  546,  560,  560,
 /*   100 */   425,  560,  425,  551,  425,  560,  560,  560,  546,  441,
 /*   110 */   560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
 /*   120 */   560,  560,  560,  543,  560,  560,  546,  560,  560,  546,
 /*   130 */   560,  545,  545,  545,  546,  560,  455,  545,  560,  547,
 /*   140 */   545,  545,  560,  421,  545,  560,  545,  545,  543,  560,
 /*   150 */   560,  560,  560,  560,  560,  560,  529,  530,  531,  532,
 /*   160 */   533,  534,  535,  536,  544,  550,  543,  496,  495,  485,
 /*   170 */   486,  487,  488,  560,  489,  490,  491,  492,  493,  494,
 /*   180 */   462,  463,  464,  465,  466,  467,  468,  469,  471,  472,
 /*   190 */   473,  474,  476,  478,  479,  480,  481,  482,  483,  484,
 /*   200 */   485,  486,  487,  488,  554,  470,  470,  560,  560,  560,
 /*   210 */   560,  560,  560,  560,  560,  560,  441,  560,  560,  560,
 /*   220 */   560,  560,  560,  560,  445,  560,  560,  560,  560,  560,
 /*   230 */   560,  560,  560,  560,  537,  560,  560,  560,  435,  436,
 /*   240 */   560,  560,  560,  373,  374,  375,  376,  377,  378,  379,
 /*   250 */   380,  381,  382,  383,  384,  385,  394,  396,  560,  560,
 /*   260 */   560,  560,  412,  413,  414,  427,  428,  429,  426,  415,
 /*   270 */   416,  431,  432,  437,  438,  440,  553,  442,  443,  452,
 /*   280 */   423,  424,  451,  453,  450,  444,  446,  454,  447,  557,
 /*   290 */   448,  449,  456,  555,  457,  559,  458,  459,  460,  461,
 /*   300 */   462,  463,  464,  465,  471,  472,  473,  474,  475,  476,
 /*   310 */   477,  480,  481,  482,  483,  484,  466,  467,  497,  498,
 /*   320 */   507,  508,  509,  510,  515,  517,  538,  539,  540,  542,
 /*   330 */   541,  468,  469,  479,  478,  439,  430,  417,  418,  434,
 /*   340 */   552,  554,  433,  419,  420,  370,  371,  386,  387,  388,
 /*   350 */   389,  390,  391,  392,  393,  397,  399,  398,  400,  401,
 /*   360 */   402,  404,  405,  407,  403,  409,  410,  422,  411,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "OROR",          "ANDAND",        "EQ",          
  "NEQ",           "LT",            "LE",            "GT",          
  "GE",            "PLUS",          "MINUS",         "OR",          
  "XOR",           "DIVIDE",        "TIMES",         "MOD",         
  "SHIFTL",        "SHIFTR",        "AND",           "ANDNOT",      
  "SEMICOLON",     "ASSIGN",        "DECLARIZE",     "A_DIVIDE",    
  "A_TIMES",       "A_MOD",         "A_SHIFTL",      "A_SHIFTR",    
  "A_AND",         "A_ANDNOT",      "A_PLUS",        "A_MINUS",     
  "A_OR",          "A_XOR",         "INC",           "DEC",         
  "BREAK",         "CONTINUE",      "FALLTHROUGH",   "RETURN",      
  "IF",            "ELSE",          "FOR",           "SWITCH",      
  "LCURLY",        "RCURLY",        "CASE",          "COLON",       
  "DEFAULT",       "IMPORT",        "LPAREN",        "RPAREN",      
  "TYPE",          "CONST",         "VAR",           "FUNC",        
  "IDENT",         "STRING",        "LSB",           "RSB",         
  "DOT",           "STRUCT",        "UNION",         "ELLIPSIS",    
  "COMMA",         "INT",           "FLOAT",         "CHAR",        
  "NOT",           "error",         "program",       "decl_list",   
  "osemi",         "stmt_list",     "stmt",          "s_stmt",      
  "expr",          "expr_list",     "iexpr_list",    "decl",        
  "block_stmt",    "oexpr",         "sw_block_stmt",  "sw_case_list",
  "sw_case",       "import_spec",   "import_spec_list",  "type_spec",   
  "type_spec_list",  "value_spec",    "value_spec_list",  "ident",       
  "oargs_comma_list",  "func_results",  "type",          "field_comma_list",
  "ident_list",    "otype",         "ofield_semi_list_and_osemi",  "nametype_list",
  "args_comma_list",  "ofunc_ellipsis",  "field_semi_list",  "field",       
  "nametype",      "basic_lit",     "pexpr",         "uexpr",       
  "ty_pexpr",      "ty_uexpr",      "ty_expr",       "compound_lit",
  "ocomma",        "iexpr",       
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "program ::= decl_list osemi",
 /*   1 */ "stmt_list ::= stmt",
 /*   2 */ "stmt_list ::= stmt_list SEMICOLON stmt",
 /*   3 */ "s_stmt ::= expr",
 /*   4 */ "s_stmt ::= expr_list ASSIGN iexpr_list",
 /*   5 */ "s_stmt ::= expr_list DECLARIZE iexpr_list",
 /*   6 */ "s_stmt ::= expr_list A_DIVIDE iexpr_list",
 /*   7 */ "s_stmt ::= expr_list A_TIMES iexpr_list",
 /*   8 */ "s_stmt ::= expr_list A_MOD iexpr_list",
 /*   9 */ "s_stmt ::= expr_list A_SHIFTL iexpr_list",
 /*  10 */ "s_stmt ::= expr_list A_SHIFTR iexpr_list",
 /*  11 */ "s_stmt ::= expr_list A_AND iexpr_list",
 /*  12 */ "s_stmt ::= expr_list A_ANDNOT iexpr_list",
 /*  13 */ "s_stmt ::= expr_list A_PLUS iexpr_list",
 /*  14 */ "s_stmt ::= expr_list A_MINUS iexpr_list",
 /*  15 */ "s_stmt ::= expr_list A_OR iexpr_list",
 /*  16 */ "s_stmt ::= expr_list A_XOR iexpr_list",
 /*  17 */ "s_stmt ::= expr INC",
 /*  18 */ "s_stmt ::= expr DEC",
 /*  19 */ "stmt ::= s_stmt",
 /*  20 */ "stmt ::= decl",
 /*  21 */ "stmt ::= block_stmt",
 /*  22 */ "stmt ::= BREAK",
 /*  23 */ "stmt ::= CONTINUE",
 /*  24 */ "stmt ::= FALLTHROUGH",
 /*  25 */ "stmt ::= RETURN iexpr_list",
 /*  26 */ "stmt ::= RETURN",
 /*  27 */ "stmt ::= IF expr block_stmt",
 /*  28 */ "stmt ::= IF expr block_stmt ELSE stmt",
 /*  29 */ "stmt ::= FOR s_stmt SEMICOLON oexpr SEMICOLON s_stmt block_stmt",
 /*  30 */ "stmt ::= FOR expr block_stmt",
 /*  31 */ "stmt ::= FOR block_stmt",
 /*  32 */ "stmt ::= SWITCH expr sw_block_stmt",
 /*  33 */ "sw_block_stmt ::= LCURLY sw_case_list RCURLY",
 /*  34 */ "sw_case_list ::= sw_case",
 /*  35 */ "sw_case_list ::= sw_case_list sw_case",
 /*  36 */ "sw_case ::= CASE expr_list COLON stmt_list osemi",
 /*  37 */ "sw_case ::= CASE expr_list COLON",
 /*  38 */ "sw_case ::= DEFAULT COLON stmt_list osemi",
 /*  39 */ "sw_case ::= DEFAULT COLON",
 /*  40 */ "block_stmt ::= LCURLY stmt_list osemi RCURLY",
 /*  41 */ "block_stmt ::= LCURLY RCURLY",
 /*  42 */ "decl_list ::= decl",
 /*  43 */ "decl_list ::= decl_list SEMICOLON decl",
 /*  44 */ "decl ::= IMPORT import_spec",
 /*  45 */ "decl ::= IMPORT LPAREN import_spec_list osemi RPAREN",
 /*  46 */ "decl ::= TYPE type_spec",
 /*  47 */ "decl ::= TYPE LPAREN type_spec_list osemi RPAREN",
 /*  48 */ "decl ::= CONST value_spec",
 /*  49 */ "decl ::= CONST LPAREN value_spec_list osemi RPAREN",
 /*  50 */ "decl ::= VAR value_spec",
 /*  51 */ "decl ::= VAR LPAREN value_spec_list osemi RPAREN",
 /*  52 */ "decl ::= FUNC ident LPAREN oargs_comma_list RPAREN func_results",
 /*  53 */ "decl ::= FUNC ident LPAREN oargs_comma_list RPAREN func_results block_stmt",
 /*  54 */ "func_results ::= type",
 /*  55 */ "func_results ::= LPAREN field_comma_list RPAREN",
 /*  56 */ "func_results ::=",
 /*  57 */ "import_spec_list ::= import_spec",
 /*  58 */ "import_spec_list ::= import_spec_list SEMICOLON import_spec",
 /*  59 */ "import_spec ::= IDENT STRING",
 /*  60 */ "import_spec ::= STRING",
 /*  61 */ "type_spec_list ::= type_spec",
 /*  62 */ "type_spec_list ::= type_spec_list SEMICOLON type_spec",
 /*  63 */ "type_spec ::= IDENT type",
 /*  64 */ "value_spec_list ::= value_spec",
 /*  65 */ "value_spec_list ::= value_spec_list SEMICOLON value_spec",
 /*  66 */ "value_spec ::= ident_list otype",
 /*  67 */ "value_spec ::= ident_list otype ASSIGN iexpr_list",
 /*  68 */ "type ::= TIMES type",
 /*  69 */ "type ::= LSB expr RSB type",
 /*  70 */ "type ::= LSB RSB type",
 /*  71 */ "type ::= ident DOT ident",
 /*  72 */ "type ::= ident",
 /*  73 */ "type ::= STRUCT LCURLY ofield_semi_list_and_osemi RCURLY",
 /*  74 */ "type ::= UNION LCURLY ofield_semi_list_and_osemi RCURLY",
 /*  75 */ "type ::= FUNC LPAREN oargs_comma_list RPAREN func_results",
 /*  76 */ "field_comma_list ::= nametype_list",
 /*  77 */ "args_comma_list ::= nametype_list ofunc_ellipsis",
 /*  78 */ "args_comma_list ::= ELLIPSIS",
 /*  79 */ "field_semi_list ::= field",
 /*  80 */ "field_semi_list ::= field_semi_list SEMICOLON field",
 /*  81 */ "nametype_list ::= nametype",
 /*  82 */ "nametype_list ::= nametype_list COMMA nametype",
 /*  83 */ "nametype ::= ident type",
 /*  84 */ "nametype ::= type",
 /*  85 */ "ofunc_ellipsis ::= COMMA ELLIPSIS",
 /*  86 */ "ofunc_ellipsis ::=",
 /*  87 */ "field ::= ident_list type",
 /*  88 */ "field ::= type",
 /*  89 */ "basic_lit ::= INT",
 /*  90 */ "basic_lit ::= FLOAT",
 /*  91 */ "basic_lit ::= STRING",
 /*  92 */ "basic_lit ::= CHAR",
 /*  93 */ "pexpr ::= basic_lit",
 /*  94 */ "pexpr ::= ident",
 /*  95 */ "pexpr ::= LPAREN expr RPAREN",
 /*  96 */ "pexpr ::= pexpr LSB expr RSB",
 /*  97 */ "pexpr ::= pexpr DOT IDENT",
 /*  98 */ "pexpr ::= pexpr DOT LPAREN type RPAREN",
 /*  99 */ "pexpr ::= pexpr LPAREN RPAREN",
 /* 100 */ "pexpr ::= pexpr LPAREN iexpr_list RPAREN",
 /* 101 */ "uexpr ::= pexpr",
 /* 102 */ "uexpr ::= PLUS uexpr",
 /* 103 */ "uexpr ::= MINUS uexpr",
 /* 104 */ "uexpr ::= NOT uexpr",
 /* 105 */ "uexpr ::= AND uexpr",
 /* 106 */ "uexpr ::= TIMES uexpr",
 /* 107 */ "uexpr ::= XOR uexpr",
 /* 108 */ "expr ::= uexpr",
 /* 109 */ "expr ::= expr DIVIDE expr",
 /* 110 */ "expr ::= expr TIMES expr",
 /* 111 */ "expr ::= expr MOD expr",
 /* 112 */ "expr ::= expr SHIFTL expr",
 /* 113 */ "expr ::= expr SHIFTR expr",
 /* 114 */ "expr ::= expr AND expr",
 /* 115 */ "expr ::= expr ANDNOT expr",
 /* 116 */ "expr ::= expr PLUS expr",
 /* 117 */ "expr ::= expr MINUS expr",
 /* 118 */ "expr ::= expr OR expr",
 /* 119 */ "expr ::= expr XOR expr",
 /* 120 */ "expr ::= expr EQ expr",
 /* 121 */ "expr ::= expr NEQ expr",
 /* 122 */ "expr ::= expr LT expr",
 /* 123 */ "expr ::= expr LE expr",
 /* 124 */ "expr ::= expr GT expr",
 /* 125 */ "expr ::= expr GE expr",
 /* 126 */ "expr ::= expr ANDAND expr",
 /* 127 */ "expr ::= expr OROR expr",
 /* 128 */ "ty_pexpr ::= LSB expr RSB type",
 /* 129 */ "ty_pexpr ::= LSB RSB type",
 /* 130 */ "ty_pexpr ::= basic_lit",
 /* 131 */ "ty_pexpr ::= ident",
 /* 132 */ "ty_pexpr ::= LPAREN expr RPAREN",
 /* 133 */ "ty_pexpr ::= pexpr LSB expr RSB",
 /* 134 */ "ty_pexpr ::= pexpr DOT IDENT",
 /* 135 */ "ty_pexpr ::= pexpr DOT LPAREN type RPAREN",
 /* 136 */ "ty_pexpr ::= pexpr LPAREN RPAREN",
 /* 137 */ "ty_pexpr ::= pexpr LPAREN iexpr_list RPAREN",
 /* 138 */ "ty_pexpr ::= STRUCT LCURLY ofield_semi_list_and_osemi RCURLY",
 /* 139 */ "ty_pexpr ::= UNION LCURLY ofield_semi_list_and_osemi RCURLY",
 /* 140 */ "ty_pexpr ::= FUNC LPAREN oargs_comma_list RPAREN func_results",
 /* 141 */ "ty_uexpr ::= ty_pexpr",
 /* 142 */ "ty_uexpr ::= PLUS uexpr",
 /* 143 */ "ty_uexpr ::= MINUS uexpr",
 /* 144 */ "ty_uexpr ::= NOT uexpr",
 /* 145 */ "ty_uexpr ::= AND uexpr",
 /* 146 */ "ty_uexpr ::= TIMES ty_uexpr",
 /* 147 */ "ty_uexpr ::= XOR uexpr",
 /* 148 */ "ty_expr ::= ty_uexpr",
 /* 149 */ "ty_expr ::= expr DIVIDE expr",
 /* 150 */ "ty_expr ::= expr TIMES expr",
 /* 151 */ "ty_expr ::= expr MOD expr",
 /* 152 */ "ty_expr ::= expr SHIFTL expr",
 /* 153 */ "ty_expr ::= expr SHIFTR expr",
 /* 154 */ "ty_expr ::= expr AND expr",
 /* 155 */ "ty_expr ::= expr ANDNOT expr",
 /* 156 */ "ty_expr ::= expr PLUS expr",
 /* 157 */ "ty_expr ::= expr MINUS expr",
 /* 158 */ "ty_expr ::= expr OR expr",
 /* 159 */ "ty_expr ::= expr XOR expr",
 /* 160 */ "ty_expr ::= expr EQ expr",
 /* 161 */ "ty_expr ::= expr NEQ expr",
 /* 162 */ "ty_expr ::= expr LT expr",
 /* 163 */ "ty_expr ::= expr LE expr",
 /* 164 */ "ty_expr ::= expr GT expr",
 /* 165 */ "ty_expr ::= expr GE expr",
 /* 166 */ "ty_expr ::= expr ANDAND expr",
 /* 167 */ "ty_expr ::= expr OROR expr",
 /* 168 */ "compound_lit ::= LCURLY iexpr_list ocomma RCURLY",
 /* 169 */ "compound_lit ::= LCURLY iexpr_list ocomma RCURLY DOT LPAREN type RPAREN",
 /* 170 */ "iexpr ::= ty_expr",
 /* 171 */ "iexpr ::= compound_lit",
 /* 172 */ "iexpr_list ::= iexpr",
 /* 173 */ "iexpr_list ::= iexpr_list COMMA iexpr",
 /* 174 */ "expr_list ::= expr",
 /* 175 */ "expr_list ::= expr_list COMMA expr",
 /* 176 */ "osemi ::=",
 /* 177 */ "osemi ::= SEMICOLON",
 /* 178 */ "ocomma ::=",
 /* 179 */ "ocomma ::= COMMA",
 /* 180 */ "oexpr ::=",
 /* 181 */ "oexpr ::= expr",
 /* 182 */ "otype ::=",
 /* 183 */ "otype ::= type",
 /* 184 */ "ident ::= IDENT",
 /* 185 */ "ident_list ::= ident",
 /* 186 */ "ident_list ::= ident_list COMMA ident",
 /* 187 */ "oargs_comma_list ::=",
 /* 188 */ "oargs_comma_list ::= args_comma_list",
 /* 189 */ "ofield_semi_list_and_osemi ::=",
 /* 190 */ "ofield_semi_list_and_osemi ::= field_semi_list osemi",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* OROR */
    case 2: /* ANDAND */
    case 3: /* EQ */
    case 4: /* NEQ */
    case 5: /* LT */
    case 6: /* LE */
    case 7: /* GT */
    case 8: /* GE */
    case 9: /* PLUS */
    case 10: /* MINUS */
    case 11: /* OR */
    case 12: /* XOR */
    case 13: /* DIVIDE */
    case 14: /* TIMES */
    case 15: /* MOD */
    case 16: /* SHIFTL */
    case 17: /* SHIFTR */
    case 18: /* AND */
    case 19: /* ANDNOT */
    case 20: /* SEMICOLON */
    case 21: /* ASSIGN */
    case 22: /* DECLARIZE */
    case 23: /* A_DIVIDE */
    case 24: /* A_TIMES */
    case 25: /* A_MOD */
    case 26: /* A_SHIFTL */
    case 27: /* A_SHIFTR */
    case 28: /* A_AND */
    case 29: /* A_ANDNOT */
    case 30: /* A_PLUS */
    case 31: /* A_MINUS */
    case 32: /* A_OR */
    case 33: /* A_XOR */
    case 34: /* INC */
    case 35: /* DEC */
    case 36: /* BREAK */
    case 37: /* CONTINUE */
    case 38: /* FALLTHROUGH */
    case 39: /* RETURN */
    case 40: /* IF */
    case 41: /* ELSE */
    case 42: /* FOR */
    case 43: /* SWITCH */
    case 44: /* LCURLY */
    case 45: /* RCURLY */
    case 46: /* CASE */
    case 47: /* COLON */
    case 48: /* DEFAULT */
    case 49: /* IMPORT */
    case 50: /* LPAREN */
    case 51: /* RPAREN */
    case 52: /* TYPE */
    case 53: /* CONST */
    case 54: /* VAR */
    case 55: /* FUNC */
    case 56: /* IDENT */
    case 57: /* STRING */
    case 58: /* LSB */
    case 59: /* RSB */
    case 60: /* DOT */
    case 61: /* STRUCT */
    case 62: /* UNION */
    case 63: /* ELLIPSIS */
    case 64: /* COMMA */
    case 65: /* INT */
    case 66: /* FLOAT */
    case 67: /* CHAR */
    case 68: /* NOT */
{
#line 2 "parser.y"
 delete (yypminor->yy0); 
#line 1146 "parser.c"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   ParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 70, 2 },
  { 73, 1 },
  { 73, 3 },
  { 75, 1 },
  { 75, 3 },
  { 75, 3 },
  { 75, 3 },
  { 75, 3 },
  { 75, 3 },
  { 75, 3 },
  { 75, 3 },
  { 75, 3 },
  { 75, 3 },
  { 75, 3 },
  { 75, 3 },
  { 75, 3 },
  { 75, 3 },
  { 75, 2 },
  { 75, 2 },
  { 74, 1 },
  { 74, 1 },
  { 74, 1 },
  { 74, 1 },
  { 74, 1 },
  { 74, 1 },
  { 74, 2 },
  { 74, 1 },
  { 74, 3 },
  { 74, 5 },
  { 74, 7 },
  { 74, 3 },
  { 74, 2 },
  { 74, 3 },
  { 82, 3 },
  { 83, 1 },
  { 83, 2 },
  { 84, 5 },
  { 84, 3 },
  { 84, 4 },
  { 84, 2 },
  { 80, 4 },
  { 80, 2 },
  { 71, 1 },
  { 71, 3 },
  { 79, 2 },
  { 79, 5 },
  { 79, 2 },
  { 79, 5 },
  { 79, 2 },
  { 79, 5 },
  { 79, 2 },
  { 79, 5 },
  { 79, 6 },
  { 79, 7 },
  { 93, 1 },
  { 93, 3 },
  { 93, 0 },
  { 86, 1 },
  { 86, 3 },
  { 85, 2 },
  { 85, 1 },
  { 88, 1 },
  { 88, 3 },
  { 87, 2 },
  { 90, 1 },
  { 90, 3 },
  { 89, 2 },
  { 89, 4 },
  { 94, 2 },
  { 94, 4 },
  { 94, 3 },
  { 94, 3 },
  { 94, 1 },
  { 94, 4 },
  { 94, 4 },
  { 94, 5 },
  { 95, 1 },
  { 100, 2 },
  { 100, 1 },
  { 102, 1 },
  { 102, 3 },
  { 99, 1 },
  { 99, 3 },
  { 104, 2 },
  { 104, 1 },
  { 101, 2 },
  { 101, 0 },
  { 103, 2 },
  { 103, 1 },
  { 105, 1 },
  { 105, 1 },
  { 105, 1 },
  { 105, 1 },
  { 106, 1 },
  { 106, 1 },
  { 106, 3 },
  { 106, 4 },
  { 106, 3 },
  { 106, 5 },
  { 106, 3 },
  { 106, 4 },
  { 107, 1 },
  { 107, 2 },
  { 107, 2 },
  { 107, 2 },
  { 107, 2 },
  { 107, 2 },
  { 107, 2 },
  { 76, 1 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 76, 3 },
  { 108, 4 },
  { 108, 3 },
  { 108, 1 },
  { 108, 1 },
  { 108, 3 },
  { 108, 4 },
  { 108, 3 },
  { 108, 5 },
  { 108, 3 },
  { 108, 4 },
  { 108, 4 },
  { 108, 4 },
  { 108, 5 },
  { 109, 1 },
  { 109, 2 },
  { 109, 2 },
  { 109, 2 },
  { 109, 2 },
  { 109, 2 },
  { 109, 2 },
  { 110, 1 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 110, 3 },
  { 111, 4 },
  { 111, 8 },
  { 113, 1 },
  { 113, 1 },
  { 78, 1 },
  { 78, 3 },
  { 77, 1 },
  { 77, 3 },
  { 72, 0 },
  { 72, 1 },
  { 112, 0 },
  { 112, 1 },
  { 81, 0 },
  { 81, 1 },
  { 97, 0 },
  { 97, 1 },
  { 91, 1 },
  { 96, 1 },
  { 96, 3 },
  { 92, 0 },
  { 92, 1 },
  { 98, 0 },
  { 98, 2 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* program ::= decl_list osemi */
#line 31 "parser.y"
{
	yygotominor.yy218 = new program_t(yymsp[-1].minor.yy6);
	ctx->ast = yygotominor.yy218;
}
#line 1626 "parser.c"
        break;
      case 1: /* stmt_list ::= stmt */
#line 44 "parser.y"
{ 
	yygotominor.yy6 = new node_vector_t;
	if (yymsp[0].minor.yy184) yygotominor.yy6->push_back(yymsp[0].minor.yy184);
}
#line 1634 "parser.c"
        break;
      case 2: /* stmt_list ::= stmt_list SEMICOLON stmt */
#line 48 "parser.y"
{
	if (yymsp[0].minor.yy184) yymsp[-2].minor.yy6->push_back(yymsp[0].minor.yy184);
	yygotominor.yy6 = yymsp[-2].minor.yy6;
  yy_destructor(yypParser,20,&yymsp[-1].minor);
}
#line 1643 "parser.c"
        break;
      case 3: /* s_stmt ::= expr */
#line 62 "parser.y"
{ yygotominor.yy184 = new expr_stmt_t(yymsp[0].minor.yy184); }
#line 1648 "parser.c"
        break;
      case 4: /* s_stmt ::= expr_list ASSIGN iexpr_list */
      case 5: /* s_stmt ::= expr_list DECLARIZE iexpr_list */ yytestcase(yyruleno==5);
      case 6: /* s_stmt ::= expr_list A_DIVIDE iexpr_list */ yytestcase(yyruleno==6);
      case 7: /* s_stmt ::= expr_list A_TIMES iexpr_list */ yytestcase(yyruleno==7);
      case 8: /* s_stmt ::= expr_list A_MOD iexpr_list */ yytestcase(yyruleno==8);
      case 9: /* s_stmt ::= expr_list A_SHIFTL iexpr_list */ yytestcase(yyruleno==9);
      case 10: /* s_stmt ::= expr_list A_SHIFTR iexpr_list */ yytestcase(yyruleno==10);
      case 11: /* s_stmt ::= expr_list A_AND iexpr_list */ yytestcase(yyruleno==11);
      case 12: /* s_stmt ::= expr_list A_ANDNOT iexpr_list */ yytestcase(yyruleno==12);
      case 13: /* s_stmt ::= expr_list A_PLUS iexpr_list */ yytestcase(yyruleno==13);
      case 14: /* s_stmt ::= expr_list A_MINUS iexpr_list */ yytestcase(yyruleno==14);
      case 15: /* s_stmt ::= expr_list A_OR iexpr_list */ yytestcase(yyruleno==15);
      case 16: /* s_stmt ::= expr_list A_XOR iexpr_list */ yytestcase(yyruleno==16);
#line 63 "parser.y"
{ yygotominor.yy184 = new assign_stmt_t(yymsp[-2].minor.yy6, yymsp[0].minor.yy6, yymsp[-1].minor.yy0); }
#line 1665 "parser.c"
        break;
      case 17: /* s_stmt ::= expr INC */
      case 18: /* s_stmt ::= expr DEC */ yytestcase(yyruleno==18);
#line 76 "parser.y"
{ yygotominor.yy184 = new incdec_stmt_t(yymsp[-1].minor.yy184, yymsp[0].minor.yy0); }
#line 1671 "parser.c"
        break;
      case 19: /* stmt ::= s_stmt */
      case 101: /* uexpr ::= pexpr */ yytestcase(yyruleno==101);
      case 108: /* expr ::= uexpr */ yytestcase(yyruleno==108);
      case 141: /* ty_uexpr ::= ty_pexpr */ yytestcase(yyruleno==141);
      case 148: /* ty_expr ::= ty_uexpr */ yytestcase(yyruleno==148);
      case 170: /* iexpr ::= ty_expr */ yytestcase(yyruleno==170);
      case 171: /* iexpr ::= compound_lit */ yytestcase(yyruleno==171);
      case 181: /* oexpr ::= expr */ yytestcase(yyruleno==181);
      case 183: /* otype ::= type */ yytestcase(yyruleno==183);
#line 87 "parser.y"
{ yygotominor.yy184 = yymsp[0].minor.yy184; }
#line 1684 "parser.c"
        break;
      case 20: /* stmt ::= decl */
#line 88 "parser.y"
{ yygotominor.yy184 = new decl_stmt_t(yymsp[0].minor.yy184); }
#line 1689 "parser.c"
        break;
      case 21: /* stmt ::= block_stmt */
#line 89 "parser.y"
{ yygotominor.yy184 = yymsp[0].minor.yy156; }
#line 1694 "parser.c"
        break;
      case 22: /* stmt ::= BREAK */
      case 23: /* stmt ::= CONTINUE */ yytestcase(yyruleno==23);
      case 24: /* stmt ::= FALLTHROUGH */ yytestcase(yyruleno==24);
#line 90 "parser.y"
{ yygotominor.yy184 = new flow_stmt_t(yymsp[0].minor.yy0); }
#line 1701 "parser.c"
        break;
      case 25: /* stmt ::= RETURN iexpr_list */
#line 93 "parser.y"
{ yygotominor.yy184 = new return_stmt_t(yymsp[0].minor.yy6, yymsp[-1].minor.yy0); }
#line 1706 "parser.c"
        break;
      case 26: /* stmt ::= RETURN */
#line 94 "parser.y"
{ yygotominor.yy184 = new return_stmt_t(0, yymsp[0].minor.yy0); }
#line 1711 "parser.c"
        break;
      case 27: /* stmt ::= IF expr block_stmt */
#line 96 "parser.y"
{
	yygotominor.yy184 = new ifelse_stmt_t(yymsp[-1].minor.yy184, yymsp[0].minor.yy156, yymsp[-2].minor.yy0);
}
#line 1718 "parser.c"
        break;
      case 28: /* stmt ::= IF expr block_stmt ELSE stmt */
#line 99 "parser.y"
{
	yygotominor.yy184 = new ifelse_stmt_t(yymsp[-3].minor.yy184, yymsp[-2].minor.yy156, yymsp[-4].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy184);
}
#line 1725 "parser.c"
        break;
      case 29: /* stmt ::= FOR s_stmt SEMICOLON oexpr SEMICOLON s_stmt block_stmt */
#line 102 "parser.y"
{
	yygotominor.yy184 = new for_stmt_t(yymsp[-5].minor.yy184, yymsp[-3].minor.yy184, yymsp[-1].minor.yy184, yymsp[0].minor.yy156, yymsp[-6].minor.yy0);
  yy_destructor(yypParser,20,&yymsp[-4].minor);
  yy_destructor(yypParser,20,&yymsp[-2].minor);
}
#line 1734 "parser.c"
        break;
      case 30: /* stmt ::= FOR expr block_stmt */
#line 105 "parser.y"
{
	yygotominor.yy184 = new for_stmt_t(0, yymsp[-1].minor.yy184, 0, yymsp[0].minor.yy156, yymsp[-2].minor.yy0);
}
#line 1741 "parser.c"
        break;
      case 31: /* stmt ::= FOR block_stmt */
#line 108 "parser.y"
{
	yygotominor.yy184 = new for_stmt_t(0, 0, 0, yymsp[0].minor.yy156, yymsp[-1].minor.yy0);
}
#line 1748 "parser.c"
        break;
      case 32: /* stmt ::= SWITCH expr sw_block_stmt */
#line 111 "parser.y"
{
	yygotominor.yy184 = new switch_stmt_t(yymsp[-1].minor.yy184, yymsp[0].minor.yy156, yymsp[-2].minor.yy0);
}
#line 1755 "parser.c"
        break;
      case 33: /* sw_block_stmt ::= LCURLY sw_case_list RCURLY */
#line 123 "parser.y"
{
	yygotominor.yy156 = new block_stmt_t(yymsp[-1].minor.yy6, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);
}
#line 1762 "parser.c"
        break;
      case 34: /* sw_case_list ::= sw_case */
#line 128 "parser.y"
{ yygotominor.yy6 = new node_vector_t(1, yymsp[0].minor.yy194); }
#line 1767 "parser.c"
        break;
      case 35: /* sw_case_list ::= sw_case_list sw_case */
#line 129 "parser.y"
{ yymsp[-1].minor.yy6->push_back(yymsp[0].minor.yy194); yygotominor.yy6 = yymsp[-1].minor.yy6; }
#line 1772 "parser.c"
        break;
      case 36: /* sw_case ::= CASE expr_list COLON stmt_list osemi */
#line 132 "parser.y"
{
	yygotominor.yy194 = new switch_stmt_case_t(yymsp[-3].minor.yy6, yymsp[-1].minor.yy6, yymsp[-4].minor.yy0, yymsp[-2].minor.yy0);
}
#line 1779 "parser.c"
        break;
      case 37: /* sw_case ::= CASE expr_list COLON */
#line 135 "parser.y"
{
	yygotominor.yy194 = new switch_stmt_case_t(yymsp[-1].minor.yy6, 0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);
}
#line 1786 "parser.c"
        break;
      case 38: /* sw_case ::= DEFAULT COLON stmt_list osemi */
#line 138 "parser.y"
{
	yygotominor.yy194 = new switch_stmt_case_t(0, yymsp[-1].minor.yy6, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0);
}
#line 1793 "parser.c"
        break;
      case 39: /* sw_case ::= DEFAULT COLON */
#line 141 "parser.y"
{
	yygotominor.yy194 = new switch_stmt_case_t(0, 0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0);
}
#line 1800 "parser.c"
        break;
      case 40: /* block_stmt ::= LCURLY stmt_list osemi RCURLY */
#line 153 "parser.y"
{
	yygotominor.yy156 = new block_stmt_t(yymsp[-2].minor.yy6, yymsp[-3].minor.yy0, yymsp[0].minor.yy0);
}
#line 1807 "parser.c"
        break;
      case 41: /* block_stmt ::= LCURLY RCURLY */
#line 156 "parser.y"
{
	yygotominor.yy156 = new block_stmt_t(0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0);
}
#line 1814 "parser.c"
        break;
      case 42: /* decl_list ::= decl */
      case 172: /* iexpr_list ::= iexpr */ yytestcase(yyruleno==172);
      case 174: /* expr_list ::= expr */ yytestcase(yyruleno==174);
#line 168 "parser.y"
{ yygotominor.yy6 = new node_vector_t(1, yymsp[0].minor.yy184); }
#line 1821 "parser.c"
        break;
      case 43: /* decl_list ::= decl_list SEMICOLON decl */
#line 169 "parser.y"
{ yymsp[-2].minor.yy6->push_back(yymsp[0].minor.yy184); yygotominor.yy6 = yymsp[-2].minor.yy6;   yy_destructor(yypParser,20,&yymsp[-1].minor);
}
#line 1827 "parser.c"
        break;
      case 44: /* decl ::= IMPORT import_spec */
#line 185 "parser.y"
{
	yygotominor.yy184 = new import_decl_t(yymsp[0].minor.yy203, yymsp[-1].minor.yy0);
}
#line 1834 "parser.c"
        break;
      case 45: /* decl ::= IMPORT LPAREN import_spec_list osemi RPAREN */
#line 188 "parser.y"
{
	yygotominor.yy184 = new import_decl_t(yymsp[-2].minor.yy69, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[0].minor.yy0);
}
#line 1841 "parser.c"
        break;
      case 46: /* decl ::= TYPE type_spec */
#line 191 "parser.y"
{
	yygotominor.yy184 = new type_decl_t(yymsp[0].minor.yy126, yymsp[-1].minor.yy0);
}
#line 1848 "parser.c"
        break;
      case 47: /* decl ::= TYPE LPAREN type_spec_list osemi RPAREN */
#line 194 "parser.y"
{
	yygotominor.yy184 = new type_decl_t(yymsp[-2].minor.yy192, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[0].minor.yy0);
}
#line 1855 "parser.c"
        break;
      case 48: /* decl ::= CONST value_spec */
#line 197 "parser.y"
{
	const_decl_t *d = new const_decl_t(yymsp[0].minor.yy177, yymsp[-1].minor.yy0);
	syntax_check_const_decl(ctx->diag, d);
	yygotominor.yy184 = d;
}
#line 1864 "parser.c"
        break;
      case 49: /* decl ::= CONST LPAREN value_spec_list osemi RPAREN */
#line 202 "parser.y"
{
	const_decl_t *d = new const_decl_t(yymsp[-2].minor.yy123, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[0].minor.yy0);
	syntax_check_const_decl(ctx->diag, d);
	yygotominor.yy184 = d;
}
#line 1873 "parser.c"
        break;
      case 50: /* decl ::= VAR value_spec */
#line 207 "parser.y"
{
	var_decl_t *d = new var_decl_t(yymsp[0].minor.yy177, yymsp[-1].minor.yy0);
	syntax_check_var_decl(ctx->diag, d);
	yygotominor.yy184 = d;
}
#line 1882 "parser.c"
        break;
      case 51: /* decl ::= VAR LPAREN value_spec_list osemi RPAREN */
#line 212 "parser.y"
{
	var_decl_t *d = new var_decl_t(yymsp[-2].minor.yy123, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[0].minor.yy0);
	syntax_check_var_decl(ctx->diag, d);
	yygotominor.yy184 = d;
}
#line 1891 "parser.c"
        break;
      case 52: /* decl ::= FUNC ident LPAREN oargs_comma_list RPAREN func_results */
#line 220 "parser.y"
{
	func_type_t *ftype = new func_type_t(yymsp[-2].minor.yy84, yymsp[0].minor.yy84, yymsp[-5].minor.yy0);
	yygotominor.yy184 = new func_decl_t(yymsp[-4].minor.yy76, ftype);
  yy_destructor(yypParser,50,&yymsp[-3].minor);
  yy_destructor(yypParser,51,&yymsp[-1].minor);
}
#line 1901 "parser.c"
        break;
      case 53: /* decl ::= FUNC ident LPAREN oargs_comma_list RPAREN func_results block_stmt */
#line 227 "parser.y"
{
	func_type_t *ftype = new func_type_t(yymsp[-3].minor.yy84, yymsp[-1].minor.yy84, yymsp[-6].minor.yy0);
	yygotominor.yy184 = new func_decl_t(yymsp[-5].minor.yy76, ftype, yymsp[0].minor.yy156);
  yy_destructor(yypParser,50,&yymsp[-4].minor);
  yy_destructor(yypParser,51,&yymsp[-2].minor);
}
#line 1911 "parser.c"
        break;
      case 54: /* func_results ::= type */
#line 240 "parser.y"
{
	field_t *f = new field_t(0, yymsp[0].minor.yy184);
	yygotominor.yy84 = new field_vector_t(1, f);
}
#line 1919 "parser.c"
        break;
      case 55: /* func_results ::= LPAREN field_comma_list RPAREN */
#line 244 "parser.y"
{ yygotominor.yy84 = yymsp[-1].minor.yy84;   yy_destructor(yypParser,50,&yymsp[-2].minor);
  yy_destructor(yypParser,51,&yymsp[0].minor);
}
#line 1926 "parser.c"
        break;
      case 56: /* func_results ::= */
      case 187: /* oargs_comma_list ::= */ yytestcase(yyruleno==187);
      case 189: /* ofield_semi_list_and_osemi ::= */ yytestcase(yyruleno==189);
#line 245 "parser.y"
{ yygotominor.yy84 = 0; }
#line 1933 "parser.c"
        break;
      case 57: /* import_spec_list ::= import_spec */
#line 258 "parser.y"
{ yygotominor.yy69 = new import_spec_vector_t(1, yymsp[0].minor.yy203); }
#line 1938 "parser.c"
        break;
      case 58: /* import_spec_list ::= import_spec_list SEMICOLON import_spec */
#line 259 "parser.y"
{
	yymsp[-2].minor.yy69->push_back(yymsp[0].minor.yy203); yygotominor.yy69 = yymsp[-2].minor.yy69;
  yy_destructor(yypParser,20,&yymsp[-1].minor);
}
#line 1946 "parser.c"
        break;
      case 59: /* import_spec ::= IDENT STRING */
#line 264 "parser.y"
{ yygotominor.yy203 = new import_spec_t(yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
#line 1951 "parser.c"
        break;
      case 60: /* import_spec ::= STRING */
#line 265 "parser.y"
{ yygotominor.yy203 = new import_spec_t(0, yymsp[0].minor.yy0); }
#line 1956 "parser.c"
        break;
      case 61: /* type_spec_list ::= type_spec */
#line 278 "parser.y"
{ yygotominor.yy192 = new type_spec_vector_t(1, yymsp[0].minor.yy126); }
#line 1961 "parser.c"
        break;
      case 62: /* type_spec_list ::= type_spec_list SEMICOLON type_spec */
#line 279 "parser.y"
{
	yymsp[-2].minor.yy192->push_back(yymsp[0].minor.yy126); yygotominor.yy192 = yymsp[-2].minor.yy192;
  yy_destructor(yypParser,20,&yymsp[-1].minor);
}
#line 1969 "parser.c"
        break;
      case 63: /* type_spec ::= IDENT type */
#line 284 "parser.y"
{ yygotominor.yy126 = new type_spec_t(yymsp[-1].minor.yy0, yymsp[0].minor.yy184); }
#line 1974 "parser.c"
        break;
      case 64: /* value_spec_list ::= value_spec */
#line 299 "parser.y"
{ yygotominor.yy123 = new value_spec_vector_t(1, yymsp[0].minor.yy177); }
#line 1979 "parser.c"
        break;
      case 65: /* value_spec_list ::= value_spec_list SEMICOLON value_spec */
#line 300 "parser.y"
{
	yymsp[-2].minor.yy123->push_back(yymsp[0].minor.yy177); yygotominor.yy123 = yymsp[-2].minor.yy123;
  yy_destructor(yypParser,20,&yymsp[-1].minor);
}
#line 1987 "parser.c"
        break;
      case 66: /* value_spec ::= ident_list otype */
#line 305 "parser.y"
{
	yygotominor.yy177 = new value_spec_t(yymsp[-1].minor.yy154, yymsp[0].minor.yy184);
}
#line 1994 "parser.c"
        break;
      case 67: /* value_spec ::= ident_list otype ASSIGN iexpr_list */
#line 308 "parser.y"
{
	yygotominor.yy177 = new value_spec_t(yymsp[-3].minor.yy154, yymsp[-2].minor.yy184, yymsp[0].minor.yy6, yymsp[-1].minor.yy0);
}
#line 2001 "parser.c"
        break;
      case 68: /* type ::= TIMES type */
      case 102: /* uexpr ::= PLUS uexpr */ yytestcase(yyruleno==102);
      case 103: /* uexpr ::= MINUS uexpr */ yytestcase(yyruleno==103);
      case 104: /* uexpr ::= NOT uexpr */ yytestcase(yyruleno==104);
      case 105: /* uexpr ::= AND uexpr */ yytestcase(yyruleno==105);
      case 106: /* uexpr ::= TIMES uexpr */ yytestcase(yyruleno==106);
      case 107: /* uexpr ::= XOR uexpr */ yytestcase(yyruleno==107);
      case 142: /* ty_uexpr ::= PLUS uexpr */ yytestcase(yyruleno==142);
      case 143: /* ty_uexpr ::= MINUS uexpr */ yytestcase(yyruleno==143);
      case 144: /* ty_uexpr ::= NOT uexpr */ yytestcase(yyruleno==144);
      case 145: /* ty_uexpr ::= AND uexpr */ yytestcase(yyruleno==145);
      case 146: /* ty_uexpr ::= TIMES ty_uexpr */ yytestcase(yyruleno==146);
      case 147: /* ty_uexpr ::= XOR uexpr */ yytestcase(yyruleno==147);
#line 329 "parser.y"
{ yygotominor.yy184 = new unary_expr_t(yymsp[0].minor.yy184, yymsp[-1].minor.yy0); }
#line 2018 "parser.c"
        break;
      case 69: /* type ::= LSB expr RSB type */
      case 128: /* ty_pexpr ::= LSB expr RSB type */ yytestcase(yyruleno==128);
#line 330 "parser.y"
{ yygotominor.yy184 = new array_type_t(yymsp[-2].minor.yy184, yymsp[0].minor.yy184, yymsp[-3].minor.yy0, yymsp[-1].minor.yy0); }
#line 2024 "parser.c"
        break;
      case 70: /* type ::= LSB RSB type */
      case 129: /* ty_pexpr ::= LSB RSB type */ yytestcase(yyruleno==129);
#line 331 "parser.y"
{ yygotominor.yy184 = new array_type_t(0, yymsp[0].minor.yy184, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0); }
#line 2030 "parser.c"
        break;
      case 71: /* type ::= ident DOT ident */
#line 332 "parser.y"
{ yygotominor.yy184 = new selector_expr_t(yymsp[-2].minor.yy76, yymsp[0].minor.yy76);   yy_destructor(yypParser,60,&yymsp[-1].minor);
}
#line 2036 "parser.c"
        break;
      case 72: /* type ::= ident */
      case 94: /* pexpr ::= ident */ yytestcase(yyruleno==94);
      case 131: /* ty_pexpr ::= ident */ yytestcase(yyruleno==131);
#line 333 "parser.y"
{ yygotominor.yy184 = yymsp[0].minor.yy76; }
#line 2043 "parser.c"
        break;
      case 73: /* type ::= STRUCT LCURLY ofield_semi_list_and_osemi RCURLY */
      case 74: /* type ::= UNION LCURLY ofield_semi_list_and_osemi RCURLY */ yytestcase(yyruleno==74);
#line 334 "parser.y"
{
	yygotominor.yy184 = new struct_type_t(yymsp[-1].minor.yy84, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);	
}
#line 2051 "parser.c"
        break;
      case 75: /* type ::= FUNC LPAREN oargs_comma_list RPAREN func_results */
      case 140: /* ty_pexpr ::= FUNC LPAREN oargs_comma_list RPAREN func_results */ yytestcase(yyruleno==140);
#line 340 "parser.y"
{
	yygotominor.yy184 = new func_type_t(yymsp[-2].minor.yy84, yymsp[0].minor.yy84, yymsp[-4].minor.yy0);
  yy_destructor(yypParser,50,&yymsp[-3].minor);
  yy_destructor(yypParser,51,&yymsp[-1].minor);
}
#line 2061 "parser.c"
        break;
      case 76: /* field_comma_list ::= nametype_list */
#line 355 "parser.y"
{
	yygotominor.yy84 = nametypev_to_fieldv(ctx->diag, yymsp[0].minor.yy135, false);
}
#line 2068 "parser.c"
        break;
      case 77: /* args_comma_list ::= nametype_list ofunc_ellipsis */
#line 360 "parser.y"
{
	yygotominor.yy84 = nametypev_to_fieldv(ctx->diag, yymsp[-1].minor.yy135, yymsp[0].minor.yy185);
}
#line 2075 "parser.c"
        break;
      case 78: /* args_comma_list ::= ELLIPSIS */
#line 363 "parser.y"
{
	yygotominor.yy84 = nametypev_to_fieldv(ctx->diag, new nametype_vector_t, true);
  yy_destructor(yypParser,63,&yymsp[0].minor);
}
#line 2083 "parser.c"
        break;
      case 79: /* field_semi_list ::= field */
#line 368 "parser.y"
{ yygotominor.yy84 = new field_vector_t(1, yymsp[0].minor.yy158); }
#line 2088 "parser.c"
        break;
      case 80: /* field_semi_list ::= field_semi_list SEMICOLON field */
#line 369 "parser.y"
{
	yymsp[-2].minor.yy84->push_back(yymsp[0].minor.yy158); yygotominor.yy84 = yymsp[-2].minor.yy84;
  yy_destructor(yypParser,20,&yymsp[-1].minor);
}
#line 2096 "parser.c"
        break;
      case 81: /* nametype_list ::= nametype */
#line 375 "parser.y"
{ yygotominor.yy135 = new nametype_vector_t(1, yymsp[0].minor.yy115); }
#line 2101 "parser.c"
        break;
      case 82: /* nametype_list ::= nametype_list COMMA nametype */
#line 376 "parser.y"
{
	yymsp[-2].minor.yy135->push_back(yymsp[0].minor.yy115); yygotominor.yy135 = yymsp[-2].minor.yy135;
  yy_destructor(yypParser,64,&yymsp[-1].minor);
}
#line 2109 "parser.c"
        break;
      case 83: /* nametype ::= ident type */
#line 381 "parser.y"
{ yygotominor.yy115.name = yymsp[-1].minor.yy76; yygotominor.yy115.type = yymsp[0].minor.yy184; }
#line 2114 "parser.c"
        break;
      case 84: /* nametype ::= type */
#line 382 "parser.y"
{ yygotominor.yy115.name = 0; yygotominor.yy115.type = yymsp[0].minor.yy184; }
#line 2119 "parser.c"
        break;
      case 85: /* ofunc_ellipsis ::= COMMA ELLIPSIS */
#line 392 "parser.y"
{ yygotominor.yy185 = true;   yy_destructor(yypParser,64,&yymsp[-1].minor);
  yy_destructor(yypParser,63,&yymsp[0].minor);
}
#line 2126 "parser.c"
        break;
      case 86: /* ofunc_ellipsis ::= */
#line 393 "parser.y"
{ yygotominor.yy185 = false; }
#line 2131 "parser.c"
        break;
      case 87: /* field ::= ident_list type */
#line 406 "parser.y"
{ yygotominor.yy158 = new field_t(yymsp[-1].minor.yy154, yymsp[0].minor.yy184); }
#line 2136 "parser.c"
        break;
      case 88: /* field ::= type */
#line 407 "parser.y"
{ yygotominor.yy158 = new field_t(0, yymsp[0].minor.yy184); }
#line 2141 "parser.c"
        break;
      case 89: /* basic_lit ::= INT */
      case 90: /* basic_lit ::= FLOAT */ yytestcase(yyruleno==90);
      case 91: /* basic_lit ::= STRING */ yytestcase(yyruleno==91);
      case 92: /* basic_lit ::= CHAR */ yytestcase(yyruleno==92);
#line 418 "parser.y"
{ yygotominor.yy18 = new basic_lit_expr_t(yymsp[0].minor.yy0); }
#line 2149 "parser.c"
        break;
      case 93: /* pexpr ::= basic_lit */
      case 130: /* ty_pexpr ::= basic_lit */ yytestcase(yyruleno==130);
#line 434 "parser.y"
{ yygotominor.yy184 = yymsp[0].minor.yy18; }
#line 2155 "parser.c"
        break;
      case 95: /* pexpr ::= LPAREN expr RPAREN */
      case 132: /* ty_pexpr ::= LPAREN expr RPAREN */ yytestcase(yyruleno==132);
#line 436 "parser.y"
{ yygotominor.yy184 = new paren_expr_t(yymsp[-1].minor.yy184, yymsp[-2].minor.yy0, yymsp[0].minor.yy0); }
#line 2161 "parser.c"
        break;
      case 96: /* pexpr ::= pexpr LSB expr RSB */
      case 133: /* ty_pexpr ::= pexpr LSB expr RSB */ yytestcase(yyruleno==133);
#line 437 "parser.y"
{ yygotominor.yy184 = new index_expr_t(yymsp[-3].minor.yy184, yymsp[-1].minor.yy184, yymsp[-2].minor.yy0, yymsp[0].minor.yy0); }
#line 2167 "parser.c"
        break;
      case 97: /* pexpr ::= pexpr DOT IDENT */
      case 134: /* ty_pexpr ::= pexpr DOT IDENT */ yytestcase(yyruleno==134);
#line 440 "parser.y"
{
	yygotominor.yy184 = new selector_expr_t(yymsp[-2].minor.yy184, new ident_expr_t(yymsp[0].minor.yy0));
  yy_destructor(yypParser,60,&yymsp[-1].minor);
}
#line 2176 "parser.c"
        break;
      case 98: /* pexpr ::= pexpr DOT LPAREN type RPAREN */
      case 135: /* ty_pexpr ::= pexpr DOT LPAREN type RPAREN */ yytestcase(yyruleno==135);
#line 445 "parser.y"
{
	yygotominor.yy184 = new type_cast_expr_t(yymsp[-4].minor.yy184, yymsp[-1].minor.yy184, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);
}
#line 2184 "parser.c"
        break;
      case 99: /* pexpr ::= pexpr LPAREN RPAREN */
      case 136: /* ty_pexpr ::= pexpr LPAREN RPAREN */ yytestcase(yyruleno==136);
#line 451 "parser.y"
{ yygotominor.yy184 = new call_expr_t(yymsp[-2].minor.yy184, 0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
#line 2190 "parser.c"
        break;
      case 100: /* pexpr ::= pexpr LPAREN iexpr_list RPAREN */
      case 137: /* ty_pexpr ::= pexpr LPAREN iexpr_list RPAREN */ yytestcase(yyruleno==137);
#line 454 "parser.y"
{
	yygotominor.yy184 = new call_expr_t(yymsp[-3].minor.yy184, yymsp[-1].minor.yy6, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);
}
#line 2198 "parser.c"
        break;
      case 109: /* expr ::= expr DIVIDE expr */
      case 110: /* expr ::= expr TIMES expr */ yytestcase(yyruleno==110);
      case 111: /* expr ::= expr MOD expr */ yytestcase(yyruleno==111);
      case 112: /* expr ::= expr SHIFTL expr */ yytestcase(yyruleno==112);
      case 113: /* expr ::= expr SHIFTR expr */ yytestcase(yyruleno==113);
      case 114: /* expr ::= expr AND expr */ yytestcase(yyruleno==114);
      case 115: /* expr ::= expr ANDNOT expr */ yytestcase(yyruleno==115);
      case 116: /* expr ::= expr PLUS expr */ yytestcase(yyruleno==116);
      case 117: /* expr ::= expr MINUS expr */ yytestcase(yyruleno==117);
      case 118: /* expr ::= expr OR expr */ yytestcase(yyruleno==118);
      case 119: /* expr ::= expr XOR expr */ yytestcase(yyruleno==119);
      case 120: /* expr ::= expr EQ expr */ yytestcase(yyruleno==120);
      case 121: /* expr ::= expr NEQ expr */ yytestcase(yyruleno==121);
      case 122: /* expr ::= expr LT expr */ yytestcase(yyruleno==122);
      case 123: /* expr ::= expr LE expr */ yytestcase(yyruleno==123);
      case 124: /* expr ::= expr GT expr */ yytestcase(yyruleno==124);
      case 125: /* expr ::= expr GE expr */ yytestcase(yyruleno==125);
      case 126: /* expr ::= expr ANDAND expr */ yytestcase(yyruleno==126);
      case 127: /* expr ::= expr OROR expr */ yytestcase(yyruleno==127);
      case 149: /* ty_expr ::= expr DIVIDE expr */ yytestcase(yyruleno==149);
      case 150: /* ty_expr ::= expr TIMES expr */ yytestcase(yyruleno==150);
      case 151: /* ty_expr ::= expr MOD expr */ yytestcase(yyruleno==151);
      case 152: /* ty_expr ::= expr SHIFTL expr */ yytestcase(yyruleno==152);
      case 153: /* ty_expr ::= expr SHIFTR expr */ yytestcase(yyruleno==153);
      case 154: /* ty_expr ::= expr AND expr */ yytestcase(yyruleno==154);
      case 155: /* ty_expr ::= expr ANDNOT expr */ yytestcase(yyruleno==155);
      case 156: /* ty_expr ::= expr PLUS expr */ yytestcase(yyruleno==156);
      case 157: /* ty_expr ::= expr MINUS expr */ yytestcase(yyruleno==157);
      case 158: /* ty_expr ::= expr OR expr */ yytestcase(yyruleno==158);
      case 159: /* ty_expr ::= expr XOR expr */ yytestcase(yyruleno==159);
      case 160: /* ty_expr ::= expr EQ expr */ yytestcase(yyruleno==160);
      case 161: /* ty_expr ::= expr NEQ expr */ yytestcase(yyruleno==161);
      case 162: /* ty_expr ::= expr LT expr */ yytestcase(yyruleno==162);
      case 163: /* ty_expr ::= expr LE expr */ yytestcase(yyruleno==163);
      case 164: /* ty_expr ::= expr GT expr */ yytestcase(yyruleno==164);
      case 165: /* ty_expr ::= expr GE expr */ yytestcase(yyruleno==165);
      case 166: /* ty_expr ::= expr ANDAND expr */ yytestcase(yyruleno==166);
      case 167: /* ty_expr ::= expr OROR expr */ yytestcase(yyruleno==167);
#line 487 "parser.y"
{ yygotominor.yy184 = new binary_expr_t(yymsp[-2].minor.yy184, yymsp[0].minor.yy184, yymsp[-1].minor.yy0); }
#line 2240 "parser.c"
        break;
      case 138: /* ty_pexpr ::= STRUCT LCURLY ofield_semi_list_and_osemi RCURLY */
      case 139: /* ty_pexpr ::= UNION LCURLY ofield_semi_list_and_osemi RCURLY */ yytestcase(yyruleno==139);
#line 543 "parser.y"
{
	yygotominor.yy184 = new struct_type_t(yymsp[-1].minor.yy84, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);
}
#line 2248 "parser.c"
        break;
      case 168: /* compound_lit ::= LCURLY iexpr_list ocomma RCURLY */
#line 595 "parser.y"
{
	yygotominor.yy184 = new compound_lit_t(yymsp[-2].minor.yy6, 0, yymsp[-3].minor.yy0, yymsp[0].minor.yy0);
}
#line 2255 "parser.c"
        break;
      case 169: /* compound_lit ::= LCURLY iexpr_list ocomma RCURLY DOT LPAREN type RPAREN */
#line 598 "parser.y"
{
	yygotominor.yy184 = new compound_lit_t(yymsp[-6].minor.yy6, yymsp[-1].minor.yy184, yymsp[-7].minor.yy0, yymsp[0].minor.yy0);
  yy_destructor(yypParser,45,&yymsp[-4].minor);
  yy_destructor(yypParser,60,&yymsp[-3].minor);
  yy_destructor(yypParser,50,&yymsp[-2].minor);
}
#line 2265 "parser.c"
        break;
      case 173: /* iexpr_list ::= iexpr_list COMMA iexpr */
      case 175: /* expr_list ::= expr_list COMMA expr */ yytestcase(yyruleno==175);
#line 617 "parser.y"
{ yymsp[-2].minor.yy6->push_back(yymsp[0].minor.yy184); yygotominor.yy6 = yymsp[-2].minor.yy6;   yy_destructor(yypParser,64,&yymsp[-1].minor);
}
#line 2272 "parser.c"
        break;
      case 177: /* osemi ::= SEMICOLON */
#line 632 "parser.y"
{
  yy_destructor(yypParser,20,&yymsp[0].minor);
}
#line 2279 "parser.c"
        break;
      case 179: /* ocomma ::= COMMA */
#line 636 "parser.y"
{
  yy_destructor(yypParser,64,&yymsp[0].minor);
}
#line 2286 "parser.c"
        break;
      case 180: /* oexpr ::= */
      case 182: /* otype ::= */ yytestcase(yyruleno==182);
#line 640 "parser.y"
{ yygotominor.yy184 = 0; }
#line 2292 "parser.c"
        break;
      case 184: /* ident ::= IDENT */
#line 655 "parser.y"
{ yygotominor.yy76 = new ident_expr_t(yymsp[0].minor.yy0); }
#line 2297 "parser.c"
        break;
      case 185: /* ident_list ::= ident */
#line 659 "parser.y"
{ yygotominor.yy154 = new ident_expr_vector_t(1, yymsp[0].minor.yy76); }
#line 2302 "parser.c"
        break;
      case 186: /* ident_list ::= ident_list COMMA ident */
#line 660 "parser.y"
{ yymsp[-2].minor.yy154->push_back(yymsp[0].minor.yy76); yygotominor.yy154 = yymsp[-2].minor.yy154;   yy_destructor(yypParser,64,&yymsp[-1].minor);
}
#line 2308 "parser.c"
        break;
      case 188: /* oargs_comma_list ::= args_comma_list */
#line 665 "parser.y"
{ yygotominor.yy84 = yymsp[0].minor.yy84; }
#line 2313 "parser.c"
        break;
      case 190: /* ofield_semi_list_and_osemi ::= field_semi_list osemi */
#line 670 "parser.y"
{ yygotominor.yy84 = yymsp[-1].minor.yy84; }
#line 2318 "parser.c"
        break;
      default:
      /* (176) osemi ::= */ yytestcase(yyruleno==176);
      /* (178) ocomma ::= */ yytestcase(yyruleno==178);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 21 "parser.y"

	message_t *m;
	m = new_message(MESSAGE_ERROR,
			ctx->last_pos, true, 0, 0,
			"unexpected token: %s",
			token_to_string(ctx->last_token));
	ctx->diag->report(m);
#line 2390 "parser.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
