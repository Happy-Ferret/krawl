/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 10 "parser.y"

	#include "krawl.hpp"
	#include <stdlib.h>
	#include <stdio.h>
	#include <assert.h>
#line 14 "parser.c"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    ParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 119
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE  token_t* 
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  type_spec_t* yy2;
  switch_stmt_case_t* yy42;
  type_spec_vector_t* yy44;
  field_vector_t* yy60;
  ident_expr_t* yy72;
  block_stmt_t* yy80;
  bool yy89;
  attributes_t* yy97;
  nametype_t yy99;
  attribute_vector_t* yy120;
  basic_lit_expr_t* yy122;
  program_t* yy134;
  value_spec_vector_t* yy135;
  value_spec_t* yy141;
  attribute_t* yy142;
  import_spec_vector_t* yy157;
  field_t* yy174;
  node_vector_t* yy178;
  ident_expr_vector_t* yy182;
  node_t* yy208;
  import_spec_t* yy219;
  nametype_vector_t* yy227;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL  parser_t *ctx ;
#define ParseARG_PDECL , parser_t *ctx 
#define ParseARG_FETCH  parser_t *ctx  = yypParser->ctx 
#define ParseARG_STORE yypParser->ctx  = ctx 
#define YYNSTATE 386
#define YYNRULE 202
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   123,  293,  278,  218,   86,   87,  293,   91,  110,   90,
 /*    10 */   279,  300,  229,   89,  217,  293,  230,  313,  314,  315,
 /*    20 */   316,  301,   82,   49,   50,   51,   52,   40,   42,   44,
 /*    30 */    45,   46,   47,   48,   30,  123,  268,  369,  370,  371,
 /*    40 */    23,   83,   98,   26,   84,    1,  383,  285,  134,    2,
 /*    50 */   159,   41,  143,  131,  107,  108,  146,  123,  129,  381,
 /*    60 */   112,   86,   87,   88,   91,  185,   90,  113,  110,  373,
 /*    70 */    89,  300,  293,  293,  313,  314,  315,  316,  376,  184,
 /*    80 */   211,  299,  327,  340,  342,  344,  345,  346,  131,  107,
 /*    90 */   108,  146,  275,  212,  369,  370,  371,   23,   83,  265,
 /*   100 */    26,   84,    1,  222,  378,  302,  297,  396,   41,   85,
 /*   110 */   131,  107,  108,  146,  227,   38,  293,  220,  223,  225,
 /*   120 */    88,  284,   60,   59,   53,   54,   55,   56,   57,   58,
 /*   130 */    49,   50,   51,   52,   40,   42,   44,   45,   46,   47,
 /*   140 */    48,  222,   86,   87,  296,   91,  277,   90,  400,  185,
 /*   150 */   469,   89,   99,  293,  280,  313,  314,  315,  316,  353,
 /*   160 */   135,  364,  365,  184,  211,  133,  325,  340,  341,  282,
 /*   170 */   153,  400,  400,  400,  469,  400,  222,  123,  339,  297,
 /*   180 */   286,   86,   87,    1,   91,  318,   90,  137,  105,   41,
 /*   190 */    89,  354,  293,  358,  313,  314,  315,  316,  103,  317,
 /*   200 */   210,   88,  327,  216,  278,  218,  148,  362,  366,  152,
 /*   210 */   177,  276,  367,  368,  369,  370,  371,   23,   83,  113,
 /*   220 */    26,   84,    1,  222,  318,  293,  357,  130,   41,  246,
 /*   230 */   131,  107,  108,  146,  123,  219,  136,  221,  317,  210,
 /*   240 */    88,  327,   60,   59,   53,   54,   55,   56,   57,   58,
 /*   250 */    49,   50,   51,   52,   40,   42,   44,   45,   46,   47,
 /*   260 */    48,  288,  359,  144,  358,  101,  227,   38,  400,  103,
 /*   270 */   223,  225,  305,   40,   42,   44,   45,   46,   47,   48,
 /*   280 */   222,  364,  365,  309,  396,  292,  113,  131,  107,  108,
 /*   290 */   146,    1,  293,   60,   59,   53,   54,   55,   56,   57,
 /*   300 */    58,   49,   50,   51,   52,   40,   42,   44,   45,   46,
 /*   310 */    47,   48,   60,   59,   53,   54,   55,   56,   57,   58,
 /*   320 */    49,   50,   51,   52,   40,   42,   44,   45,   46,   47,
 /*   330 */    48,  303,   97,  227,   38,  312,   10,  223,  225,  304,
 /*   340 */   310,   82,    1,   11,   12,   13,   14,   15,   16,   17,
 /*   350 */    18,   19,   20,   21,   22,  274,   24,  270,  271,  272,
 /*   360 */   273,  122,  233,   60,   59,   53,   54,   55,   56,   57,
 /*   370 */    58,   49,   50,   51,   52,   40,   42,   44,   45,   46,
 /*   380 */    47,   48,   60,   59,   53,   54,   55,   56,   57,   58,
 /*   390 */    49,   50,   51,   52,   40,   42,   44,   45,   46,   47,
 /*   400 */    48,   60,   59,   53,   54,   55,   56,   57,   58,   49,
 /*   410 */    50,   51,   52,   40,   42,   44,   45,   46,   47,   48,
 /*   420 */   110,  228,  318,  300,  222,  114,  147,  297,  138,  306,
 /*   430 */   240,  377,   30,  301,  268,  244,  317,  210,  319,  321,
 /*   440 */    60,   59,   53,   54,   55,   56,   57,   58,   49,   50,
 /*   450 */    51,   52,   40,   42,   44,   45,   46,   47,   48,  222,
 /*   460 */   109,  222,  289,  320,  290,   60,   59,   53,   54,   55,
 /*   470 */    56,   57,   58,   49,   50,   51,   52,   40,   42,   44,
 /*   480 */    45,   46,   47,   48,  110,  239,  245,  300,  359,  145,
 /*   490 */   358,  222,  138,  306,  291,  103,  186,  301,   60,   59,
 /*   500 */    53,   54,   55,   56,   57,   58,   49,   50,   51,   52,
 /*   510 */    40,   42,   44,   45,   46,   47,   48,  360,  356,  358,
 /*   520 */   358,  248,  220,  112,  103,  103,  284,  187,    1,   81,
 /*   530 */    80,   74,   75,   76,   77,   78,   79,   70,   71,   72,
 /*   540 */    73,   63,   64,   65,   66,   67,   68,   69,  110,  250,
 /*   550 */   222,  300,  222,  231,  249,  232,  138,  306,  121,  124,
 /*   560 */   117,  301,  517,  517,  517,  517,  517,  517,  517,  517,
 /*   570 */    49,   50,   51,   52,   40,   42,   44,   45,   46,   47,
 /*   580 */    48,  518,  518,  518,  518,  518,  518,  518,  518,   49,
 /*   590 */    50,   51,   52,   40,   42,   44,   45,   46,   47,   48,
 /*   600 */   519,  519,  519,  519,  519,  519,  519,  519,   49,   50,
 /*   610 */    51,   52,   40,   42,   44,   45,   46,   47,   48,  520,
 /*   620 */   520,  520,  520,  520,  520,  520,  520,   49,   50,   51,
 /*   630 */    52,   40,   42,   44,   45,   46,   47,   48,  521,  521,
 /*   640 */   521,  521,  521,  521,  521,  521,   49,   50,   51,   52,
 /*   650 */    40,   42,   44,   45,   46,   47,   48,  522,  522,  522,
 /*   660 */   522,  522,  522,  522,  522,   49,   50,   51,   52,   40,
 /*   670 */    42,   44,   45,   46,   47,   48,  523,  523,   53,   54,
 /*   680 */    55,   56,   57,   58,   49,   50,   51,   52,   40,   42,
 /*   690 */    44,   45,   46,   47,   48,  524,   59,   53,   54,   55,
 /*   700 */    56,   57,   58,   49,   50,   51,   52,   40,   42,   44,
 /*   710 */    45,   46,   47,   48,   60,   59,   53,   54,   55,   56,
 /*   720 */    57,   58,   49,   50,   51,   52,   40,   42,   44,   45,
 /*   730 */    46,   47,   48,   92,   93,  384,   96,  222,   28,  269,
 /*   740 */   335,  158,   95,    4,  293,  318,  313,  314,  315,  316,
 /*   750 */   374,  333,   92,   93,  379,   96,  318,   28,  380,  317,
 /*   760 */   210,   95,  322,  293,  386,  313,  314,  315,  316,  208,
 /*   770 */   317,  210,  209,  327,    8,  311,  128,  111,  283,  224,
 /*   780 */    61,  348,  281,  139,  307,  238,   39,  115,  294,  234,
 /*   790 */   236,  209,   94,    8,  311,  287,  111,  137,  226,   61,
 /*   800 */   190,   34,  139,  307,  238,   39,  188,  222,  234,  236,
 /*   810 */   336,   94,   59,   53,   54,   55,   56,   57,   58,   49,
 /*   820 */    50,   51,   52,   40,   42,   44,   45,   46,   47,   48,
 /*   830 */    92,   93,    6,   96,  222,   28,  295,  243,   43,   95,
 /*   840 */   213,  293,  116,  313,  314,  315,  316,   53,   54,   55,
 /*   850 */    56,   57,   58,   49,   50,   51,   52,   40,   42,   44,
 /*   860 */    45,   46,   47,   48,  222,   92,   93,  352,   96,   35,
 /*   870 */    28,    8,   31,  106,   95,  351,  293,   61,  313,  314,
 /*   880 */   315,  316,  238,   39,  553,    7,  234,  236,  100,   94,
 /*   890 */   318,   62,  298,  214,  334,  189,  191,   40,   42,   44,
 /*   900 */    45,   46,   47,   48,  317,  210,  337,  327,   36,   32,
 /*   910 */   553,  553,   61,  554,   37,  242,  338,  238,   39,  102,
 /*   920 */   241,  234,  236,  119,   94,  343,   40,   42,   44,   45,
 /*   930 */    46,   47,   48,  555,  553,  553,  553,  349,  553,  554,
 /*   940 */   554,  553,    9,  355,   25,  361,   40,   42,   44,   45,
 /*   950 */    46,   47,   48,   33,  318,    5,  104,   29,   27,  555,
 /*   960 */   555,  382,    3,  554,  554,  554,  590,  554,  317,  210,
 /*   970 */   554,  323,  590,  278,  218,  150,  362,  366,  152,  177,
 /*   980 */   318,  367,  368,  555,  555,  555,  556,  555,  590,  590,
 /*   990 */   555,  590,  590,  318,  317,  210,  590,  324,  590,   40,
 /*  1000 */    42,   44,   45,   46,   47,   48,  590,  317,  210,  590,
 /*  1010 */   327,  590,  556,  556,  278,  218,  151,  362,  366,  152,
 /*  1020 */   177,  590,  367,  368,  590,  590,  590,  318,  590,  590,
 /*  1030 */   266,  125,  177,  590,  318,  375,  556,  556,  556,  590,
 /*  1040 */   556,  317,  210,  556,  325,  590,  318,  590,  317,  210,
 /*  1050 */   590,  327,  527,   86,   87,  590,   91,  590,   90,  590,
 /*  1060 */   317,  210,   89,  327,  293,  590,  313,  314,  315,  316,
 /*  1070 */   590,  590,   86,   87,  590,   91,  590,   90,  527,  527,
 /*  1080 */   590,   89,  590,  293,  590,  313,  314,  315,  316,  590,
 /*  1090 */   278,  218,  590,  363,  366,  152,  177,  590,  367,  368,
 /*  1100 */    41,  590,  527,  527,  527,  590,  527,  120,  590,  527,
 /*  1110 */   318,  209,   88,  590,  311,  590,  111,  590,  235,   41,
 /*  1120 */   590,  590,  139,  307,  317,  210,  118,  327,  590,  278,
 /*  1130 */   218,   88,  372,  366,  152,  177,  590,  367,  368,   86,
 /*  1140 */    87,  169,   91,  590,   90,  159,  267,  141,   89,  318,
 /*  1150 */   293,  590,  313,  314,  315,  316,  318,  590,  590,  590,
 /*  1160 */   185,  590,  590,  317,  210,  590,  327,  590,  590,  590,
 /*  1170 */   317,  210,  590,  327,  184,  211,  590,  327,  340,  342,
 /*  1180 */   344,  345,  346,  590,  209,  590,   41,  311,  159,  111,
 /*  1190 */   142,  237,  318,  590,  590,  139,  307,  590,   88,  590,
 /*  1200 */   159,  590,  247,  185,  590,  590,  317,  210,  590,  326,
 /*  1210 */   590,  159,  590,  251,  590,  185,  590,  184,  211,  590,
 /*  1220 */   327,  340,  342,  344,  345,  346,  185,  590,  590,  184,
 /*  1230 */   211,  590,  327,  340,  342,  344,  345,  346,  590,  590,
 /*  1240 */   184,  211,  590,  327,  340,  342,  344,  345,  346,  590,
 /*  1250 */   590,  590,  590,  589,  132,  159,  590,  252,  278,  218,
 /*  1260 */   318,  590,  590,  590,  590,  590,  385,  159,  590,  253,
 /*  1270 */   185,  590,  590,  590,  317,  210,  590,  192,  590,  159,
 /*  1280 */   590,  254,  185,  590,  184,  211,  590,  327,  340,  342,
 /*  1290 */   344,  345,  346,  590,  185,  590,  184,  211,  590,  327,
 /*  1300 */   340,  342,  344,  345,  346,  159,  590,  255,  184,  211,
 /*  1310 */   590,  327,  340,  342,  344,  345,  346,  159,  590,  256,
 /*  1320 */   185,  209,  590,  590,  311,  590,  111,  590,  159,  590,
 /*  1330 */   257,  590,  185,  308,  184,  211,  590,  327,  340,  342,
 /*  1340 */   344,  345,  346,  185,  590,  590,  184,  211,  590,  327,
 /*  1350 */   340,  342,  344,  345,  346,  318,  590,  184,  211,  590,
 /*  1360 */   327,  340,  342,  344,  345,  346,  159,  590,  258,  317,
 /*  1370 */   210,  590,  193,  590,  590,  159,  590,  259,  590,  113,
 /*  1380 */   590,  185,  590,  590,  590,  293,  590,  590,  590,  590,
 /*  1390 */   185,  140,  590,  590,  590,  184,  211,  590,  327,  340,
 /*  1400 */   342,  344,  345,  346,  184,  211,  590,  327,  340,  342,
 /*  1410 */   344,  345,  346,  159,  590,  260,  590,  590,  590,  590,
 /*  1420 */   590,  590,  159,  590,  261,  590,  227,   38,  185,  590,
 /*  1430 */   223,  225,  590,  590,  590,  590,  590,  185,  159,  590,
 /*  1440 */   262,  590,  184,  211,  590,  327,  340,  342,  344,  345,
 /*  1450 */   346,  184,  211,  185,  327,  340,  342,  344,  345,  346,
 /*  1460 */   113,  590,  159,  590,  263,  318,  293,  184,  211,  590,
 /*  1470 */   327,  340,  342,  344,  345,  346,  528,  185,  590,  317,
 /*  1480 */   210,  590,  194,  590,  590,  159,  590,  264,  590,  590,
 /*  1490 */   590,  184,  211,  590,  327,  340,  342,  344,  345,  346,
 /*  1500 */   185,  590,  528,  528,  590,  590,  590,  227,   38,  159,
 /*  1510 */   529,  223,  225,  590,  184,  211,  590,  327,  340,  342,
 /*  1520 */   344,  345,  346,  530,  185,  590,  528,  528,  528,  590,
 /*  1530 */   528,  531,  590,  528,  590,  590,  529,  529,  184,  211,
 /*  1540 */   154,  327,  340,  342,  344,  345,  347,  590,  113,  530,
 /*  1550 */   530,  318,  590,  590,  293,  318,  590,  531,  531,  590,
 /*  1560 */   529,  529,  529,  532,  529,  317,  210,  529,  195,  317,
 /*  1570 */   210,  590,  327,  530,  530,  530,  533,  530,  590,  590,
 /*  1580 */   530,  531,  531,  531,  534,  531,  590,  590,  531,  532,
 /*  1590 */   532,  318,  350,  590,  590,  227,   38,  590,  137,  223,
 /*  1600 */   225,  590,  533,  533,  590,  317,  210,  318,  196,  590,
 /*  1610 */   534,  534,  590,  532,  532,  532,  539,  532,  590,  590,
 /*  1620 */   532,  317,  210,  590,  327,  590,  533,  533,  533,  540,
 /*  1630 */   533,  590,  590,  533,  534,  534,  534,  541,  534,  590,
 /*  1640 */   590,  534,  539,  539,  149,  152,  177,  590,  590,  590,
 /*  1650 */   590,  590,  590,  590,  590,  540,  540,  590,  590,  590,
 /*  1660 */   318,  590,  590,  541,  541,  590,  539,  539,  539,  542,
 /*  1670 */   539,  590,  590,  539,  317,  210,  590,  327,  590,  540,
 /*  1680 */   540,  540,  544,  540,  590,  590,  540,  541,  541,  541,
 /*  1690 */   546,  541,  590,  590,  541,  542,  542,  590,  170,  215,
 /*  1700 */   590,  590,  590,  590,  590,  590,  590,  590,  544,  544,
 /*  1710 */   590,  590,  590,  318,  590,  590,  546,  546,  590,  542,
 /*  1720 */   542,  542,  547,  542,  590,  590,  542,  317,  210,  590,
 /*  1730 */   327,  590,  544,  544,  544,  548,  544,  590,  590,  544,
 /*  1740 */   546,  546,  546,  549,  546,  590,  590,  546,  547,  547,
 /*  1750 */   590,  155,  590,  590,  590,  590,  590,  590,  590,  590,
 /*  1760 */   590,  548,  548,  590,  590,  590,  318,  590,  590,  549,
 /*  1770 */   549,  590,  547,  547,  547,  550,  547,  590,  590,  547,
 /*  1780 */   317,  210,  590,  327,  590,  548,  548,  548,  551,  548,
 /*  1790 */   590,  590,  548,  549,  549,  549,  552,  549,  590,  590,
 /*  1800 */   549,  550,  550,  590,  328,  590,  590,  590,  590,  590,
 /*  1810 */   590,  590,  590,  590,  551,  551,  590,  590,  590,  318,
 /*  1820 */   590,  590,  552,  552,  590,  550,  550,  550,  329,  550,
 /*  1830 */   590,  590,  550,  317,  210,  590,  327,  590,  551,  551,
 /*  1840 */   551,  590,  551,  318,  590,  551,  552,  552,  552,  590,
 /*  1850 */   552,  330,  590,  552,  590,  590,  331,  317,  210,  590,
 /*  1860 */   327,  332,  590,  590,  590,  590,  318,  204,  590,  590,
 /*  1870 */   590,  318,  590,  590,  205,  590,  318,  590,  590,  590,
 /*  1880 */   317,  210,  318,  327,  590,  317,  210,  590,  327,  318,
 /*  1890 */   317,  210,  590,  327,  590,  206,  317,  210,  590,  327,
 /*  1900 */   207,  590,  590,  317,  210,  590,  327,  178,  590,  590,
 /*  1910 */   318,  590,  590,  179,  590,  318,  590,  590,  590,  180,
 /*  1920 */   590,  590,  318,  181,  317,  210,  590,  327,  318,  317,
 /*  1930 */   210,  182,  327,  590,  318,  590,  317,  210,  318,  327,
 /*  1940 */   590,  183,  317,  210,  590,  327,  318,  172,  317,  210,
 /*  1950 */   590,  327,  317,  210,  590,  327,  318,  171,  590,  590,
 /*  1960 */   317,  210,  318,  327,  590,  590,  156,  590,  590,  590,
 /*  1970 */   317,  210,  318,  327,  590,  590,  317,  210,  157,  327,
 /*  1980 */   590,  318,  590,  590,  197,  590,  317,  210,  198,  327,
 /*  1990 */   590,  590,  590,  318,  199,  317,  210,  590,  327,  318,
 /*  2000 */   200,  590,  590,  318,  201,  590,  590,  317,  210,  318,
 /*  2010 */   327,  590,  202,  317,  210,  318,  327,  317,  210,  318,
 /*  2020 */   327,  590,  203,  317,  210,  590,  327,  318,  173,  317,
 /*  2030 */   210,  590,  327,  317,  210,  590,  327,  318,  174,  590,
 /*  2040 */   590,  317,  210,  318,  327,  590,  590,  175,  590,  590,
 /*  2050 */   590,  317,  210,  318,  327,  590,  590,  317,  210,  176,
 /*  2060 */   327,  590,  318,  590,  590,  160,  590,  317,  210,  161,
 /*  2070 */   327,  590,  590,  590,  318,  162,  317,  210,  590,  327,
 /*  2080 */   318,  163,  590,  590,  318,  164,  590,  590,  317,  210,
 /*  2090 */   318,  327,  590,  165,  317,  210,  318,  327,  317,  210,
 /*  2100 */   318,  327,  590,  166,  317,  210,  590,  327,  318,  167,
 /*  2110 */   317,  210,  590,  327,  317,  210,  590,  327,  318,  168,
 /*  2120 */   590,  590,  317,  210,  318,  327,  590,  590,  126,  590,
 /*  2130 */   590,  590,  317,  210,  318,  327,  590,  590,  317,  210,
 /*  2140 */   127,  327,  590,  318,  590,  590,  590,  590,  317,  210,
 /*  2150 */   590,  327,  590,  590,  590,  318,  590,  317,  210,  590,
 /*  2160 */   327,  590,  590,  590,  590,  590,  590,  590,  590,  317,
 /*  2170 */   210,  590,  327,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     5,   20,   75,   76,    9,   10,   20,   12,   95,   14,
 /*    10 */    83,   98,   99,   18,   20,   20,  103,   22,   23,   24,
 /*    20 */    25,  108,   26,    9,   10,   11,   12,   13,   14,   15,
 /*    30 */    16,   17,   18,   19,   52,    5,   54,   42,   43,   44,
 /*    40 */    45,   46,   56,   48,   49,   50,   51,   89,   90,   53,
 /*    50 */    80,   56,   82,   58,   59,   60,   61,    5,   87,   88,
 /*    60 */    20,    9,   10,   68,   12,   95,   14,   14,   95,   84,
 /*    70 */    18,   98,   20,   20,   22,   23,   24,   25,   86,  109,
 /*    80 */   110,  108,  112,  113,  114,  115,  116,  117,   58,   59,
 /*    90 */    60,   61,   73,   74,   42,   43,   44,   45,   46,   84,
 /*   100 */    48,   49,   50,   95,   88,   97,   98,   55,   56,   56,
 /*   110 */    58,   59,   60,   61,   61,   62,   20,   20,   65,   66,
 /*   120 */    68,   24,    1,    2,    3,    4,    5,    6,    7,    8,
 /*   130 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   140 */    19,   95,    9,   10,   98,   12,    7,   14,   27,   95,
 /*   150 */    27,   18,   56,   20,   89,   22,   23,   24,   25,   91,
 /*   160 */    92,   40,   41,  109,  110,   26,  112,  113,  114,   89,
 /*   170 */    80,   50,   51,   52,   51,   54,   95,    5,   97,   98,
 /*   180 */    91,    9,   10,   50,   12,   95,   14,   64,   27,   56,
 /*   190 */    18,   93,   20,   95,   22,   23,   24,   25,  100,  109,
 /*   200 */   110,   68,  112,   72,   75,   76,   77,   78,   79,   80,
 /*   210 */    81,   73,   83,   84,   42,   43,   44,   45,   46,   14,
 /*   220 */    48,   49,   50,   95,   95,   20,   98,   27,   56,  101,
 /*   230 */    58,   59,   60,   61,    5,   72,   27,   72,  109,  110,
 /*   240 */    68,  112,    1,    2,    3,    4,    5,    6,    7,    8,
 /*   250 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   260 */    19,   91,   93,   94,   95,   26,   61,   62,   27,  100,
 /*   270 */    65,   66,   67,   13,   14,   15,   16,   17,   18,   19,
 /*   280 */    95,   40,   41,   98,   55,   95,   14,   58,   59,   60,
 /*   290 */    61,   50,   20,    1,    2,    3,    4,    5,    6,    7,
 /*   300 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   310 */    18,   19,    1,    2,    3,    4,    5,    6,    7,    8,
 /*   320 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   330 */    19,  105,   27,   61,   62,   72,   21,   65,   66,   67,
 /*   340 */    95,   26,   50,   28,   29,   30,   31,   32,   33,   34,
 /*   350 */    35,   36,   37,   38,   39,   20,   26,   22,   23,   24,
 /*   360 */    25,   50,  111,    1,    2,    3,    4,    5,    6,    7,
 /*   370 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   380 */    18,   19,    1,    2,    3,    4,    5,    6,    7,    8,
 /*   390 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   400 */    19,    1,    2,    3,    4,    5,    6,    7,    8,    9,
 /*   410 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   420 */    95,   96,   95,   98,   95,   63,   97,   98,  103,  104,
 /*   430 */   111,   51,   52,  108,   54,  111,  109,  110,   57,  112,
 /*   440 */     1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
 /*   450 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   95,
 /*   460 */    27,   95,   98,   63,   98,    1,    2,    3,    4,    5,
 /*   470 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   480 */    16,   17,   18,   19,   95,   96,   72,   98,   93,   94,
 /*   490 */    95,   95,  103,  104,   98,  100,   57,  108,    1,    2,
 /*   500 */     3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
 /*   510 */    13,   14,   15,   16,   17,   18,   19,   93,   93,   95,
 /*   520 */    95,   72,   20,   20,  100,  100,   24,   63,   50,    1,
 /*   530 */     2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
 /*   540 */    12,   13,   14,   15,   16,   17,   18,   19,   95,   96,
 /*   550 */    95,   98,   95,   98,   95,   98,  103,  104,   56,   56,
 /*   560 */    63,  108,    1,    2,    3,    4,    5,    6,    7,    8,
 /*   570 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   580 */    19,    1,    2,    3,    4,    5,    6,    7,    8,    9,
 /*   590 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   600 */     1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
 /*   610 */    11,   12,   13,   14,   15,   16,   17,   18,   19,    1,
 /*   620 */     2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
 /*   630 */    12,   13,   14,   15,   16,   17,   18,   19,    1,    2,
 /*   640 */     3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
 /*   650 */    13,   14,   15,   16,   17,   18,   19,    1,    2,    3,
 /*   660 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   670 */    14,   15,   16,   17,   18,   19,    1,    2,    3,    4,
 /*   680 */     5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   690 */    15,   16,   17,   18,   19,    1,    2,    3,    4,    5,
 /*   700 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   710 */    16,   17,   18,   19,    1,    2,    3,    4,    5,    6,
 /*   720 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*   730 */    17,   18,   19,    9,   10,   84,   12,   95,   14,   72,
 /*   740 */    98,   80,   18,   27,   20,   95,   22,   23,   24,   25,
 /*   750 */    84,   20,    9,   10,   72,   12,   95,   14,   72,  109,
 /*   760 */   110,   18,  112,   20,    0,   22,   23,   24,   25,   21,
 /*   770 */   109,  110,   95,  112,   50,   98,   55,  100,   24,  102,
 /*   780 */    56,   57,   57,  106,  107,   61,   62,   56,   51,   65,
 /*   790 */    66,   95,   68,   50,   98,   57,  100,   64,  102,   56,
 /*   800 */    57,   50,  106,  107,   61,   62,   20,   95,   65,   66,
 /*   810 */    98,   68,    2,    3,    4,    5,    6,    7,    8,    9,
 /*   820 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   830 */     9,   10,   56,   12,   95,   14,   51,   98,   62,   18,
 /*   840 */    64,   20,   56,   22,   23,   24,   25,    3,    4,    5,
 /*   850 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   860 */    16,   17,   18,   19,   95,    9,   10,   98,   12,   50,
 /*   870 */    14,   50,   56,   26,   18,   80,   20,   56,   22,   23,
 /*   880 */    24,   25,   61,   62,    0,   56,   65,   66,   57,   68,
 /*   890 */    95,   62,   57,   64,   57,   57,   57,   13,   14,   15,
 /*   900 */    16,   17,   18,   19,  109,  110,   51,  112,   50,   56,
 /*   910 */    26,   27,   56,    0,   50,   64,   51,   61,   62,   57,
 /*   920 */    51,   65,   66,   56,   68,   57,   13,   14,   15,   16,
 /*   930 */    17,   18,   19,    0,   50,   51,   52,   57,   54,   26,
 /*   940 */    27,   57,   21,   57,   26,   57,   13,   14,   15,   16,
 /*   950 */    17,   18,   19,   56,   95,   47,   57,   27,   27,   26,
 /*   960 */    27,   51,   53,   50,   51,   52,  118,   54,  109,  110,
 /*   970 */    57,  112,  118,   75,   76,   77,   78,   79,   80,   81,
 /*   980 */    95,   83,   84,   50,   51,   52,    0,   54,  118,  118,
 /*   990 */    57,  118,  118,   95,  109,  110,  118,  112,  118,   13,
 /*  1000 */    14,   15,   16,   17,   18,   19,  118,  109,  110,  118,
 /*  1010 */   112,  118,   26,   27,   75,   76,   77,   78,   79,   80,
 /*  1020 */    81,  118,   83,   84,  118,  118,  118,   95,  118,  118,
 /*  1030 */    79,   80,   81,  118,   95,   84,   50,   51,   52,  118,
 /*  1040 */    54,  109,  110,   57,  112,  118,   95,  118,  109,  110,
 /*  1050 */   118,  112,    0,    9,   10,  118,   12,  118,   14,  118,
 /*  1060 */   109,  110,   18,  112,   20,  118,   22,   23,   24,   25,
 /*  1070 */   118,  118,    9,   10,  118,   12,  118,   14,   26,   27,
 /*  1080 */   118,   18,  118,   20,  118,   22,   23,   24,   25,  118,
 /*  1090 */    75,   76,  118,   78,   79,   80,   81,  118,   83,   84,
 /*  1100 */    56,  118,   50,   51,   52,  118,   54,   63,  118,   57,
 /*  1110 */    95,   95,   68,  118,   98,  118,  100,  118,  102,   56,
 /*  1120 */   118,  118,  106,  107,  109,  110,   63,  112,  118,   75,
 /*  1130 */    76,   68,   78,   79,   80,   81,  118,   83,   84,    9,
 /*  1140 */    10,   80,   12,  118,   14,   80,   85,   82,   18,   95,
 /*  1150 */    20,  118,   22,   23,   24,   25,   95,  118,  118,  118,
 /*  1160 */    95,  118,  118,  109,  110,  118,  112,  118,  118,  118,
 /*  1170 */   109,  110,  118,  112,  109,  110,  118,  112,  113,  114,
 /*  1180 */   115,  116,  117,  118,   95,  118,   56,   98,   80,  100,
 /*  1190 */    82,  102,   95,  118,  118,  106,  107,  118,   68,  118,
 /*  1200 */    80,  118,   82,   95,  118,  118,  109,  110,  118,  112,
 /*  1210 */   118,   80,  118,   82,  118,   95,  118,  109,  110,  118,
 /*  1220 */   112,  113,  114,  115,  116,  117,   95,  118,  118,  109,
 /*  1230 */   110,  118,  112,  113,  114,  115,  116,  117,  118,  118,
 /*  1240 */   109,  110,  118,  112,  113,  114,  115,  116,  117,  118,
 /*  1250 */   118,  118,  118,   70,   71,   80,  118,   82,   75,   76,
 /*  1260 */    95,  118,  118,  118,  118,  118,   83,   80,  118,   82,
 /*  1270 */    95,  118,  118,  118,  109,  110,  118,  112,  118,   80,
 /*  1280 */   118,   82,   95,  118,  109,  110,  118,  112,  113,  114,
 /*  1290 */   115,  116,  117,  118,   95,  118,  109,  110,  118,  112,
 /*  1300 */   113,  114,  115,  116,  117,   80,  118,   82,  109,  110,
 /*  1310 */   118,  112,  113,  114,  115,  116,  117,   80,  118,   82,
 /*  1320 */    95,   95,  118,  118,   98,  118,  100,  118,   80,  118,
 /*  1330 */    82,  118,   95,  107,  109,  110,  118,  112,  113,  114,
 /*  1340 */   115,  116,  117,   95,  118,  118,  109,  110,  118,  112,
 /*  1350 */   113,  114,  115,  116,  117,   95,  118,  109,  110,  118,
 /*  1360 */   112,  113,  114,  115,  116,  117,   80,  118,   82,  109,
 /*  1370 */   110,  118,  112,  118,  118,   80,  118,   82,  118,   14,
 /*  1380 */   118,   95,  118,  118,  118,   20,  118,  118,  118,  118,
 /*  1390 */    95,   26,  118,  118,  118,  109,  110,  118,  112,  113,
 /*  1400 */   114,  115,  116,  117,  109,  110,  118,  112,  113,  114,
 /*  1410 */   115,  116,  117,   80,  118,   82,  118,  118,  118,  118,
 /*  1420 */   118,  118,   80,  118,   82,  118,   61,   62,   95,  118,
 /*  1430 */    65,   66,  118,  118,  118,  118,  118,   95,   80,  118,
 /*  1440 */    82,  118,  109,  110,  118,  112,  113,  114,  115,  116,
 /*  1450 */   117,  109,  110,   95,  112,  113,  114,  115,  116,  117,
 /*  1460 */    14,  118,   80,  118,   82,   95,   20,  109,  110,  118,
 /*  1470 */   112,  113,  114,  115,  116,  117,    0,   95,  118,  109,
 /*  1480 */   110,  118,  112,  118,  118,   80,  118,   82,  118,  118,
 /*  1490 */   118,  109,  110,  118,  112,  113,  114,  115,  116,  117,
 /*  1500 */    95,  118,   26,   27,  118,  118,  118,   61,   62,   80,
 /*  1510 */     0,   65,   66,  118,  109,  110,  118,  112,  113,  114,
 /*  1520 */   115,  116,  117,    0,   95,  118,   50,   51,   52,  118,
 /*  1530 */    54,    0,  118,   57,  118,  118,   26,   27,  109,  110,
 /*  1540 */    80,  112,  113,  114,  115,  116,  117,  118,   14,   26,
 /*  1550 */    27,   95,  118,  118,   20,   95,  118,   26,   27,  118,
 /*  1560 */    50,   51,   52,    0,   54,  109,  110,   57,  112,  109,
 /*  1570 */   110,  118,  112,   50,   51,   52,    0,   54,  118,  118,
 /*  1580 */    57,   50,   51,   52,    0,   54,  118,  118,   57,   26,
 /*  1590 */    27,   95,   80,  118,  118,   61,   62,  118,   64,   65,
 /*  1600 */    66,  118,   26,   27,  118,  109,  110,   95,  112,  118,
 /*  1610 */    26,   27,  118,   50,   51,   52,    0,   54,  118,  118,
 /*  1620 */    57,  109,  110,  118,  112,  118,   50,   51,   52,    0,
 /*  1630 */    54,  118,  118,   57,   50,   51,   52,    0,   54,  118,
 /*  1640 */   118,   57,   26,   27,   79,   80,   81,  118,  118,  118,
 /*  1650 */   118,  118,  118,  118,  118,   26,   27,  118,  118,  118,
 /*  1660 */    95,  118,  118,   26,   27,  118,   50,   51,   52,    0,
 /*  1670 */    54,  118,  118,   57,  109,  110,  118,  112,  118,   50,
 /*  1680 */    51,   52,    0,   54,  118,  118,   57,   50,   51,   52,
 /*  1690 */     0,   54,  118,  118,   57,   26,   27,  118,   80,   81,
 /*  1700 */   118,  118,  118,  118,  118,  118,  118,  118,   26,   27,
 /*  1710 */   118,  118,  118,   95,  118,  118,   26,   27,  118,   50,
 /*  1720 */    51,   52,    0,   54,  118,  118,   57,  109,  110,  118,
 /*  1730 */   112,  118,   50,   51,   52,    0,   54,  118,  118,   57,
 /*  1740 */    50,   51,   52,    0,   54,  118,  118,   57,   26,   27,
 /*  1750 */   118,   80,  118,  118,  118,  118,  118,  118,  118,  118,
 /*  1760 */   118,   26,   27,  118,  118,  118,   95,  118,  118,   26,
 /*  1770 */    27,  118,   50,   51,   52,    0,   54,  118,  118,   57,
 /*  1780 */   109,  110,  118,  112,  118,   50,   51,   52,    0,   54,
 /*  1790 */   118,  118,   57,   50,   51,   52,    0,   54,  118,  118,
 /*  1800 */    57,   26,   27,  118,   80,  118,  118,  118,  118,  118,
 /*  1810 */   118,  118,  118,  118,   26,   27,  118,  118,  118,   95,
 /*  1820 */   118,  118,   26,   27,  118,   50,   51,   52,   80,   54,
 /*  1830 */   118,  118,   57,  109,  110,  118,  112,  118,   50,   51,
 /*  1840 */    52,  118,   54,   95,  118,   57,   50,   51,   52,  118,
 /*  1850 */    54,   80,  118,   57,  118,  118,   80,  109,  110,  118,
 /*  1860 */   112,   80,  118,  118,  118,  118,   95,   80,  118,  118,
 /*  1870 */   118,   95,  118,  118,   80,  118,   95,  118,  118,  118,
 /*  1880 */   109,  110,   95,  112,  118,  109,  110,  118,  112,   95,
 /*  1890 */   109,  110,  118,  112,  118,   80,  109,  110,  118,  112,
 /*  1900 */    80,  118,  118,  109,  110,  118,  112,   80,  118,  118,
 /*  1910 */    95,  118,  118,   80,  118,   95,  118,  118,  118,   80,
 /*  1920 */   118,  118,   95,   80,  109,  110,  118,  112,   95,  109,
 /*  1930 */   110,   80,  112,  118,   95,  118,  109,  110,   95,  112,
 /*  1940 */   118,   80,  109,  110,  118,  112,   95,   80,  109,  110,
 /*  1950 */   118,  112,  109,  110,  118,  112,   95,   80,  118,  118,
 /*  1960 */   109,  110,   95,  112,  118,  118,   80,  118,  118,  118,
 /*  1970 */   109,  110,   95,  112,  118,  118,  109,  110,   80,  112,
 /*  1980 */   118,   95,  118,  118,   80,  118,  109,  110,   80,  112,
 /*  1990 */   118,  118,  118,   95,   80,  109,  110,  118,  112,   95,
 /*  2000 */    80,  118,  118,   95,   80,  118,  118,  109,  110,   95,
 /*  2010 */   112,  118,   80,  109,  110,   95,  112,  109,  110,   95,
 /*  2020 */   112,  118,   80,  109,  110,  118,  112,   95,   80,  109,
 /*  2030 */   110,  118,  112,  109,  110,  118,  112,   95,   80,  118,
 /*  2040 */   118,  109,  110,   95,  112,  118,  118,   80,  118,  118,
 /*  2050 */   118,  109,  110,   95,  112,  118,  118,  109,  110,   80,
 /*  2060 */   112,  118,   95,  118,  118,   80,  118,  109,  110,   80,
 /*  2070 */   112,  118,  118,  118,   95,   80,  109,  110,  118,  112,
 /*  2080 */    95,   80,  118,  118,   95,   80,  118,  118,  109,  110,
 /*  2090 */    95,  112,  118,   80,  109,  110,   95,  112,  109,  110,
 /*  2100 */    95,  112,  118,   80,  109,  110,  118,  112,   95,   80,
 /*  2110 */   109,  110,  118,  112,  109,  110,  118,  112,   95,   80,
 /*  2120 */   118,  118,  109,  110,   95,  112,  118,  118,   80,  118,
 /*  2130 */   118,  118,  109,  110,   95,  112,  118,  118,  109,  110,
 /*  2140 */    80,  112,  118,   95,  118,  118,  118,  118,  109,  110,
 /*  2150 */   118,  112,  118,  118,  118,   95,  118,  109,  110,  118,
 /*  2160 */   112,  118,  118,  118,  118,  118,  118,  118,  118,  109,
 /*  2170 */   110,  118,  112,
};
#define YY_SHIFT_USE_DFLT (-20)
#define YY_SHIFT_MAX 269
static const short yy_shift_ofst[] = {
 /*     0 */    30,   -5,   52,   52,   52,  172,  724,  743,  821,  821,
 /*    10 */   821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
 /*    20 */   821,  821,  821,  821,  821,  821,  133, 1130,  856, 1130,
 /*    30 */  1130,  205,  205,  205, 1446, 1446, 1446, 1446, 1044, 1063,
 /*    40 */  1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
 /*    50 */  1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
 /*    60 */  1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
 /*    70 */  1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
 /*    80 */  1130, 1130, 1130, 1130, 1130, 1446, 1130, 1130, 1130, 1130,
 /*    90 */  1130, 1130, 1130, 1130, 1130, 1130, 1130, 1446,  -19,  -19,
 /*   100 */    53,  272,   53, 1365,   53,  229, 1446,  -14,   96,  -19,
 /*   110 */  1534, 1365, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
 /*   120 */  1446,   97,  -18,   -6,   40,  241,  292,  311,  502,  380,
 /*   130 */    97,  503,  161,   -6,  200,  209,   40,  -19,  239,  305,
 /*   140 */   -19,  330,  330,  330,  433,  433,  -19,  478,  716,  478,
 /*   150 */   716,  716,  121,  362,  381,  400,  439,  464,  497,  528,
 /*   160 */   561,  580,  599,  618,  637,  656,  675,  694,  713,  713,
 /*   170 */   713,  810,  844,  884,  913,  933,  986,  315,   14,   14,
 /*   180 */    14,   14,   14,   14, 1052, 1476, 1510, 1523, 1531, 1563,
 /*   190 */  1576, 1584, 1616, 1629, 1637, 1669, 1682, 1690, 1722, 1735,
 /*   200 */  1743, 1775, 1788, 1796,  260,  260,  260,  260,  335,  123,
 /*   210 */   776,  829,  139,  731,  786,   -4,  764,  748,  721,  725,
 /*   220 */   754,  738,  733,  751,  737,  819,  785,  816,  831,  835,
 /*   230 */   847,  837,  838,  839,  858,  855,  864,  865,  853,  862,
 /*   240 */   869,  851,  867,  868,  880,  886,  921,  918,  888,  897,
 /*   250 */   899,  918,  918,  918,  918,  918,  918,  918,  918,  918,
 /*   260 */   918,  918,  918,  918,  918,  908,  930,  931,  909,  910,
};
#define YY_REDUCE_USE_DFLT (-88)
#define YY_REDUCE_MAX 151
static const short yy_reduce_ofst[] = {
 /*     0 */  1183,  129,  898,  939, 1015, 1054,  -30, 1065, 1108, 1120,
 /*    10 */  1131, 1175, 1187, 1199, 1225, 1237, 1248, 1286, 1295, 1333,
 /*    20 */  1342, 1358, 1382, 1405, 1429, 1429,  951, 1565,   54, 1061,
 /*    30 */  1618,  325,  389,  453,  677,  696, 1016, 1089,   90,  661,
 /*    40 */   795, 1460, 1512, 1671, 1724, 1748, 1771, 1776, 1781, 1787,
 /*    50 */  1794, 1815, 1820, 1827, 1833, 1839, 1843, 1851, 1861, 1867,
 /*    60 */  1877, 1886, 1898, 1904, 1908, 1914, 1920, 1924, 1932, 1942,
 /*    70 */  1948, 1958, 1967, 1979, 1985, 1989, 1995, 2001, 2005, 2013,
 /*    80 */  2023, 2029, 2039, 2048, 2060,  -87,  327,  650,  859,  885,
 /*    90 */   932, 1097, 1165, 1260, 1370, 1456, 1496, 1226,  169,  395,
 /*   100 */     8,  -27,   81,  128,  329,  -73,  -27,   98,  424,  425,
 /*   110 */    46,  185,  364,  366,  396,  455,  457,  642,  712,  739,
 /*   120 */   769,  -42,  -29,   19,   68,  -15,   15,   -8,   65,   16,
 /*   130 */    80,   89,  131,  138,  163,  165,  170,  190,  226,  263,
 /*   140 */   245,  251,  319,  324,  414,  449,  459,  651,  667,  666,
 /*   150 */   682,  686,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   396,  396,  434,  436,  574,  396,  588,  588,  588,  588,
 /*    10 */   588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
 /*    20 */   588,  588,  588,  423,  576,  588,  588,  588,  588,  577,
 /*    30 */   588,  584,  584,  584,  586,  586,  586,  586,  588,  588,
 /*    40 */   588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
 /*    50 */   588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
 /*    60 */   588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
 /*    70 */   588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
 /*    80 */   588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
 /*    90 */   588,  588,  588,  588,  588,  588,  588,  574,  588,  588,
 /*   100 */   453,  588,  453,  579,  453,  574,  588,  588,  588,  574,
 /*   110 */   469,  588,  588,  588,  588,  588,  588,  588,  588,  588,
 /*   120 */   588,  588,  588,  588,  588,  571,  588,  588,  588,  588,
 /*   130 */   574,  588,  573,  588,  573,  573,  574,  588,  483,  573,
 /*   140 */   588,  575,  575,  575,  573,  573,  588,  449,  573,  588,
 /*   150 */   573,  573,  571,  588,  588,  588,  588,  588,  588,  588,
 /*   160 */   557,  558,  559,  560,  561,  562,  563,  564,  572,  578,
 /*   170 */   571,  524,  523,  513,  514,  515,  516,  588,  517,  518,
 /*   180 */   519,  520,  521,  522,  490,  491,  492,  493,  494,  495,
 /*   190 */   496,  497,  499,  500,  501,  502,  504,  506,  507,  508,
 /*   200 */   509,  510,  511,  512,  513,  514,  515,  516,  588,  582,
 /*   210 */   498,  498,  588,  588,  588,  588,  588,  392,  588,  588,
 /*   220 */   588,  588,  469,  588,  588,  588,  588,  588,  588,  588,
 /*   230 */   473,  588,  588,  588,  588,  588,  588,  588,  588,  588,
 /*   240 */   588,  565,  588,  588,  588,  588,  463,  464,  588,  588,
 /*   250 */   588,  401,  402,  403,  404,  405,  406,  407,  408,  409,
 /*   260 */   410,  411,  412,  413,  422,  424,  588,  588,  588,  588,
 /*   270 */   387,  388,  389,  390,  391,  393,  394,  395,  397,  440,
 /*   280 */   441,  442,  455,  456,  457,  454,  443,  444,  459,  460,
 /*   290 */   465,  466,  468,  581,  470,  471,  480,  451,  452,  479,
 /*   300 */   481,  478,  472,  474,  482,  475,  585,  476,  477,  484,
 /*   310 */   583,  485,  587,  486,  487,  488,  489,  490,  491,  492,
 /*   320 */   493,  499,  500,  501,  502,  503,  504,  505,  508,  509,
 /*   330 */   510,  511,  512,  494,  495,  525,  526,  535,  536,  537,
 /*   340 */   538,  543,  545,  566,  567,  568,  569,  570,  496,  497,
 /*   350 */   507,  506,  467,  458,  445,  446,  462,  580,  582,  461,
 /*   360 */   447,  448,  398,  399,  414,  415,  416,  417,  418,  419,
 /*   370 */   420,  421,  425,  427,  426,  428,  429,  430,  432,  433,
 /*   380 */   435,  431,  437,  438,  450,  439,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  ParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "OROR",          "ANDAND",        "EQ",          
  "NEQ",           "LT",            "LE",            "GT",          
  "GE",            "PLUS",          "MINUS",         "OR",          
  "XOR",           "DIVIDE",        "TIMES",         "MOD",         
  "SHIFTL",        "SHIFTR",        "AND",           "ANDNOT",      
  "IDENT",         "ASSIGN",        "INT",           "FLOAT",       
  "STRING",        "CHAR",          "COMMA",         "SEMICOLON",   
  "DECLARIZE",     "A_DIVIDE",      "A_TIMES",       "A_MOD",       
  "A_SHIFTL",      "A_SHIFTR",      "A_AND",         "A_ANDNOT",    
  "A_PLUS",        "A_MINUS",       "A_OR",          "A_XOR",       
  "INC",           "DEC",           "BREAK",         "CONTINUE",    
  "FALLTHROUGH",   "RETURN",        "IF",            "ELSE",        
  "FOR",           "SWITCH",        "LCURLY",        "RCURLY",      
  "CASE",          "COLON",         "DEFAULT",       "IMPORT",      
  "LPAREN",        "RPAREN",        "TYPE",          "CONST",       
  "VAR",           "FUNC",          "LSB",           "RSB",         
  "DOT",           "STRUCT",        "UNION",         "ELLIPSIS",    
  "NOT",           "error",         "program",       "decl_list",   
  "osemi",         "attr",          "attr_list",     "attrs",       
  "oattrs",        "stmt_list",     "stmt",          "s_stmt",      
  "expr",          "expr_list",     "iexpr_list",    "decl",        
  "block_stmt",    "oexpr",         "sw_block_stmt",  "sw_case_list",
  "sw_case",       "import_spec",   "import_spec_list",  "type_spec",   
  "type_spec_list",  "value_spec",    "value_spec_list",  "ident",       
  "oargs_comma_list",  "func_results",  "type",          "field_comma_list",
  "ident_list",    "otype",         "ofield_semi_list_and_osemi",  "nametype_list",
  "args_comma_list",  "ofunc_ellipsis",  "field_semi_list",  "field",       
  "nametype",      "basic_lit",     "pexpr",         "ocomma",      
  "uexpr",         "ty_pexpr",      "ty_uexpr",      "ty_expr",     
  "compound_lit",  "iexpr",       
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "program ::= decl_list osemi",
 /*   1 */ "attr ::= IDENT ASSIGN INT",
 /*   2 */ "attr ::= IDENT ASSIGN FLOAT",
 /*   3 */ "attr ::= IDENT ASSIGN STRING",
 /*   4 */ "attr ::= IDENT ASSIGN CHAR",
 /*   5 */ "attr ::= IDENT ASSIGN IDENT",
 /*   6 */ "attr ::= IDENT",
 /*   7 */ "attr_list ::= attr",
 /*   8 */ "attr_list ::= attr_list COMMA attr",
 /*   9 */ "attrs ::= LT attr_list GT",
 /*  10 */ "oattrs ::=",
 /*  11 */ "oattrs ::= attrs",
 /*  12 */ "stmt_list ::= stmt",
 /*  13 */ "stmt_list ::= stmt_list SEMICOLON stmt",
 /*  14 */ "s_stmt ::= expr",
 /*  15 */ "s_stmt ::= expr_list ASSIGN iexpr_list",
 /*  16 */ "s_stmt ::= expr_list DECLARIZE iexpr_list",
 /*  17 */ "s_stmt ::= expr_list A_DIVIDE iexpr_list",
 /*  18 */ "s_stmt ::= expr_list A_TIMES iexpr_list",
 /*  19 */ "s_stmt ::= expr_list A_MOD iexpr_list",
 /*  20 */ "s_stmt ::= expr_list A_SHIFTL iexpr_list",
 /*  21 */ "s_stmt ::= expr_list A_SHIFTR iexpr_list",
 /*  22 */ "s_stmt ::= expr_list A_AND iexpr_list",
 /*  23 */ "s_stmt ::= expr_list A_ANDNOT iexpr_list",
 /*  24 */ "s_stmt ::= expr_list A_PLUS iexpr_list",
 /*  25 */ "s_stmt ::= expr_list A_MINUS iexpr_list",
 /*  26 */ "s_stmt ::= expr_list A_OR iexpr_list",
 /*  27 */ "s_stmt ::= expr_list A_XOR iexpr_list",
 /*  28 */ "s_stmt ::= expr INC",
 /*  29 */ "s_stmt ::= expr DEC",
 /*  30 */ "stmt ::= s_stmt",
 /*  31 */ "stmt ::= decl",
 /*  32 */ "stmt ::= block_stmt",
 /*  33 */ "stmt ::= BREAK",
 /*  34 */ "stmt ::= CONTINUE",
 /*  35 */ "stmt ::= FALLTHROUGH",
 /*  36 */ "stmt ::= RETURN iexpr_list",
 /*  37 */ "stmt ::= RETURN",
 /*  38 */ "stmt ::= IF expr block_stmt",
 /*  39 */ "stmt ::= IF expr block_stmt ELSE stmt",
 /*  40 */ "stmt ::= FOR s_stmt SEMICOLON oexpr SEMICOLON s_stmt block_stmt",
 /*  41 */ "stmt ::= FOR expr block_stmt",
 /*  42 */ "stmt ::= FOR block_stmt",
 /*  43 */ "stmt ::= SWITCH expr sw_block_stmt",
 /*  44 */ "sw_block_stmt ::= LCURLY sw_case_list RCURLY",
 /*  45 */ "sw_case_list ::= sw_case",
 /*  46 */ "sw_case_list ::= sw_case_list sw_case",
 /*  47 */ "sw_case ::= CASE expr_list COLON stmt_list osemi",
 /*  48 */ "sw_case ::= CASE expr_list COLON",
 /*  49 */ "sw_case ::= DEFAULT COLON stmt_list osemi",
 /*  50 */ "sw_case ::= DEFAULT COLON",
 /*  51 */ "block_stmt ::= LCURLY stmt_list osemi RCURLY",
 /*  52 */ "block_stmt ::= LCURLY RCURLY",
 /*  53 */ "decl_list ::= decl",
 /*  54 */ "decl_list ::= decl_list SEMICOLON decl",
 /*  55 */ "decl ::= oattrs IMPORT import_spec",
 /*  56 */ "decl ::= oattrs IMPORT LPAREN import_spec_list osemi RPAREN",
 /*  57 */ "decl ::= TYPE type_spec",
 /*  58 */ "decl ::= TYPE LPAREN type_spec_list osemi RPAREN",
 /*  59 */ "decl ::= CONST value_spec",
 /*  60 */ "decl ::= CONST LPAREN value_spec_list osemi RPAREN",
 /*  61 */ "decl ::= VAR value_spec",
 /*  62 */ "decl ::= VAR LPAREN value_spec_list osemi RPAREN",
 /*  63 */ "decl ::= FUNC ident LPAREN oargs_comma_list RPAREN func_results",
 /*  64 */ "decl ::= FUNC ident LPAREN oargs_comma_list RPAREN func_results block_stmt",
 /*  65 */ "func_results ::= type",
 /*  66 */ "func_results ::= LPAREN field_comma_list RPAREN",
 /*  67 */ "func_results ::=",
 /*  68 */ "import_spec_list ::= import_spec",
 /*  69 */ "import_spec_list ::= import_spec_list SEMICOLON import_spec",
 /*  70 */ "import_spec ::= IDENT STRING",
 /*  71 */ "import_spec ::= STRING",
 /*  72 */ "type_spec_list ::= type_spec",
 /*  73 */ "type_spec_list ::= type_spec_list SEMICOLON type_spec",
 /*  74 */ "type_spec ::= IDENT type",
 /*  75 */ "value_spec_list ::= value_spec",
 /*  76 */ "value_spec_list ::= value_spec_list SEMICOLON value_spec",
 /*  77 */ "value_spec ::= ident_list otype",
 /*  78 */ "value_spec ::= ident_list otype ASSIGN iexpr_list",
 /*  79 */ "type ::= TIMES type",
 /*  80 */ "type ::= LSB expr RSB type",
 /*  81 */ "type ::= LSB RSB type",
 /*  82 */ "type ::= ident DOT ident",
 /*  83 */ "type ::= ident",
 /*  84 */ "type ::= STRUCT LCURLY ofield_semi_list_and_osemi RCURLY",
 /*  85 */ "type ::= UNION LCURLY ofield_semi_list_and_osemi RCURLY",
 /*  86 */ "type ::= FUNC LPAREN oargs_comma_list RPAREN func_results",
 /*  87 */ "field_comma_list ::= nametype_list",
 /*  88 */ "args_comma_list ::= nametype_list ofunc_ellipsis",
 /*  89 */ "args_comma_list ::= ELLIPSIS",
 /*  90 */ "field_semi_list ::= field",
 /*  91 */ "field_semi_list ::= field_semi_list SEMICOLON field",
 /*  92 */ "nametype_list ::= nametype",
 /*  93 */ "nametype_list ::= nametype_list COMMA nametype",
 /*  94 */ "nametype ::= ident type",
 /*  95 */ "nametype ::= type",
 /*  96 */ "ofunc_ellipsis ::= COMMA ELLIPSIS",
 /*  97 */ "ofunc_ellipsis ::=",
 /*  98 */ "field ::= ident_list type",
 /*  99 */ "field ::= type",
 /* 100 */ "basic_lit ::= INT",
 /* 101 */ "basic_lit ::= FLOAT",
 /* 102 */ "basic_lit ::= STRING",
 /* 103 */ "basic_lit ::= CHAR",
 /* 104 */ "pexpr ::= basic_lit",
 /* 105 */ "pexpr ::= ident",
 /* 106 */ "pexpr ::= LPAREN expr RPAREN",
 /* 107 */ "pexpr ::= pexpr LSB expr RSB",
 /* 108 */ "pexpr ::= pexpr DOT IDENT",
 /* 109 */ "pexpr ::= pexpr DOT LPAREN type RPAREN",
 /* 110 */ "pexpr ::= pexpr LPAREN RPAREN",
 /* 111 */ "pexpr ::= pexpr LPAREN iexpr_list ocomma RPAREN",
 /* 112 */ "uexpr ::= pexpr",
 /* 113 */ "uexpr ::= PLUS uexpr",
 /* 114 */ "uexpr ::= MINUS uexpr",
 /* 115 */ "uexpr ::= NOT uexpr",
 /* 116 */ "uexpr ::= AND uexpr",
 /* 117 */ "uexpr ::= TIMES uexpr",
 /* 118 */ "uexpr ::= XOR uexpr",
 /* 119 */ "expr ::= uexpr",
 /* 120 */ "expr ::= expr DIVIDE expr",
 /* 121 */ "expr ::= expr TIMES expr",
 /* 122 */ "expr ::= expr MOD expr",
 /* 123 */ "expr ::= expr SHIFTL expr",
 /* 124 */ "expr ::= expr SHIFTR expr",
 /* 125 */ "expr ::= expr AND expr",
 /* 126 */ "expr ::= expr ANDNOT expr",
 /* 127 */ "expr ::= expr PLUS expr",
 /* 128 */ "expr ::= expr MINUS expr",
 /* 129 */ "expr ::= expr OR expr",
 /* 130 */ "expr ::= expr XOR expr",
 /* 131 */ "expr ::= expr EQ expr",
 /* 132 */ "expr ::= expr NEQ expr",
 /* 133 */ "expr ::= expr LT expr",
 /* 134 */ "expr ::= expr LE expr",
 /* 135 */ "expr ::= expr GT expr",
 /* 136 */ "expr ::= expr GE expr",
 /* 137 */ "expr ::= expr ANDAND expr",
 /* 138 */ "expr ::= expr OROR expr",
 /* 139 */ "ty_pexpr ::= LSB expr RSB type",
 /* 140 */ "ty_pexpr ::= LSB RSB type",
 /* 141 */ "ty_pexpr ::= basic_lit",
 /* 142 */ "ty_pexpr ::= ident",
 /* 143 */ "ty_pexpr ::= LPAREN expr RPAREN",
 /* 144 */ "ty_pexpr ::= pexpr LSB expr RSB",
 /* 145 */ "ty_pexpr ::= pexpr DOT IDENT",
 /* 146 */ "ty_pexpr ::= pexpr DOT LPAREN type RPAREN",
 /* 147 */ "ty_pexpr ::= pexpr LPAREN RPAREN",
 /* 148 */ "ty_pexpr ::= pexpr LPAREN iexpr_list ocomma RPAREN",
 /* 149 */ "ty_pexpr ::= STRUCT LCURLY ofield_semi_list_and_osemi RCURLY",
 /* 150 */ "ty_pexpr ::= UNION LCURLY ofield_semi_list_and_osemi RCURLY",
 /* 151 */ "ty_pexpr ::= FUNC LPAREN oargs_comma_list RPAREN func_results",
 /* 152 */ "ty_uexpr ::= ty_pexpr",
 /* 153 */ "ty_uexpr ::= PLUS uexpr",
 /* 154 */ "ty_uexpr ::= MINUS uexpr",
 /* 155 */ "ty_uexpr ::= NOT uexpr",
 /* 156 */ "ty_uexpr ::= AND uexpr",
 /* 157 */ "ty_uexpr ::= TIMES ty_uexpr",
 /* 158 */ "ty_uexpr ::= XOR uexpr",
 /* 159 */ "ty_expr ::= ty_uexpr",
 /* 160 */ "ty_expr ::= expr DIVIDE expr",
 /* 161 */ "ty_expr ::= expr TIMES expr",
 /* 162 */ "ty_expr ::= expr MOD expr",
 /* 163 */ "ty_expr ::= expr SHIFTL expr",
 /* 164 */ "ty_expr ::= expr SHIFTR expr",
 /* 165 */ "ty_expr ::= expr AND expr",
 /* 166 */ "ty_expr ::= expr ANDNOT expr",
 /* 167 */ "ty_expr ::= expr PLUS expr",
 /* 168 */ "ty_expr ::= expr MINUS expr",
 /* 169 */ "ty_expr ::= expr OR expr",
 /* 170 */ "ty_expr ::= expr XOR expr",
 /* 171 */ "ty_expr ::= expr EQ expr",
 /* 172 */ "ty_expr ::= expr NEQ expr",
 /* 173 */ "ty_expr ::= expr LT expr",
 /* 174 */ "ty_expr ::= expr LE expr",
 /* 175 */ "ty_expr ::= expr GT expr",
 /* 176 */ "ty_expr ::= expr GE expr",
 /* 177 */ "ty_expr ::= expr ANDAND expr",
 /* 178 */ "ty_expr ::= expr OROR expr",
 /* 179 */ "compound_lit ::= LCURLY iexpr_list ocomma RCURLY",
 /* 180 */ "compound_lit ::= LCURLY iexpr_list ocomma RCURLY DOT LPAREN type RPAREN",
 /* 181 */ "iexpr ::= ty_expr",
 /* 182 */ "iexpr ::= compound_lit",
 /* 183 */ "iexpr_list ::= iexpr",
 /* 184 */ "iexpr_list ::= iexpr_list COMMA iexpr",
 /* 185 */ "expr_list ::= expr",
 /* 186 */ "expr_list ::= expr_list COMMA expr",
 /* 187 */ "osemi ::=",
 /* 188 */ "osemi ::= SEMICOLON",
 /* 189 */ "ocomma ::=",
 /* 190 */ "ocomma ::= COMMA",
 /* 191 */ "oexpr ::=",
 /* 192 */ "oexpr ::= expr",
 /* 193 */ "otype ::=",
 /* 194 */ "otype ::= type",
 /* 195 */ "ident ::= IDENT",
 /* 196 */ "ident_list ::= ident",
 /* 197 */ "ident_list ::= ident_list COMMA ident",
 /* 198 */ "oargs_comma_list ::=",
 /* 199 */ "oargs_comma_list ::= args_comma_list",
 /* 200 */ "ofield_semi_list_and_osemi ::=",
 /* 201 */ "ofield_semi_list_and_osemi ::= field_semi_list osemi",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
      /* TERMINAL Destructor */
    case 1: /* OROR */
    case 2: /* ANDAND */
    case 3: /* EQ */
    case 4: /* NEQ */
    case 5: /* LT */
    case 6: /* LE */
    case 7: /* GT */
    case 8: /* GE */
    case 9: /* PLUS */
    case 10: /* MINUS */
    case 11: /* OR */
    case 12: /* XOR */
    case 13: /* DIVIDE */
    case 14: /* TIMES */
    case 15: /* MOD */
    case 16: /* SHIFTL */
    case 17: /* SHIFTR */
    case 18: /* AND */
    case 19: /* ANDNOT */
    case 20: /* IDENT */
    case 21: /* ASSIGN */
    case 22: /* INT */
    case 23: /* FLOAT */
    case 24: /* STRING */
    case 25: /* CHAR */
    case 26: /* COMMA */
    case 27: /* SEMICOLON */
    case 28: /* DECLARIZE */
    case 29: /* A_DIVIDE */
    case 30: /* A_TIMES */
    case 31: /* A_MOD */
    case 32: /* A_SHIFTL */
    case 33: /* A_SHIFTR */
    case 34: /* A_AND */
    case 35: /* A_ANDNOT */
    case 36: /* A_PLUS */
    case 37: /* A_MINUS */
    case 38: /* A_OR */
    case 39: /* A_XOR */
    case 40: /* INC */
    case 41: /* DEC */
    case 42: /* BREAK */
    case 43: /* CONTINUE */
    case 44: /* FALLTHROUGH */
    case 45: /* RETURN */
    case 46: /* IF */
    case 47: /* ELSE */
    case 48: /* FOR */
    case 49: /* SWITCH */
    case 50: /* LCURLY */
    case 51: /* RCURLY */
    case 52: /* CASE */
    case 53: /* COLON */
    case 54: /* DEFAULT */
    case 55: /* IMPORT */
    case 56: /* LPAREN */
    case 57: /* RPAREN */
    case 58: /* TYPE */
    case 59: /* CONST */
    case 60: /* VAR */
    case 61: /* FUNC */
    case 62: /* LSB */
    case 63: /* RSB */
    case 64: /* DOT */
    case 65: /* STRUCT */
    case 66: /* UNION */
    case 67: /* ELLIPSIS */
    case 68: /* NOT */
{
#line 2 "parser.y"
 delete (yypminor->yy0); 
#line 1184 "parser.c"
}
      break;
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from ParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   ParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   ParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 70, 2 },
  { 73, 3 },
  { 73, 3 },
  { 73, 3 },
  { 73, 3 },
  { 73, 3 },
  { 73, 1 },
  { 74, 1 },
  { 74, 3 },
  { 75, 3 },
  { 76, 0 },
  { 76, 1 },
  { 77, 1 },
  { 77, 3 },
  { 79, 1 },
  { 79, 3 },
  { 79, 3 },
  { 79, 3 },
  { 79, 3 },
  { 79, 3 },
  { 79, 3 },
  { 79, 3 },
  { 79, 3 },
  { 79, 3 },
  { 79, 3 },
  { 79, 3 },
  { 79, 3 },
  { 79, 3 },
  { 79, 2 },
  { 79, 2 },
  { 78, 1 },
  { 78, 1 },
  { 78, 1 },
  { 78, 1 },
  { 78, 1 },
  { 78, 1 },
  { 78, 2 },
  { 78, 1 },
  { 78, 3 },
  { 78, 5 },
  { 78, 7 },
  { 78, 3 },
  { 78, 2 },
  { 78, 3 },
  { 86, 3 },
  { 87, 1 },
  { 87, 2 },
  { 88, 5 },
  { 88, 3 },
  { 88, 4 },
  { 88, 2 },
  { 84, 4 },
  { 84, 2 },
  { 71, 1 },
  { 71, 3 },
  { 83, 3 },
  { 83, 6 },
  { 83, 2 },
  { 83, 5 },
  { 83, 2 },
  { 83, 5 },
  { 83, 2 },
  { 83, 5 },
  { 83, 6 },
  { 83, 7 },
  { 97, 1 },
  { 97, 3 },
  { 97, 0 },
  { 90, 1 },
  { 90, 3 },
  { 89, 2 },
  { 89, 1 },
  { 92, 1 },
  { 92, 3 },
  { 91, 2 },
  { 94, 1 },
  { 94, 3 },
  { 93, 2 },
  { 93, 4 },
  { 98, 2 },
  { 98, 4 },
  { 98, 3 },
  { 98, 3 },
  { 98, 1 },
  { 98, 4 },
  { 98, 4 },
  { 98, 5 },
  { 99, 1 },
  { 104, 2 },
  { 104, 1 },
  { 106, 1 },
  { 106, 3 },
  { 103, 1 },
  { 103, 3 },
  { 108, 2 },
  { 108, 1 },
  { 105, 2 },
  { 105, 0 },
  { 107, 2 },
  { 107, 1 },
  { 109, 1 },
  { 109, 1 },
  { 109, 1 },
  { 109, 1 },
  { 110, 1 },
  { 110, 1 },
  { 110, 3 },
  { 110, 4 },
  { 110, 3 },
  { 110, 5 },
  { 110, 3 },
  { 110, 5 },
  { 112, 1 },
  { 112, 2 },
  { 112, 2 },
  { 112, 2 },
  { 112, 2 },
  { 112, 2 },
  { 112, 2 },
  { 80, 1 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 80, 3 },
  { 113, 4 },
  { 113, 3 },
  { 113, 1 },
  { 113, 1 },
  { 113, 3 },
  { 113, 4 },
  { 113, 3 },
  { 113, 5 },
  { 113, 3 },
  { 113, 5 },
  { 113, 4 },
  { 113, 4 },
  { 113, 5 },
  { 114, 1 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 114, 2 },
  { 115, 1 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 115, 3 },
  { 116, 4 },
  { 116, 8 },
  { 117, 1 },
  { 117, 1 },
  { 82, 1 },
  { 82, 3 },
  { 81, 1 },
  { 81, 3 },
  { 72, 0 },
  { 72, 1 },
  { 111, 0 },
  { 111, 1 },
  { 85, 0 },
  { 85, 1 },
  { 101, 0 },
  { 101, 1 },
  { 95, 1 },
  { 100, 1 },
  { 100, 3 },
  { 96, 0 },
  { 96, 1 },
  { 102, 0 },
  { 102, 2 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* program ::= decl_list osemi */
#line 31 "parser.y"
{
	yygotominor.yy134 = new program_t(yymsp[-1].minor.yy178);
	ctx->ast = yygotominor.yy134;
}
#line 1675 "parser.c"
        break;
      case 1: /* attr ::= IDENT ASSIGN INT */
      case 2: /* attr ::= IDENT ASSIGN FLOAT */ yytestcase(yyruleno==2);
      case 3: /* attr ::= IDENT ASSIGN STRING */ yytestcase(yyruleno==3);
      case 4: /* attr ::= IDENT ASSIGN CHAR */ yytestcase(yyruleno==4);
      case 5: /* attr ::= IDENT ASSIGN IDENT */ yytestcase(yyruleno==5);
#line 46 "parser.y"
{ yygotominor.yy142 = new attribute_t(yymsp[-2].minor.yy0, yymsp[0].minor.yy0);   yy_destructor(yypParser,21,&yymsp[-1].minor);
}
#line 1685 "parser.c"
        break;
      case 6: /* attr ::= IDENT */
#line 51 "parser.y"
{ yygotominor.yy142 = new attribute_t(yymsp[0].minor.yy0, 0); }
#line 1690 "parser.c"
        break;
      case 7: /* attr_list ::= attr */
#line 54 "parser.y"
{ yygotominor.yy120 = new attribute_vector_t(1, yymsp[0].minor.yy142); }
#line 1695 "parser.c"
        break;
      case 8: /* attr_list ::= attr_list COMMA attr */
#line 55 "parser.y"
{ yymsp[-2].minor.yy120->push_back(yymsp[0].minor.yy142); yygotominor.yy120 = yymsp[-2].minor.yy120;   yy_destructor(yypParser,26,&yymsp[-1].minor);
}
#line 1701 "parser.c"
        break;
      case 9: /* attrs ::= LT attr_list GT */
#line 58 "parser.y"
{ yygotominor.yy97 = new attributes_t(yymsp[-1].minor.yy120);   yy_destructor(yypParser,5,&yymsp[-2].minor);
  yy_destructor(yypParser,7,&yymsp[0].minor);
}
#line 1708 "parser.c"
        break;
      case 10: /* oattrs ::= */
#line 61 "parser.y"
{ yygotominor.yy97 = 0; }
#line 1713 "parser.c"
        break;
      case 11: /* oattrs ::= attrs */
#line 62 "parser.y"
{ yygotominor.yy97 = yymsp[0].minor.yy97; }
#line 1718 "parser.c"
        break;
      case 12: /* stmt_list ::= stmt */
#line 72 "parser.y"
{ 
	yygotominor.yy178 = new node_vector_t;
	if (yymsp[0].minor.yy208) yygotominor.yy178->push_back(yymsp[0].minor.yy208);
}
#line 1726 "parser.c"
        break;
      case 13: /* stmt_list ::= stmt_list SEMICOLON stmt */
#line 76 "parser.y"
{
	if (yymsp[0].minor.yy208) yymsp[-2].minor.yy178->push_back(yymsp[0].minor.yy208);
	yygotominor.yy178 = yymsp[-2].minor.yy178;
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
#line 1735 "parser.c"
        break;
      case 14: /* s_stmt ::= expr */
#line 90 "parser.y"
{ yygotominor.yy208 = new expr_stmt_t(yymsp[0].minor.yy208); }
#line 1740 "parser.c"
        break;
      case 15: /* s_stmt ::= expr_list ASSIGN iexpr_list */
      case 16: /* s_stmt ::= expr_list DECLARIZE iexpr_list */ yytestcase(yyruleno==16);
      case 17: /* s_stmt ::= expr_list A_DIVIDE iexpr_list */ yytestcase(yyruleno==17);
      case 18: /* s_stmt ::= expr_list A_TIMES iexpr_list */ yytestcase(yyruleno==18);
      case 19: /* s_stmt ::= expr_list A_MOD iexpr_list */ yytestcase(yyruleno==19);
      case 20: /* s_stmt ::= expr_list A_SHIFTL iexpr_list */ yytestcase(yyruleno==20);
      case 21: /* s_stmt ::= expr_list A_SHIFTR iexpr_list */ yytestcase(yyruleno==21);
      case 22: /* s_stmt ::= expr_list A_AND iexpr_list */ yytestcase(yyruleno==22);
      case 23: /* s_stmt ::= expr_list A_ANDNOT iexpr_list */ yytestcase(yyruleno==23);
      case 24: /* s_stmt ::= expr_list A_PLUS iexpr_list */ yytestcase(yyruleno==24);
      case 25: /* s_stmt ::= expr_list A_MINUS iexpr_list */ yytestcase(yyruleno==25);
      case 26: /* s_stmt ::= expr_list A_OR iexpr_list */ yytestcase(yyruleno==26);
      case 27: /* s_stmt ::= expr_list A_XOR iexpr_list */ yytestcase(yyruleno==27);
#line 91 "parser.y"
{ yygotominor.yy208 = new assign_stmt_t(yymsp[-2].minor.yy178, yymsp[0].minor.yy178, yymsp[-1].minor.yy0); }
#line 1757 "parser.c"
        break;
      case 28: /* s_stmt ::= expr INC */
      case 29: /* s_stmt ::= expr DEC */ yytestcase(yyruleno==29);
#line 104 "parser.y"
{ yygotominor.yy208 = new incdec_stmt_t(yymsp[-1].minor.yy208, yymsp[0].minor.yy0); }
#line 1763 "parser.c"
        break;
      case 30: /* stmt ::= s_stmt */
      case 112: /* uexpr ::= pexpr */ yytestcase(yyruleno==112);
      case 119: /* expr ::= uexpr */ yytestcase(yyruleno==119);
      case 152: /* ty_uexpr ::= ty_pexpr */ yytestcase(yyruleno==152);
      case 159: /* ty_expr ::= ty_uexpr */ yytestcase(yyruleno==159);
      case 181: /* iexpr ::= ty_expr */ yytestcase(yyruleno==181);
      case 182: /* iexpr ::= compound_lit */ yytestcase(yyruleno==182);
      case 192: /* oexpr ::= expr */ yytestcase(yyruleno==192);
      case 194: /* otype ::= type */ yytestcase(yyruleno==194);
#line 115 "parser.y"
{ yygotominor.yy208 = yymsp[0].minor.yy208; }
#line 1776 "parser.c"
        break;
      case 31: /* stmt ::= decl */
#line 116 "parser.y"
{ yygotominor.yy208 = new decl_stmt_t(yymsp[0].minor.yy208); }
#line 1781 "parser.c"
        break;
      case 32: /* stmt ::= block_stmt */
#line 117 "parser.y"
{ yygotominor.yy208 = yymsp[0].minor.yy80; }
#line 1786 "parser.c"
        break;
      case 33: /* stmt ::= BREAK */
      case 34: /* stmt ::= CONTINUE */ yytestcase(yyruleno==34);
      case 35: /* stmt ::= FALLTHROUGH */ yytestcase(yyruleno==35);
#line 118 "parser.y"
{ yygotominor.yy208 = new flow_stmt_t(yymsp[0].minor.yy0); }
#line 1793 "parser.c"
        break;
      case 36: /* stmt ::= RETURN iexpr_list */
#line 121 "parser.y"
{ yygotominor.yy208 = new return_stmt_t(yymsp[0].minor.yy178, yymsp[-1].minor.yy0); }
#line 1798 "parser.c"
        break;
      case 37: /* stmt ::= RETURN */
#line 122 "parser.y"
{ yygotominor.yy208 = new return_stmt_t(0, yymsp[0].minor.yy0); }
#line 1803 "parser.c"
        break;
      case 38: /* stmt ::= IF expr block_stmt */
#line 124 "parser.y"
{
	yygotominor.yy208 = new ifelse_stmt_t(yymsp[-1].minor.yy208, yymsp[0].minor.yy80, yymsp[-2].minor.yy0);
}
#line 1810 "parser.c"
        break;
      case 39: /* stmt ::= IF expr block_stmt ELSE stmt */
#line 127 "parser.y"
{
	yygotominor.yy208 = new ifelse_stmt_t(yymsp[-3].minor.yy208, yymsp[-2].minor.yy80, yymsp[-4].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy208);
}
#line 1817 "parser.c"
        break;
      case 40: /* stmt ::= FOR s_stmt SEMICOLON oexpr SEMICOLON s_stmt block_stmt */
#line 130 "parser.y"
{
	yygotominor.yy208 = new for_stmt_t(yymsp[-5].minor.yy208, yymsp[-3].minor.yy208, yymsp[-1].minor.yy208, yymsp[0].minor.yy80, yymsp[-6].minor.yy0);
  yy_destructor(yypParser,27,&yymsp[-4].minor);
  yy_destructor(yypParser,27,&yymsp[-2].minor);
}
#line 1826 "parser.c"
        break;
      case 41: /* stmt ::= FOR expr block_stmt */
#line 133 "parser.y"
{
	yygotominor.yy208 = new for_stmt_t(0, yymsp[-1].minor.yy208, 0, yymsp[0].minor.yy80, yymsp[-2].minor.yy0);
}
#line 1833 "parser.c"
        break;
      case 42: /* stmt ::= FOR block_stmt */
#line 136 "parser.y"
{
	yygotominor.yy208 = new for_stmt_t(0, 0, 0, yymsp[0].minor.yy80, yymsp[-1].minor.yy0);
}
#line 1840 "parser.c"
        break;
      case 43: /* stmt ::= SWITCH expr sw_block_stmt */
#line 139 "parser.y"
{
	yygotominor.yy208 = new switch_stmt_t(yymsp[-1].minor.yy208, yymsp[0].minor.yy80, yymsp[-2].minor.yy0);
}
#line 1847 "parser.c"
        break;
      case 44: /* sw_block_stmt ::= LCURLY sw_case_list RCURLY */
#line 151 "parser.y"
{
	yygotominor.yy80 = new block_stmt_t(yymsp[-1].minor.yy178, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);
}
#line 1854 "parser.c"
        break;
      case 45: /* sw_case_list ::= sw_case */
#line 156 "parser.y"
{ yygotominor.yy178 = new node_vector_t(1, yymsp[0].minor.yy42); }
#line 1859 "parser.c"
        break;
      case 46: /* sw_case_list ::= sw_case_list sw_case */
#line 157 "parser.y"
{ yymsp[-1].minor.yy178->push_back(yymsp[0].minor.yy42); yygotominor.yy178 = yymsp[-1].minor.yy178; }
#line 1864 "parser.c"
        break;
      case 47: /* sw_case ::= CASE expr_list COLON stmt_list osemi */
#line 160 "parser.y"
{
	yygotominor.yy42 = new switch_stmt_case_t(yymsp[-3].minor.yy178, yymsp[-1].minor.yy178, yymsp[-4].minor.yy0, yymsp[-2].minor.yy0);
}
#line 1871 "parser.c"
        break;
      case 48: /* sw_case ::= CASE expr_list COLON */
#line 163 "parser.y"
{
	yygotominor.yy42 = new switch_stmt_case_t(yymsp[-1].minor.yy178, 0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);
}
#line 1878 "parser.c"
        break;
      case 49: /* sw_case ::= DEFAULT COLON stmt_list osemi */
#line 166 "parser.y"
{
	yygotominor.yy42 = new switch_stmt_case_t(0, yymsp[-1].minor.yy178, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0);
}
#line 1885 "parser.c"
        break;
      case 50: /* sw_case ::= DEFAULT COLON */
#line 169 "parser.y"
{
	yygotominor.yy42 = new switch_stmt_case_t(0, 0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0);
}
#line 1892 "parser.c"
        break;
      case 51: /* block_stmt ::= LCURLY stmt_list osemi RCURLY */
#line 181 "parser.y"
{
	yygotominor.yy80 = new block_stmt_t(yymsp[-2].minor.yy178, yymsp[-3].minor.yy0, yymsp[0].minor.yy0);
}
#line 1899 "parser.c"
        break;
      case 52: /* block_stmt ::= LCURLY RCURLY */
#line 184 "parser.y"
{
	yygotominor.yy80 = new block_stmt_t(0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0);
}
#line 1906 "parser.c"
        break;
      case 53: /* decl_list ::= decl */
      case 183: /* iexpr_list ::= iexpr */ yytestcase(yyruleno==183);
      case 185: /* expr_list ::= expr */ yytestcase(yyruleno==185);
#line 196 "parser.y"
{ yygotominor.yy178 = new node_vector_t(1, yymsp[0].minor.yy208); }
#line 1913 "parser.c"
        break;
      case 54: /* decl_list ::= decl_list SEMICOLON decl */
#line 197 "parser.y"
{ yymsp[-2].minor.yy178->push_back(yymsp[0].minor.yy208); yygotominor.yy178 = yymsp[-2].minor.yy178;   yy_destructor(yypParser,27,&yymsp[-1].minor);
}
#line 1919 "parser.c"
        break;
      case 55: /* decl ::= oattrs IMPORT import_spec */
#line 213 "parser.y"
{
	yygotominor.yy208 = new import_decl_t(yymsp[-2].minor.yy97, yymsp[0].minor.yy219, yymsp[-1].minor.yy0);
}
#line 1926 "parser.c"
        break;
      case 56: /* decl ::= oattrs IMPORT LPAREN import_spec_list osemi RPAREN */
#line 216 "parser.y"
{
	yygotominor.yy208 = new import_decl_t(yymsp[-5].minor.yy97, yymsp[-2].minor.yy157, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[0].minor.yy0);
}
#line 1933 "parser.c"
        break;
      case 57: /* decl ::= TYPE type_spec */
#line 219 "parser.y"
{
	yygotominor.yy208 = new type_decl_t(yymsp[0].minor.yy2, yymsp[-1].minor.yy0);
}
#line 1940 "parser.c"
        break;
      case 58: /* decl ::= TYPE LPAREN type_spec_list osemi RPAREN */
#line 222 "parser.y"
{
	yygotominor.yy208 = new type_decl_t(yymsp[-2].minor.yy44, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[0].minor.yy0);
}
#line 1947 "parser.c"
        break;
      case 59: /* decl ::= CONST value_spec */
#line 225 "parser.y"
{
	const_decl_t *d = new const_decl_t(yymsp[0].minor.yy141, yymsp[-1].minor.yy0);
	syntax_check_const_decl(ctx->diag, d);
	yygotominor.yy208 = d;
}
#line 1956 "parser.c"
        break;
      case 60: /* decl ::= CONST LPAREN value_spec_list osemi RPAREN */
#line 230 "parser.y"
{
	const_decl_t *d = new const_decl_t(yymsp[-2].minor.yy135, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[0].minor.yy0);
	syntax_check_const_decl(ctx->diag, d);
	yygotominor.yy208 = d;
}
#line 1965 "parser.c"
        break;
      case 61: /* decl ::= VAR value_spec */
#line 235 "parser.y"
{
	var_decl_t *d = new var_decl_t(yymsp[0].minor.yy141, yymsp[-1].minor.yy0);
	syntax_check_var_decl(ctx->diag, d);
	yygotominor.yy208 = d;
}
#line 1974 "parser.c"
        break;
      case 62: /* decl ::= VAR LPAREN value_spec_list osemi RPAREN */
#line 240 "parser.y"
{
	var_decl_t *d = new var_decl_t(yymsp[-2].minor.yy135, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[0].minor.yy0);
	syntax_check_var_decl(ctx->diag, d);
	yygotominor.yy208 = d;
}
#line 1983 "parser.c"
        break;
      case 63: /* decl ::= FUNC ident LPAREN oargs_comma_list RPAREN func_results */
#line 248 "parser.y"
{
	func_type_t *ftype = new func_type_t(yymsp[-2].minor.yy60, yymsp[0].minor.yy60, yymsp[-5].minor.yy0);
	yygotominor.yy208 = new func_decl_t(yymsp[-4].minor.yy72, ftype);
  yy_destructor(yypParser,56,&yymsp[-3].minor);
  yy_destructor(yypParser,57,&yymsp[-1].minor);
}
#line 1993 "parser.c"
        break;
      case 64: /* decl ::= FUNC ident LPAREN oargs_comma_list RPAREN func_results block_stmt */
#line 255 "parser.y"
{
	func_type_t *ftype = new func_type_t(yymsp[-3].minor.yy60, yymsp[-1].minor.yy60, yymsp[-6].minor.yy0);
	yygotominor.yy208 = new func_decl_t(yymsp[-5].minor.yy72, ftype, yymsp[0].minor.yy80);
  yy_destructor(yypParser,56,&yymsp[-4].minor);
  yy_destructor(yypParser,57,&yymsp[-2].minor);
}
#line 2003 "parser.c"
        break;
      case 65: /* func_results ::= type */
#line 268 "parser.y"
{
	field_t *f = new field_t(0, yymsp[0].minor.yy208);
	yygotominor.yy60 = new field_vector_t(1, f);
}
#line 2011 "parser.c"
        break;
      case 66: /* func_results ::= LPAREN field_comma_list RPAREN */
#line 272 "parser.y"
{ yygotominor.yy60 = yymsp[-1].minor.yy60;   yy_destructor(yypParser,56,&yymsp[-2].minor);
  yy_destructor(yypParser,57,&yymsp[0].minor);
}
#line 2018 "parser.c"
        break;
      case 67: /* func_results ::= */
      case 198: /* oargs_comma_list ::= */ yytestcase(yyruleno==198);
      case 200: /* ofield_semi_list_and_osemi ::= */ yytestcase(yyruleno==200);
#line 273 "parser.y"
{ yygotominor.yy60 = 0; }
#line 2025 "parser.c"
        break;
      case 68: /* import_spec_list ::= import_spec */
#line 286 "parser.y"
{ yygotominor.yy157 = new import_spec_vector_t(1, yymsp[0].minor.yy219); }
#line 2030 "parser.c"
        break;
      case 69: /* import_spec_list ::= import_spec_list SEMICOLON import_spec */
#line 287 "parser.y"
{
	yymsp[-2].minor.yy157->push_back(yymsp[0].minor.yy219); yygotominor.yy157 = yymsp[-2].minor.yy157;
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
#line 2038 "parser.c"
        break;
      case 70: /* import_spec ::= IDENT STRING */
#line 292 "parser.y"
{ yygotominor.yy219 = new import_spec_t(yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
#line 2043 "parser.c"
        break;
      case 71: /* import_spec ::= STRING */
#line 293 "parser.y"
{ yygotominor.yy219 = new import_spec_t(0, yymsp[0].minor.yy0); }
#line 2048 "parser.c"
        break;
      case 72: /* type_spec_list ::= type_spec */
#line 306 "parser.y"
{ yygotominor.yy44 = new type_spec_vector_t(1, yymsp[0].minor.yy2); }
#line 2053 "parser.c"
        break;
      case 73: /* type_spec_list ::= type_spec_list SEMICOLON type_spec */
#line 307 "parser.y"
{
	yymsp[-2].minor.yy44->push_back(yymsp[0].minor.yy2); yygotominor.yy44 = yymsp[-2].minor.yy44;
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
#line 2061 "parser.c"
        break;
      case 74: /* type_spec ::= IDENT type */
#line 312 "parser.y"
{ yygotominor.yy2 = new type_spec_t(yymsp[-1].minor.yy0, yymsp[0].minor.yy208); }
#line 2066 "parser.c"
        break;
      case 75: /* value_spec_list ::= value_spec */
#line 327 "parser.y"
{ yygotominor.yy135 = new value_spec_vector_t(1, yymsp[0].minor.yy141); }
#line 2071 "parser.c"
        break;
      case 76: /* value_spec_list ::= value_spec_list SEMICOLON value_spec */
#line 328 "parser.y"
{
	yymsp[-2].minor.yy135->push_back(yymsp[0].minor.yy141); yygotominor.yy135 = yymsp[-2].minor.yy135;
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
#line 2079 "parser.c"
        break;
      case 77: /* value_spec ::= ident_list otype */
#line 333 "parser.y"
{
	yygotominor.yy141 = new value_spec_t(yymsp[-1].minor.yy182, yymsp[0].minor.yy208);
}
#line 2086 "parser.c"
        break;
      case 78: /* value_spec ::= ident_list otype ASSIGN iexpr_list */
#line 336 "parser.y"
{
	yygotominor.yy141 = new value_spec_t(yymsp[-3].minor.yy182, yymsp[-2].minor.yy208, yymsp[0].minor.yy178, yymsp[-1].minor.yy0);
}
#line 2093 "parser.c"
        break;
      case 79: /* type ::= TIMES type */
      case 113: /* uexpr ::= PLUS uexpr */ yytestcase(yyruleno==113);
      case 114: /* uexpr ::= MINUS uexpr */ yytestcase(yyruleno==114);
      case 115: /* uexpr ::= NOT uexpr */ yytestcase(yyruleno==115);
      case 116: /* uexpr ::= AND uexpr */ yytestcase(yyruleno==116);
      case 117: /* uexpr ::= TIMES uexpr */ yytestcase(yyruleno==117);
      case 118: /* uexpr ::= XOR uexpr */ yytestcase(yyruleno==118);
      case 153: /* ty_uexpr ::= PLUS uexpr */ yytestcase(yyruleno==153);
      case 154: /* ty_uexpr ::= MINUS uexpr */ yytestcase(yyruleno==154);
      case 155: /* ty_uexpr ::= NOT uexpr */ yytestcase(yyruleno==155);
      case 156: /* ty_uexpr ::= AND uexpr */ yytestcase(yyruleno==156);
      case 157: /* ty_uexpr ::= TIMES ty_uexpr */ yytestcase(yyruleno==157);
      case 158: /* ty_uexpr ::= XOR uexpr */ yytestcase(yyruleno==158);
#line 357 "parser.y"
{ yygotominor.yy208 = new unary_expr_t(yymsp[0].minor.yy208, yymsp[-1].minor.yy0); }
#line 2110 "parser.c"
        break;
      case 80: /* type ::= LSB expr RSB type */
      case 139: /* ty_pexpr ::= LSB expr RSB type */ yytestcase(yyruleno==139);
#line 358 "parser.y"
{ yygotominor.yy208 = new array_type_t(yymsp[-2].minor.yy208, yymsp[0].minor.yy208, yymsp[-3].minor.yy0, yymsp[-1].minor.yy0); }
#line 2116 "parser.c"
        break;
      case 81: /* type ::= LSB RSB type */
      case 140: /* ty_pexpr ::= LSB RSB type */ yytestcase(yyruleno==140);
#line 359 "parser.y"
{ yygotominor.yy208 = new array_type_t(0, yymsp[0].minor.yy208, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0); }
#line 2122 "parser.c"
        break;
      case 82: /* type ::= ident DOT ident */
#line 360 "parser.y"
{ yygotominor.yy208 = new selector_expr_t(yymsp[-2].minor.yy72, yymsp[0].minor.yy72);   yy_destructor(yypParser,64,&yymsp[-1].minor);
}
#line 2128 "parser.c"
        break;
      case 83: /* type ::= ident */
      case 105: /* pexpr ::= ident */ yytestcase(yyruleno==105);
      case 142: /* ty_pexpr ::= ident */ yytestcase(yyruleno==142);
#line 361 "parser.y"
{ yygotominor.yy208 = yymsp[0].minor.yy72; }
#line 2135 "parser.c"
        break;
      case 84: /* type ::= STRUCT LCURLY ofield_semi_list_and_osemi RCURLY */
      case 85: /* type ::= UNION LCURLY ofield_semi_list_and_osemi RCURLY */ yytestcase(yyruleno==85);
#line 362 "parser.y"
{
	yygotominor.yy208 = new struct_type_t(yymsp[-1].minor.yy60, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);	
}
#line 2143 "parser.c"
        break;
      case 86: /* type ::= FUNC LPAREN oargs_comma_list RPAREN func_results */
      case 151: /* ty_pexpr ::= FUNC LPAREN oargs_comma_list RPAREN func_results */ yytestcase(yyruleno==151);
#line 368 "parser.y"
{
	yygotominor.yy208 = new func_type_t(yymsp[-2].minor.yy60, yymsp[0].minor.yy60, yymsp[-4].minor.yy0);
  yy_destructor(yypParser,56,&yymsp[-3].minor);
  yy_destructor(yypParser,57,&yymsp[-1].minor);
}
#line 2153 "parser.c"
        break;
      case 87: /* field_comma_list ::= nametype_list */
#line 383 "parser.y"
{
	yygotominor.yy60 = nametypev_to_fieldv(ctx->diag, yymsp[0].minor.yy227, false);
}
#line 2160 "parser.c"
        break;
      case 88: /* args_comma_list ::= nametype_list ofunc_ellipsis */
#line 388 "parser.y"
{
	yygotominor.yy60 = nametypev_to_fieldv(ctx->diag, yymsp[-1].minor.yy227, yymsp[0].minor.yy89);
}
#line 2167 "parser.c"
        break;
      case 89: /* args_comma_list ::= ELLIPSIS */
#line 391 "parser.y"
{
	yygotominor.yy60 = nametypev_to_fieldv(ctx->diag, new nametype_vector_t, true);
  yy_destructor(yypParser,67,&yymsp[0].minor);
}
#line 2175 "parser.c"
        break;
      case 90: /* field_semi_list ::= field */
#line 396 "parser.y"
{ yygotominor.yy60 = new field_vector_t(1, yymsp[0].minor.yy174); }
#line 2180 "parser.c"
        break;
      case 91: /* field_semi_list ::= field_semi_list SEMICOLON field */
#line 397 "parser.y"
{
	yymsp[-2].minor.yy60->push_back(yymsp[0].minor.yy174); yygotominor.yy60 = yymsp[-2].minor.yy60;
  yy_destructor(yypParser,27,&yymsp[-1].minor);
}
#line 2188 "parser.c"
        break;
      case 92: /* nametype_list ::= nametype */
#line 403 "parser.y"
{ yygotominor.yy227 = new nametype_vector_t(1, yymsp[0].minor.yy99); }
#line 2193 "parser.c"
        break;
      case 93: /* nametype_list ::= nametype_list COMMA nametype */
#line 404 "parser.y"
{
	yymsp[-2].minor.yy227->push_back(yymsp[0].minor.yy99); yygotominor.yy227 = yymsp[-2].minor.yy227;
  yy_destructor(yypParser,26,&yymsp[-1].minor);
}
#line 2201 "parser.c"
        break;
      case 94: /* nametype ::= ident type */
#line 409 "parser.y"
{ yygotominor.yy99.name = yymsp[-1].minor.yy72; yygotominor.yy99.type = yymsp[0].minor.yy208; }
#line 2206 "parser.c"
        break;
      case 95: /* nametype ::= type */
#line 410 "parser.y"
{ yygotominor.yy99.name = 0; yygotominor.yy99.type = yymsp[0].minor.yy208; }
#line 2211 "parser.c"
        break;
      case 96: /* ofunc_ellipsis ::= COMMA ELLIPSIS */
#line 420 "parser.y"
{ yygotominor.yy89 = true;   yy_destructor(yypParser,26,&yymsp[-1].minor);
  yy_destructor(yypParser,67,&yymsp[0].minor);
}
#line 2218 "parser.c"
        break;
      case 97: /* ofunc_ellipsis ::= */
#line 421 "parser.y"
{ yygotominor.yy89 = false; }
#line 2223 "parser.c"
        break;
      case 98: /* field ::= ident_list type */
#line 434 "parser.y"
{ yygotominor.yy174 = new field_t(yymsp[-1].minor.yy182, yymsp[0].minor.yy208); }
#line 2228 "parser.c"
        break;
      case 99: /* field ::= type */
#line 435 "parser.y"
{ yygotominor.yy174 = new field_t(0, yymsp[0].minor.yy208); }
#line 2233 "parser.c"
        break;
      case 100: /* basic_lit ::= INT */
      case 101: /* basic_lit ::= FLOAT */ yytestcase(yyruleno==101);
      case 102: /* basic_lit ::= STRING */ yytestcase(yyruleno==102);
      case 103: /* basic_lit ::= CHAR */ yytestcase(yyruleno==103);
#line 446 "parser.y"
{ yygotominor.yy122 = new basic_lit_expr_t(yymsp[0].minor.yy0); }
#line 2241 "parser.c"
        break;
      case 104: /* pexpr ::= basic_lit */
      case 141: /* ty_pexpr ::= basic_lit */ yytestcase(yyruleno==141);
#line 462 "parser.y"
{ yygotominor.yy208 = yymsp[0].minor.yy122; }
#line 2247 "parser.c"
        break;
      case 106: /* pexpr ::= LPAREN expr RPAREN */
      case 143: /* ty_pexpr ::= LPAREN expr RPAREN */ yytestcase(yyruleno==143);
#line 464 "parser.y"
{ yygotominor.yy208 = new paren_expr_t(yymsp[-1].minor.yy208, yymsp[-2].minor.yy0, yymsp[0].minor.yy0); }
#line 2253 "parser.c"
        break;
      case 107: /* pexpr ::= pexpr LSB expr RSB */
      case 144: /* ty_pexpr ::= pexpr LSB expr RSB */ yytestcase(yyruleno==144);
#line 465 "parser.y"
{ yygotominor.yy208 = new index_expr_t(yymsp[-3].minor.yy208, yymsp[-1].minor.yy208, yymsp[-2].minor.yy0, yymsp[0].minor.yy0); }
#line 2259 "parser.c"
        break;
      case 108: /* pexpr ::= pexpr DOT IDENT */
      case 145: /* ty_pexpr ::= pexpr DOT IDENT */ yytestcase(yyruleno==145);
#line 468 "parser.y"
{
	yygotominor.yy208 = new selector_expr_t(yymsp[-2].minor.yy208, new ident_expr_t(yymsp[0].minor.yy0));
  yy_destructor(yypParser,64,&yymsp[-1].minor);
}
#line 2268 "parser.c"
        break;
      case 109: /* pexpr ::= pexpr DOT LPAREN type RPAREN */
      case 146: /* ty_pexpr ::= pexpr DOT LPAREN type RPAREN */ yytestcase(yyruleno==146);
#line 473 "parser.y"
{
	yygotominor.yy208 = new type_cast_expr_t(yymsp[-4].minor.yy208, yymsp[-1].minor.yy208, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);
}
#line 2276 "parser.c"
        break;
      case 110: /* pexpr ::= pexpr LPAREN RPAREN */
      case 147: /* ty_pexpr ::= pexpr LPAREN RPAREN */ yytestcase(yyruleno==147);
#line 479 "parser.y"
{ yygotominor.yy208 = new call_expr_t(yymsp[-2].minor.yy208, 0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
#line 2282 "parser.c"
        break;
      case 111: /* pexpr ::= pexpr LPAREN iexpr_list ocomma RPAREN */
      case 148: /* ty_pexpr ::= pexpr LPAREN iexpr_list ocomma RPAREN */ yytestcase(yyruleno==148);
#line 482 "parser.y"
{
	yygotominor.yy208 = new call_expr_t(yymsp[-4].minor.yy208, yymsp[-2].minor.yy178, yymsp[-3].minor.yy0, yymsp[0].minor.yy0);
}
#line 2290 "parser.c"
        break;
      case 120: /* expr ::= expr DIVIDE expr */
      case 121: /* expr ::= expr TIMES expr */ yytestcase(yyruleno==121);
      case 122: /* expr ::= expr MOD expr */ yytestcase(yyruleno==122);
      case 123: /* expr ::= expr SHIFTL expr */ yytestcase(yyruleno==123);
      case 124: /* expr ::= expr SHIFTR expr */ yytestcase(yyruleno==124);
      case 125: /* expr ::= expr AND expr */ yytestcase(yyruleno==125);
      case 126: /* expr ::= expr ANDNOT expr */ yytestcase(yyruleno==126);
      case 127: /* expr ::= expr PLUS expr */ yytestcase(yyruleno==127);
      case 128: /* expr ::= expr MINUS expr */ yytestcase(yyruleno==128);
      case 129: /* expr ::= expr OR expr */ yytestcase(yyruleno==129);
      case 130: /* expr ::= expr XOR expr */ yytestcase(yyruleno==130);
      case 131: /* expr ::= expr EQ expr */ yytestcase(yyruleno==131);
      case 132: /* expr ::= expr NEQ expr */ yytestcase(yyruleno==132);
      case 133: /* expr ::= expr LT expr */ yytestcase(yyruleno==133);
      case 134: /* expr ::= expr LE expr */ yytestcase(yyruleno==134);
      case 135: /* expr ::= expr GT expr */ yytestcase(yyruleno==135);
      case 136: /* expr ::= expr GE expr */ yytestcase(yyruleno==136);
      case 137: /* expr ::= expr ANDAND expr */ yytestcase(yyruleno==137);
      case 138: /* expr ::= expr OROR expr */ yytestcase(yyruleno==138);
      case 160: /* ty_expr ::= expr DIVIDE expr */ yytestcase(yyruleno==160);
      case 161: /* ty_expr ::= expr TIMES expr */ yytestcase(yyruleno==161);
      case 162: /* ty_expr ::= expr MOD expr */ yytestcase(yyruleno==162);
      case 163: /* ty_expr ::= expr SHIFTL expr */ yytestcase(yyruleno==163);
      case 164: /* ty_expr ::= expr SHIFTR expr */ yytestcase(yyruleno==164);
      case 165: /* ty_expr ::= expr AND expr */ yytestcase(yyruleno==165);
      case 166: /* ty_expr ::= expr ANDNOT expr */ yytestcase(yyruleno==166);
      case 167: /* ty_expr ::= expr PLUS expr */ yytestcase(yyruleno==167);
      case 168: /* ty_expr ::= expr MINUS expr */ yytestcase(yyruleno==168);
      case 169: /* ty_expr ::= expr OR expr */ yytestcase(yyruleno==169);
      case 170: /* ty_expr ::= expr XOR expr */ yytestcase(yyruleno==170);
      case 171: /* ty_expr ::= expr EQ expr */ yytestcase(yyruleno==171);
      case 172: /* ty_expr ::= expr NEQ expr */ yytestcase(yyruleno==172);
      case 173: /* ty_expr ::= expr LT expr */ yytestcase(yyruleno==173);
      case 174: /* ty_expr ::= expr LE expr */ yytestcase(yyruleno==174);
      case 175: /* ty_expr ::= expr GT expr */ yytestcase(yyruleno==175);
      case 176: /* ty_expr ::= expr GE expr */ yytestcase(yyruleno==176);
      case 177: /* ty_expr ::= expr ANDAND expr */ yytestcase(yyruleno==177);
      case 178: /* ty_expr ::= expr OROR expr */ yytestcase(yyruleno==178);
#line 515 "parser.y"
{ yygotominor.yy208 = new binary_expr_t(yymsp[-2].minor.yy208, yymsp[0].minor.yy208, yymsp[-1].minor.yy0); }
#line 2332 "parser.c"
        break;
      case 149: /* ty_pexpr ::= STRUCT LCURLY ofield_semi_list_and_osemi RCURLY */
      case 150: /* ty_pexpr ::= UNION LCURLY ofield_semi_list_and_osemi RCURLY */ yytestcase(yyruleno==150);
#line 571 "parser.y"
{
	yygotominor.yy208 = new struct_type_t(yymsp[-1].minor.yy60, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[0].minor.yy0);
}
#line 2340 "parser.c"
        break;
      case 179: /* compound_lit ::= LCURLY iexpr_list ocomma RCURLY */
#line 623 "parser.y"
{
	yygotominor.yy208 = new compound_lit_t(yymsp[-2].minor.yy178, 0, yymsp[-3].minor.yy0, yymsp[0].minor.yy0);
}
#line 2347 "parser.c"
        break;
      case 180: /* compound_lit ::= LCURLY iexpr_list ocomma RCURLY DOT LPAREN type RPAREN */
#line 626 "parser.y"
{
	yygotominor.yy208 = new compound_lit_t(yymsp[-6].minor.yy178, yymsp[-1].minor.yy208, yymsp[-7].minor.yy0, yymsp[0].minor.yy0);
  yy_destructor(yypParser,51,&yymsp[-4].minor);
  yy_destructor(yypParser,64,&yymsp[-3].minor);
  yy_destructor(yypParser,56,&yymsp[-2].minor);
}
#line 2357 "parser.c"
        break;
      case 184: /* iexpr_list ::= iexpr_list COMMA iexpr */
      case 186: /* expr_list ::= expr_list COMMA expr */ yytestcase(yyruleno==186);
#line 645 "parser.y"
{ yymsp[-2].minor.yy178->push_back(yymsp[0].minor.yy208); yygotominor.yy178 = yymsp[-2].minor.yy178;   yy_destructor(yypParser,26,&yymsp[-1].minor);
}
#line 2364 "parser.c"
        break;
      case 188: /* osemi ::= SEMICOLON */
#line 660 "parser.y"
{
  yy_destructor(yypParser,27,&yymsp[0].minor);
}
#line 2371 "parser.c"
        break;
      case 190: /* ocomma ::= COMMA */
#line 664 "parser.y"
{
  yy_destructor(yypParser,26,&yymsp[0].minor);
}
#line 2378 "parser.c"
        break;
      case 191: /* oexpr ::= */
      case 193: /* otype ::= */ yytestcase(yyruleno==193);
#line 668 "parser.y"
{ yygotominor.yy208 = 0; }
#line 2384 "parser.c"
        break;
      case 195: /* ident ::= IDENT */
#line 678 "parser.y"
{ yygotominor.yy72 = new ident_expr_t(yymsp[0].minor.yy0); }
#line 2389 "parser.c"
        break;
      case 196: /* ident_list ::= ident */
#line 682 "parser.y"
{ yygotominor.yy182 = new ident_expr_vector_t(1, yymsp[0].minor.yy72); }
#line 2394 "parser.c"
        break;
      case 197: /* ident_list ::= ident_list COMMA ident */
#line 683 "parser.y"
{ yymsp[-2].minor.yy182->push_back(yymsp[0].minor.yy72); yygotominor.yy182 = yymsp[-2].minor.yy182;   yy_destructor(yypParser,26,&yymsp[-1].minor);
}
#line 2400 "parser.c"
        break;
      case 199: /* oargs_comma_list ::= args_comma_list */
#line 688 "parser.y"
{ yygotominor.yy60 = yymsp[0].minor.yy60; }
#line 2405 "parser.c"
        break;
      case 201: /* ofield_semi_list_and_osemi ::= field_semi_list osemi */
#line 693 "parser.y"
{ yygotominor.yy60 = yymsp[-1].minor.yy60; }
#line 2410 "parser.c"
        break;
      default:
      /* (187) osemi ::= */ yytestcase(yyruleno==187);
      /* (189) ocomma ::= */ yytestcase(yyruleno==189);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  ParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 21 "parser.y"

	message_t *m;
	m = new_message(MESSAGE_ERROR,
			ctx->last_pos, true, 0, 0,
			"unexpected token: %s",
			token_to_string(ctx->last_token));
	ctx->diag->report(m);
#line 2482 "parser.c"
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  ParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  ParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
